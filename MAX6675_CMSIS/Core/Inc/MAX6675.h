/**
 ******************************************************************************
 *  @file MAX6675.h
 *  @brief Библиотека для работы с MAX6675(Преобразователь температуры для термопар K-типа)
 *  @author Волков Олег
 *  @date 23.01.2023
 *
 ******************************************************************************
 * @attention
 *
 *  MAX6675 выполняет компенсацию холодного спая и оцифровывает сигнал термопары K-типа.
 *  Данные выводятся в 12-битном разрешении, совместимом с SPI, формат только для чтения.
 *  Разрешение температуры кратно 0.25 °С. 
 *  Используется в промышленности, бытовой технике, системах отопления, вентиляции и кондиционировании.
 *  Горячий спай термопары способен измерять температуру от 0°C до +1023,75°C, при этом 
 *  холодный конец (температура окружающей среды платы, на которой установлен MAX6675),
 *  может находиться в диапазоне от -20°C до +85°C.
 *  MAX6675 корректирует измерения по температуре холодного спая.
 * 
 *  SPI: Максимальная скорость SCK =  4.3 MHz
 *       CS(NSS) в активном состоянии подтянут к земле
 *       CPOL = 0
 *       CPHA = 0
 *       Работа с данными осуществляется в 16-битном формате.
 * 
 *  Частота преобразования: 0.17 - 0.22 секунды (не нужно опрашивать чаще, чем это значение)
 * 
 *
 *  YouTube: https://www.youtube.com/channel/UCzZKTNVpcMSALU57G1THoVw
 *  GitHub: https://github.com/Solderingironspb/Lessons-Stm32/blob/master/README.md Группа
 *  ВК: https://vk.com/solderingiron.stm32 
 *  Документация: https://github.com/Solderingironspb/MAX6675_lib/blob/main/MAX6675.pdf
 *
 ******************************************************************************
 */
/*----------------------Пример использования библиотеки----------------------*/
/*
 * CMSIS:
 * MAX6675_Temperature = MAX6675_GetTemperature(SPI1);  
 * Delay_ms(220);
 * 
 * HAL:
 * MAX6675_Temperature = MAX6675_GetTemperature(&hspi1);
 * HAL_Delay(220);
*/
/*----------------------Пример использования библиотеки----------------------*/


#ifndef __MAX6675_H
#define __MAX6675_H

#ifdef __cplusplus
extern "C" {
#endif

/*----------Выбор библиотеки----------*/
#define USE_CMSIS   //Работать на CMSIS
//#define USE_HAL   //Работать на HAL
/*----------Выбор библиотеки----------*/

#if defined (USE_CMSIS)
#include "stm32f103xx_CMSIS.h"
#elif defined (USE_HAL)
#include "stm32f1xx_hal.h"
#endif

/*----------Макросы----------*/
#define NSS_PORT GPIOA  //Порт ножки CS
#define NSS_PIN  4      //Пин ножки CS

//NSS_ACTIVE_LOW
#define NSS_ON  NSS_PORT->BSRR = (1 << (NSS_PIN + 16)) //CS вкл. 
#define NSS_OFF NSS_PORT->BSRR = (1 << NSS_PIN); //CS выкл.
/*----------Макросы----------*/

/*----------Прототипы функций----------*/
#if defined (USE_CMSIS) 
 float MAX6675_GetTemperature(SPI_TypeDef *SPI); //Получение данных о температуре
#elif defined (USE_HAL)
 float MAX6675_GetTemperature(SPI_HandleTypeDef *hspi); //Получение данных о температуре    
#endif    
/*----------Прототипы функций----------*/

#ifdef __cplusplus
}
#endif

#endif /* __MAX6675_H */
