
GMG12864_HAL_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004478  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08004584  08004584  00014584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b74  08004b74  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004b74  08004b74  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b74  08004b74  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b74  08004b74  00014b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000074  08004bf0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  08004bf0  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008342  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001723  00000000  00000000  000283df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00029b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000600  00000000  00000000  0002a1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017097  00000000  00000000  0002a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007fa6  00000000  00000000  0004183f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823ca  00000000  00000000  000497e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cbbaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ed8  00000000  00000000  000cbc04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	0800456c 	.word	0x0800456c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	0800456c 	.word	0x0800456c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__gesf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpsf2+0x4>
 800061e:	bf00      	nop

08000620 <__lesf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpsf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800063c:	bf18      	it	ne
 800063e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000642:	d011      	beq.n	8000668 <__cmpsf2+0x40>
 8000644:	b001      	add	sp, #4
 8000646:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064a:	bf18      	it	ne
 800064c:	ea90 0f01 	teqne	r0, r1
 8000650:	bf58      	it	pl
 8000652:	ebb2 0003 	subspl.w	r0, r2, r3
 8000656:	bf88      	it	hi
 8000658:	17c8      	asrhi	r0, r1, #31
 800065a:	bf38      	it	cc
 800065c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000660:	bf18      	it	ne
 8000662:	f040 0001 	orrne.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	d102      	bne.n	8000674 <__cmpsf2+0x4c>
 800066e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000672:	d105      	bne.n	8000680 <__cmpsf2+0x58>
 8000674:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000678:	d1e4      	bne.n	8000644 <__cmpsf2+0x1c>
 800067a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800067e:	d0e1      	beq.n	8000644 <__cmpsf2+0x1c>
 8000680:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_cfrcmple>:
 8000688:	4684      	mov	ip, r0
 800068a:	4608      	mov	r0, r1
 800068c:	4661      	mov	r1, ip
 800068e:	e7ff      	b.n	8000690 <__aeabi_cfcmpeq>

08000690 <__aeabi_cfcmpeq>:
 8000690:	b50f      	push	{r0, r1, r2, r3, lr}
 8000692:	f7ff ffc9 	bl	8000628 <__cmpsf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a0 <__aeabi_fcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cfcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cfcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cfcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffd2 	bl	8000688 <__aeabi_cfrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc8 	bl	8000688 <__aeabi_cfrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_f2uiz>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	d20e      	bcs.n	8000726 <__aeabi_f2uiz+0x22>
 8000708:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800070c:	d30b      	bcc.n	8000726 <__aeabi_f2uiz+0x22>
 800070e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000712:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000716:	d409      	bmi.n	800072c <__aeabi_f2uiz+0x28>
 8000718:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800071c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000720:	fa23 f002 	lsr.w	r0, r3, r2
 8000724:	4770      	bx	lr
 8000726:	f04f 0000 	mov.w	r0, #0
 800072a:	4770      	bx	lr
 800072c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000730:	d101      	bne.n	8000736 <__aeabi_f2uiz+0x32>
 8000732:	0242      	lsls	r2, r0, #9
 8000734:	d102      	bne.n	800073c <__aeabi_f2uiz+0x38>
 8000736:	f04f 30ff 	mov.w	r0, #4294967295
 800073a:	4770      	bx	lr
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop

08000744 <GMG12864_Send_command>:
#endif
/*---------------Вывод стартового демонстрационного лого------------------------*/
/*================= Демонстрационное лого. Можно вырезать. =====================*/

/*----------------------Функция отправки команды на дисплей------------------------*/
static void GMG12864_Send_command(uint8_t Command) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
#if defined (USE_CMSIS)
    DC_ON;
    CMSIS_SPI_Data_Transmit_8BIT(SPI1, &Command, 1, 100);
    DC_OFF;
#elif defined (USE_HAL)
    DC_ON;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <GMG12864_Send_command+0x3c>)
 8000750:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000754:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, &Command, 1, HAL_MAX_DELAY);
 8000756:	1df9      	adds	r1, r7, #7
 8000758:	f04f 33ff 	mov.w	r3, #4294967295
 800075c:	2201      	movs	r2, #1
 800075e:	4809      	ldr	r0, [pc, #36]	; (8000784 <GMG12864_Send_command+0x40>)
 8000760:	f003 f8a8 	bl	80038b4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000764:	bf00      	nop
 8000766:	4807      	ldr	r0, [pc, #28]	; (8000784 <GMG12864_Send_command+0x40>)
 8000768:	f003 f9e0 	bl	8003b2c <HAL_SPI_GetState>
 800076c:	4603      	mov	r3, r0
 800076e:	2b01      	cmp	r3, #1
 8000770:	d1f9      	bne.n	8000766 <GMG12864_Send_command+0x22>
    DC_OFF;
 8000772:	4b03      	ldr	r3, [pc, #12]	; (8000780 <GMG12864_Send_command+0x3c>)
 8000774:	2204      	movs	r2, #4
 8000776:	611a      	str	r2, [r3, #16]
#endif
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40010800 	.word	0x40010800
 8000784:	2000058c 	.word	0x2000058c

08000788 <GMG12864_Send_data>:
/*----------------------Функция отправки команды на дисплей------------------------*/

/*----------------------Функция отправки данных на дисплей------------------------*/
/// Функция отправки данных на дисплей
/// \param Data - 8 бит данных.
static void GMG12864_Send_data(uint8_t Dat) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
#if defined (USE_CMSIS)
    CMSIS_SPI_Data_Transmit_8BIT(SPI1, &Dat, 1, 100);
#elif defined (USE_HAL)
    HAL_SPI_Transmit(&hspi1, &Dat, 1, HAL_MAX_DELAY);
 8000792:	1df9      	adds	r1, r7, #7
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
 8000798:	2201      	movs	r2, #1
 800079a:	4807      	ldr	r0, [pc, #28]	; (80007b8 <GMG12864_Send_data+0x30>)
 800079c:	f003 f88a 	bl	80038b4 <HAL_SPI_Transmit>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) ;
 80007a0:	bf00      	nop
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <GMG12864_Send_data+0x30>)
 80007a4:	f003 f9c2 	bl	8003b2c <HAL_SPI_GetState>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d1f9      	bne.n	80007a2 <GMG12864_Send_data+0x1a>
#endif
	
}
 80007ae:	bf00      	nop
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	2000058c 	.word	0x2000058c

080007bc <GMG12864_Clean_Frame_buffer>:
/*----------------------Функция отправки данных на дисплей------------------------*/

/*------------------------Функция очистки буфера кадра-------------------------*/
void GMG12864_Clean_Frame_buffer(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
/// Функция очистки буфера кадра
	memset(Frame_buffer, 0x00, sizeof(Frame_buffer));
 80007c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007c4:	2100      	movs	r1, #0
 80007c6:	4802      	ldr	r0, [pc, #8]	; (80007d0 <GMG12864_Clean_Frame_buffer+0x14>)
 80007c8:	f003 fa8e 	bl	8003ce8 <memset>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000110 	.word	0x20000110

080007d4 <GMG12864_Init>:
    GMG12864_Send_command(0xA6); //0xA6 - nomal, 0xA7 - revers
    Delay_ms(1);
    NSS_OFF;
}
#elif defined (USE_HAL)
void GMG12864_Init(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
    /// Функция инициализации дисплея
    NSS_ON;
 80007d8:	4b24      	ldr	r3, [pc, #144]	; (800086c <GMG12864_Init+0x98>)
 80007da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007de:	611a      	str	r2, [r3, #16]
    RST_ON;
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <GMG12864_Init+0x98>)
 80007e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007e6:	611a      	str	r2, [r3, #16]
    HAL_Delay(10);
 80007e8:	200a      	movs	r0, #10
 80007ea:	f002 f953 	bl	8002a94 <HAL_Delay>
    RST_OFF;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	; (800086c <GMG12864_Init+0x98>)
 80007f0:	2202      	movs	r2, #2
 80007f2:	611a      	str	r2, [r3, #16]
    HAL_Delay(10);
 80007f4:	200a      	movs	r0, #10
 80007f6:	f002 f94d 	bl	8002a94 <HAL_Delay>
    // Установите рабочий цикл ( 1/7 или 1/9 ) в зависимости от физического ЖК-дисплея
    GMG12864_Send_command(0xA2);
 80007fa:	20a2      	movs	r0, #162	; 0xa2
 80007fc:	f7ff ffa2 	bl	8000744 <GMG12864_Send_command>
    HAL_Delay(1);
 8000800:	2001      	movs	r0, #1
 8000802:	f002 f947 	bl	8002a94 <HAL_Delay>
    // Установите горизонтальную и вертикальную ориентацию в известное состояние
    GMG12864_Send_command(0xA0); //ADC selection(SEG0->SEG128)
 8000806:	20a0      	movs	r0, #160	; 0xa0
 8000808:	f7ff ff9c 	bl	8000744 <GMG12864_Send_command>
    GMG12864_Send_command(0xC8); //SHL selection(COM0->COM64)
 800080c:	20c8      	movs	r0, #200	; 0xc8
 800080e:	f7ff ff99 	bl	8000744 <GMG12864_Send_command>
    HAL_Delay(1);
 8000812:	2001      	movs	r0, #1
 8000814:	f002 f93e 	bl	8002a94 <HAL_Delay>
    // делитель внутреннего резистора установлен на 7 (от 0..7)
    GMG12864_Send_command(0x20 | 0x7); //Regulator Resistor Selection
 8000818:	2027      	movs	r0, #39	; 0x27
 800081a:	f7ff ff93 	bl	8000744 <GMG12864_Send_command>
    HAL_Delay(1);
 800081e:	2001      	movs	r0, #1
 8000820:	f002 f938 	bl	8002a94 <HAL_Delay>
    // управление питанием, все внутренние блоки включены	(от 0..7)
    GMG12864_Send_command(0x28 | 0x7);
 8000824:	202f      	movs	r0, #47	; 0x2f
 8000826:	f7ff ff8d 	bl	8000744 <GMG12864_Send_command>
    HAL_Delay(1);
 800082a:	2001      	movs	r0, #1
 800082c:	f002 f932 	bl	8002a94 <HAL_Delay>
    // войти в режим динамического контраста
    GMG12864_Send_command(0x81); //Electronic Volume
 8000830:	2081      	movs	r0, #129	; 0x81
 8000832:	f7ff ff87 	bl	8000744 <GMG12864_Send_command>
    GMG12864_Send_command(18); // Настройка контраста. Отрегулируйте на своем дисплее. У меня на 15-19 норм. Максимум 63.
 8000836:	2012      	movs	r0, #18
 8000838:	f7ff ff84 	bl	8000744 <GMG12864_Send_command>
    HAL_Delay(1);
 800083c:	2001      	movs	r0, #1
 800083e:	f002 f929 	bl	8002a94 <HAL_Delay>
    GMG12864_Send_command(0x40);
 8000842:	2040      	movs	r0, #64	; 0x40
 8000844:	f7ff ff7e 	bl	8000744 <GMG12864_Send_command>
    HAL_Delay(1);
 8000848:	2001      	movs	r0, #1
 800084a:	f002 f923 	bl	8002a94 <HAL_Delay>
    // CMD_DISPLAY_ON  CMD_DISPLAY_OFF
    GMG12864_Send_command(0xAF); //Display on
 800084e:	20af      	movs	r0, #175	; 0xaf
 8000850:	f7ff ff78 	bl	8000744 <GMG12864_Send_command>
    // Инвертирование экрана
    GMG12864_Send_command(0xA6); //0xA6 - nomal, 0xA7 - revers
 8000854:	20a6      	movs	r0, #166	; 0xa6
 8000856:	f7ff ff75 	bl	8000744 <GMG12864_Send_command>
    HAL_Delay(1);
 800085a:	2001      	movs	r0, #1
 800085c:	f002 f91a 	bl	8002a94 <HAL_Delay>
    NSS_OFF;
 8000860:	4b02      	ldr	r3, [pc, #8]	; (800086c <GMG12864_Init+0x98>)
 8000862:	2201      	movs	r2, #1
 8000864:	611a      	str	r2, [r3, #16]
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40010800 	.word	0x40010800

08000870 <GMG12864_Draw_pixel>:
	}
}
/*------------------------Функция вывода изображения с указаием его размера-------------------------*/

/*------------------------Функция рисования пикселя-------------------------*/
void GMG12864_Draw_pixel(int16_t x, int16_t y, uint8_t color) {
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
 800087a:	460b      	mov	r3, r1
 800087c:	80bb      	strh	r3, [r7, #4]
 800087e:	4613      	mov	r3, r2
 8000880:	70fb      	strb	r3, [r7, #3]

	if (x >= GMG12864_width || x < 0 || y >= GMG12864_height || y < 0) {
 8000882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000886:	4a2f      	ldr	r2, [pc, #188]	; (8000944 <GMG12864_Draw_pixel+0xd4>)
 8000888:	7812      	ldrb	r2, [r2, #0]
 800088a:	4293      	cmp	r3, r2
 800088c:	da55      	bge.n	800093a <GMG12864_Draw_pixel+0xca>
 800088e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000892:	2b00      	cmp	r3, #0
 8000894:	db51      	blt.n	800093a <GMG12864_Draw_pixel+0xca>
 8000896:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800089a:	4a2b      	ldr	r2, [pc, #172]	; (8000948 <GMG12864_Draw_pixel+0xd8>)
 800089c:	7812      	ldrb	r2, [r2, #0]
 800089e:	4293      	cmp	r3, r2
 80008a0:	da4b      	bge.n	800093a <GMG12864_Draw_pixel+0xca>
 80008a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	db47      	blt.n	800093a <GMG12864_Draw_pixel+0xca>
		return;
	} else {
		uint16_t array_pos = x + ((y / 8) * GMG12864_width);
 80008aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	da00      	bge.n	80008b4 <GMG12864_Draw_pixel+0x44>
 80008b2:	3307      	adds	r3, #7
 80008b4:	10db      	asrs	r3, r3, #3
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	4a22      	ldr	r2, [pc, #136]	; (8000944 <GMG12864_Draw_pixel+0xd4>)
 80008bc:	7812      	ldrb	r2, [r2, #0]
 80008be:	b292      	uxth	r2, r2
 80008c0:	fb02 f303 	mul.w	r3, r2, r3
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	4413      	add	r3, r2
 80008ca:	81fb      	strh	r3, [r7, #14]

		if (color) {
 80008cc:	78fb      	ldrb	r3, [r7, #3]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d018      	beq.n	8000904 <GMG12864_Draw_pixel+0x94>
			Frame_buffer[array_pos] |= 1 << (y % 8);
 80008d2:	89fb      	ldrh	r3, [r7, #14]
 80008d4:	4a1d      	ldr	r2, [pc, #116]	; (800094c <GMG12864_Draw_pixel+0xdc>)
 80008d6:	5cd3      	ldrb	r3, [r2, r3]
 80008d8:	b25a      	sxtb	r2, r3
 80008da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008de:	4259      	negs	r1, r3
 80008e0:	f003 0307 	and.w	r3, r3, #7
 80008e4:	f001 0107 	and.w	r1, r1, #7
 80008e8:	bf58      	it	pl
 80008ea:	424b      	negpl	r3, r1
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4619      	mov	r1, r3
 80008f0:	2301      	movs	r3, #1
 80008f2:	408b      	lsls	r3, r1
 80008f4:	b25b      	sxtb	r3, r3
 80008f6:	4313      	orrs	r3, r2
 80008f8:	b25a      	sxtb	r2, r3
 80008fa:	89fb      	ldrh	r3, [r7, #14]
 80008fc:	b2d1      	uxtb	r1, r2
 80008fe:	4a13      	ldr	r2, [pc, #76]	; (800094c <GMG12864_Draw_pixel+0xdc>)
 8000900:	54d1      	strb	r1, [r2, r3]
 8000902:	e01b      	b.n	800093c <GMG12864_Draw_pixel+0xcc>
		} else {
			Frame_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 8000904:	89fb      	ldrh	r3, [r7, #14]
 8000906:	4a11      	ldr	r2, [pc, #68]	; (800094c <GMG12864_Draw_pixel+0xdc>)
 8000908:	5cd3      	ldrb	r3, [r2, r3]
 800090a:	b25a      	sxtb	r2, r3
 800090c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000910:	4259      	negs	r1, r3
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	f001 0107 	and.w	r1, r1, #7
 800091a:	bf58      	it	pl
 800091c:	424b      	negpl	r3, r1
 800091e:	b21b      	sxth	r3, r3
 8000920:	4619      	mov	r1, r3
 8000922:	2301      	movs	r3, #1
 8000924:	408b      	lsls	r3, r1
 8000926:	b25b      	sxtb	r3, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	b25b      	sxtb	r3, r3
 800092c:	4013      	ands	r3, r2
 800092e:	b25a      	sxtb	r2, r3
 8000930:	89fb      	ldrh	r3, [r7, #14]
 8000932:	b2d1      	uxtb	r1, r2
 8000934:	4a05      	ldr	r2, [pc, #20]	; (800094c <GMG12864_Draw_pixel+0xdc>)
 8000936:	54d1      	strb	r1, [r2, r3]
 8000938:	e000      	b.n	800093c <GMG12864_Draw_pixel+0xcc>
		return;
 800093a:	bf00      	nop
		}
	}

}
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	20000000 	.word	0x20000000
 8000948:	20000001 	.word	0x20000001
 800094c:	20000110 	.word	0x20000110

08000950 <GMG12864_Update>:
/*------------------------Функция рисования пикселя-------------------------*/

/*---------------------Функция вывода буфера кадра на дисплей------------------------*/
void GMG12864_Update(void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
	NSS_ON;
 8000956:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <GMG12864_Update+0x78>)
 8000958:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800095c:	611a      	str	r2, [r3, #16]
	for (uint8_t y = 0; y < 8; y++) {
 800095e:	2300      	movs	r3, #0
 8000960:	71fb      	strb	r3, [r7, #7]
 8000962:	e027      	b.n	80009b4 <GMG12864_Update+0x64>
		ST7565_SetX(0);
 8000964:	2010      	movs	r0, #16
 8000966:	f7ff feed 	bl	8000744 <GMG12864_Send_command>
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff feea 	bl	8000744 <GMG12864_Send_command>
		ST7565_SetY((int16_t )y);
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	f003 0307 	and.w	r3, r3, #7
 8000978:	b25b      	sxtb	r3, r3
 800097a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800097e:	b25b      	sxtb	r3, r3
 8000980:	b2db      	uxtb	r3, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fede 	bl	8000744 <GMG12864_Send_command>
		for (uint8_t x = 0; x < 128; x++) {
 8000988:	2300      	movs	r3, #0
 800098a:	71bb      	strb	r3, [r7, #6]
 800098c:	e00b      	b.n	80009a6 <GMG12864_Update+0x56>
			GMG12864_Send_data(Frame_buffer[x + 128 * y]);
 800098e:	79ba      	ldrb	r2, [r7, #6]
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	01db      	lsls	r3, r3, #7
 8000994:	4413      	add	r3, r2
 8000996:	4a0d      	ldr	r2, [pc, #52]	; (80009cc <GMG12864_Update+0x7c>)
 8000998:	5cd3      	ldrb	r3, [r2, r3]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fef4 	bl	8000788 <GMG12864_Send_data>
		for (uint8_t x = 0; x < 128; x++) {
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	3301      	adds	r3, #1
 80009a4:	71bb      	strb	r3, [r7, #6]
 80009a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	daef      	bge.n	800098e <GMG12864_Update+0x3e>
	for (uint8_t y = 0; y < 8; y++) {
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	3301      	adds	r3, #1
 80009b2:	71fb      	strb	r3, [r7, #7]
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	2b07      	cmp	r3, #7
 80009b8:	d9d4      	bls.n	8000964 <GMG12864_Update+0x14>
		}
	}
	NSS_OFF;
 80009ba:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <GMG12864_Update+0x78>)
 80009bc:	2201      	movs	r2, #1
 80009be:	611a      	str	r2, [r3, #16]
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40010800 	.word	0x40010800
 80009cc:	20000110 	.word	0x20000110

080009d0 <GMG12864_Print_symbol_5x7>:
/*---------------------Функция вывода буфера кадра на дисплей------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void GMG12864_Print_symbol_5x7(uint8_t x, uint8_t y, uint16_t symbol, uint8_t inversion) {
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4604      	mov	r4, r0
 80009d8:	4608      	mov	r0, r1
 80009da:	4611      	mov	r1, r2
 80009dc:	461a      	mov	r2, r3
 80009de:	4623      	mov	r3, r4
 80009e0:	71fb      	strb	r3, [r7, #7]
 80009e2:	4603      	mov	r3, r0
 80009e4:	71bb      	strb	r3, [r7, #6]
 80009e6:	460b      	mov	r3, r1
 80009e8:	80bb      	strh	r3, [r7, #4]
 80009ea:	4613      	mov	r3, r2
 80009ec:	70fb      	strb	r3, [r7, #3]
/// Функция вывода символа на дисплей
	uint8_t x_start = x; //начальное положение по x
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	733b      	strb	r3, [r7, #12]
	uint8_t x_stop = x + 5; //конечное положение по x с учетом межсимвольного интервала
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	3305      	adds	r3, #5
 80009f6:	72fb      	strb	r3, [r7, #11]
	for (uint8_t x = x_start; x <= x_stop; x++) {
 80009f8:	7b3b      	ldrb	r3, [r7, #12]
 80009fa:	73fb      	strb	r3, [r7, #15]
 80009fc:	e086      	b.n	8000b0c <GMG12864_Print_symbol_5x7+0x13c>
		if (x == x_stop) { //Заполняем межсимвольные интервалы
 80009fe:	7bfa      	ldrb	r2, [r7, #15]
 8000a00:	7afb      	ldrb	r3, [r7, #11]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d127      	bne.n	8000a56 <GMG12864_Print_symbol_5x7+0x86>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000a06:	2300      	movs	r3, #0
 8000a08:	73bb      	strb	r3, [r7, #14]
 8000a0a:	e020      	b.n	8000a4e <GMG12864_Print_symbol_5x7+0x7e>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
					}
				} else {
					if (inversion) {
 8000a0c:	78fb      	ldrb	r3, [r7, #3]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d00d      	beq.n	8000a2e <GMG12864_Print_symbol_5x7+0x5e>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	b218      	sxth	r0, r3
 8000a16:	79bb      	ldrb	r3, [r7, #6]
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	4413      	add	r3, r2
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	b21b      	sxth	r3, r3
 8000a24:	2201      	movs	r2, #1
 8000a26:	4619      	mov	r1, r3
 8000a28:	f7ff ff22 	bl	8000870 <GMG12864_Draw_pixel>
 8000a2c:	e00c      	b.n	8000a48 <GMG12864_Print_symbol_5x7+0x78>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	b218      	sxth	r0, r3
 8000a32:	79bb      	ldrb	r3, [r7, #6]
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	7bbb      	ldrb	r3, [r7, #14]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	4413      	add	r3, r2
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	b21b      	sxth	r3, r3
 8000a40:	2200      	movs	r2, #0
 8000a42:	4619      	mov	r1, r3
 8000a44:	f7ff ff14 	bl	8000870 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000a48:	7bbb      	ldrb	r3, [r7, #14]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	73bb      	strb	r3, [r7, #14]
 8000a4e:	7bbb      	ldrb	r3, [r7, #14]
 8000a50:	2b06      	cmp	r3, #6
 8000a52:	d9db      	bls.n	8000a0c <GMG12864_Print_symbol_5x7+0x3c>
 8000a54:	e057      	b.n	8000b06 <GMG12864_Print_symbol_5x7+0x136>
					}
				}
			}
		} else { //Заполняем полезной информацией
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000a56:	2300      	movs	r3, #0
 8000a58:	737b      	strb	r3, [r7, #13]
 8000a5a:	e051      	b.n	8000b00 <GMG12864_Print_symbol_5x7+0x130>
				if (Font_5x7[(symbol * 5) + x - x_start] & (1 << i)) {
 8000a5c:	88ba      	ldrh	r2, [r7, #4]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	441a      	add	r2, r3
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	441a      	add	r2, r3
 8000a68:	7b3b      	ldrb	r3, [r7, #12]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	4a2c      	ldr	r2, [pc, #176]	; (8000b20 <GMG12864_Print_symbol_5x7+0x150>)
 8000a6e:	5cd3      	ldrb	r3, [r2, r3]
 8000a70:	461a      	mov	r2, r3
 8000a72:	7b7b      	ldrb	r3, [r7, #13]
 8000a74:	fa42 f303 	asr.w	r3, r2, r3
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d01e      	beq.n	8000abe <GMG12864_Print_symbol_5x7+0xee>
					if (inversion) {
 8000a80:	78fb      	ldrb	r3, [r7, #3]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00d      	beq.n	8000aa2 <GMG12864_Print_symbol_5x7+0xd2>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	b218      	sxth	r0, r3
 8000a8a:	79bb      	ldrb	r3, [r7, #6]
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	7b7b      	ldrb	r3, [r7, #13]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	4413      	add	r3, r2
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f7ff fee8 	bl	8000870 <GMG12864_Draw_pixel>
 8000aa0:	e02b      	b.n	8000afa <GMG12864_Print_symbol_5x7+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	b218      	sxth	r0, r3
 8000aa6:	79bb      	ldrb	r3, [r7, #6]
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	7b7b      	ldrb	r3, [r7, #13]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	4413      	add	r3, r2
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	b21b      	sxth	r3, r3
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f7ff feda 	bl	8000870 <GMG12864_Draw_pixel>
 8000abc:	e01d      	b.n	8000afa <GMG12864_Print_symbol_5x7+0x12a>
					}
				} else {
					if (inversion) {
 8000abe:	78fb      	ldrb	r3, [r7, #3]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00d      	beq.n	8000ae0 <GMG12864_Print_symbol_5x7+0x110>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	b218      	sxth	r0, r3
 8000ac8:	79bb      	ldrb	r3, [r7, #6]
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	7b7b      	ldrb	r3, [r7, #13]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	4413      	add	r3, r2
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f7ff fec9 	bl	8000870 <GMG12864_Draw_pixel>
 8000ade:	e00c      	b.n	8000afa <GMG12864_Print_symbol_5x7+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	b218      	sxth	r0, r3
 8000ae4:	79bb      	ldrb	r3, [r7, #6]
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	7b7b      	ldrb	r3, [r7, #13]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	4413      	add	r3, r2
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	2200      	movs	r2, #0
 8000af4:	4619      	mov	r1, r3
 8000af6:	f7ff febb 	bl	8000870 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000afa:	7b7b      	ldrb	r3, [r7, #13]
 8000afc:	3301      	adds	r3, #1
 8000afe:	737b      	strb	r3, [r7, #13]
 8000b00:	7b7b      	ldrb	r3, [r7, #13]
 8000b02:	2b06      	cmp	r3, #6
 8000b04:	d9aa      	bls.n	8000a5c <GMG12864_Print_symbol_5x7+0x8c>
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]
 8000b0c:	7bfa      	ldrb	r2, [r7, #15]
 8000b0e:	7afb      	ldrb	r3, [r7, #11]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	f67f af74 	bls.w	80009fe <GMG12864_Print_symbol_5x7+0x2e>
					}
				}
			}
		}
	}
}
 8000b16:	bf00      	nop
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd90      	pop	{r4, r7, pc}
 8000b20:	08004804 	.word	0x08004804

08000b24 <GMG12864_Print_symbol_3x5>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void GMG12864_Print_symbol_3x5(uint8_t x, uint8_t y, uint16_t symbol, uint8_t inversion) {
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	4608      	mov	r0, r1
 8000b2e:	4611      	mov	r1, r2
 8000b30:	461a      	mov	r2, r3
 8000b32:	4623      	mov	r3, r4
 8000b34:	71fb      	strb	r3, [r7, #7]
 8000b36:	4603      	mov	r3, r0
 8000b38:	71bb      	strb	r3, [r7, #6]
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	80bb      	strh	r3, [r7, #4]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	70fb      	strb	r3, [r7, #3]
/// Функция вывода символа на дисплей
	uint8_t x_start = x; //начальное положение по x
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	733b      	strb	r3, [r7, #12]
	uint8_t x_stop = x + 3; //конечное положение по x с учетом межсимвольного интервала
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	3303      	adds	r3, #3
 8000b4a:	72fb      	strb	r3, [r7, #11]
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000b4c:	7b3b      	ldrb	r3, [r7, #12]
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	e086      	b.n	8000c60 <GMG12864_Print_symbol_3x5+0x13c>
		if (x == x_stop) { //Заполняем межсимвольные интервалы
 8000b52:	7bfa      	ldrb	r2, [r7, #15]
 8000b54:	7afb      	ldrb	r3, [r7, #11]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d127      	bne.n	8000baa <GMG12864_Print_symbol_3x5+0x86>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	73bb      	strb	r3, [r7, #14]
 8000b5e:	e020      	b.n	8000ba2 <GMG12864_Print_symbol_3x5+0x7e>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
					}
				} else {
					if (inversion) {
 8000b60:	78fb      	ldrb	r3, [r7, #3]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d00d      	beq.n	8000b82 <GMG12864_Print_symbol_3x5+0x5e>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	b218      	sxth	r0, r3
 8000b6a:	79bb      	ldrb	r3, [r7, #6]
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	7bbb      	ldrb	r3, [r7, #14]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	4413      	add	r3, r2
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f7ff fe78 	bl	8000870 <GMG12864_Draw_pixel>
 8000b80:	e00c      	b.n	8000b9c <GMG12864_Print_symbol_3x5+0x78>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	b218      	sxth	r0, r3
 8000b86:	79bb      	ldrb	r3, [r7, #6]
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	7bbb      	ldrb	r3, [r7, #14]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	4413      	add	r3, r2
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	2200      	movs	r2, #0
 8000b96:	4619      	mov	r1, r3
 8000b98:	f7ff fe6a 	bl	8000870 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000b9c:	7bbb      	ldrb	r3, [r7, #14]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	73bb      	strb	r3, [r7, #14]
 8000ba2:	7bbb      	ldrb	r3, [r7, #14]
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	d9db      	bls.n	8000b60 <GMG12864_Print_symbol_3x5+0x3c>
 8000ba8:	e057      	b.n	8000c5a <GMG12864_Print_symbol_3x5+0x136>
					}
				}
			}
		} else { //Заполняем полезной информацией
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000baa:	2300      	movs	r3, #0
 8000bac:	737b      	strb	r3, [r7, #13]
 8000bae:	e051      	b.n	8000c54 <GMG12864_Print_symbol_3x5+0x130>
				if (Font_3x5[(symbol * 3) + x - x_start] & (1 << i)) {
 8000bb0:	88ba      	ldrh	r2, [r7, #4]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	441a      	add	r2, r3
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	441a      	add	r2, r3
 8000bbc:	7b3b      	ldrb	r3, [r7, #12]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	4a2c      	ldr	r2, [pc, #176]	; (8000c74 <GMG12864_Print_symbol_3x5+0x150>)
 8000bc2:	5cd3      	ldrb	r3, [r2, r3]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	7b7b      	ldrb	r3, [r7, #13]
 8000bc8:	fa42 f303 	asr.w	r3, r2, r3
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d01e      	beq.n	8000c12 <GMG12864_Print_symbol_3x5+0xee>
					if (inversion) {
 8000bd4:	78fb      	ldrb	r3, [r7, #3]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d00d      	beq.n	8000bf6 <GMG12864_Print_symbol_3x5+0xd2>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	b218      	sxth	r0, r3
 8000bde:	79bb      	ldrb	r3, [r7, #6]
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	7b7b      	ldrb	r3, [r7, #13]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	4413      	add	r3, r2
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	2200      	movs	r2, #0
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f7ff fe3e 	bl	8000870 <GMG12864_Draw_pixel>
 8000bf4:	e02b      	b.n	8000c4e <GMG12864_Print_symbol_3x5+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	b218      	sxth	r0, r3
 8000bfa:	79bb      	ldrb	r3, [r7, #6]
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	7b7b      	ldrb	r3, [r7, #13]
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	4413      	add	r3, r2
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	b21b      	sxth	r3, r3
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f7ff fe30 	bl	8000870 <GMG12864_Draw_pixel>
 8000c10:	e01d      	b.n	8000c4e <GMG12864_Print_symbol_3x5+0x12a>
					}
				} else {
					if (inversion) {
 8000c12:	78fb      	ldrb	r3, [r7, #3]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00d      	beq.n	8000c34 <GMG12864_Print_symbol_3x5+0x110>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	b218      	sxth	r0, r3
 8000c1c:	79bb      	ldrb	r3, [r7, #6]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	7b7b      	ldrb	r3, [r7, #13]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	4413      	add	r3, r2
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f7ff fe1f 	bl	8000870 <GMG12864_Draw_pixel>
 8000c32:	e00c      	b.n	8000c4e <GMG12864_Print_symbol_3x5+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	b218      	sxth	r0, r3
 8000c38:	79bb      	ldrb	r3, [r7, #6]
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	7b7b      	ldrb	r3, [r7, #13]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	4413      	add	r3, r2
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	2200      	movs	r2, #0
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f7ff fe11 	bl	8000870 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000c4e:	7b7b      	ldrb	r3, [r7, #13]
 8000c50:	3301      	adds	r3, #1
 8000c52:	737b      	strb	r3, [r7, #13]
 8000c54:	7b7b      	ldrb	r3, [r7, #13]
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d9aa      	bls.n	8000bb0 <GMG12864_Print_symbol_3x5+0x8c>
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	73fb      	strb	r3, [r7, #15]
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	7afb      	ldrb	r3, [r7, #11]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	f67f af74 	bls.w	8000b52 <GMG12864_Print_symbol_3x5+0x2e>
					}
				}
			}
		}
	}
}
 8000c6a:	bf00      	nop
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd90      	pop	{r4, r7, pc}
 8000c74:	0800461c 	.word	0x0800461c

08000c78 <GMG12864_Decode_UTF8>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*----------------Функция декодирования UTF-8 в набор символов-----------------*/
void GMG12864_Decode_UTF8(uint8_t x, uint8_t y, uint8_t font, bool inversion, char *tx_buffer) {
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b087      	sub	sp, #28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4608      	mov	r0, r1
 8000c82:	4611      	mov	r1, r2
 8000c84:	461a      	mov	r2, r3
 8000c86:	4623      	mov	r3, r4
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71bb      	strb	r3, [r7, #6]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	717b      	strb	r3, [r7, #5]
 8000c92:	4613      	mov	r3, r2
 8000c94:	713b      	strb	r3, [r7, #4]
/// Функция декодирования UTF-8 в набор символов и последующее занесение в буфер кадра
/// \param x - координата по х. От 0 до 127
/// \param y - координата по y. от 0 до 7
/// \param font - шрифт. 0 - 3x5, 1 - 5x7
	uint16_t symbol = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	81fb      	strh	r3, [r7, #14]
	bool flag_block = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	e17e      	b.n	8000fa2 <GMG12864_Decode_UTF8+0x32a>
		if (tx_buffer[i] < 0xC0) { //Английский текст и символы. Если до русского текста, то [i] <0xD0. Но в font добавлен знак "°"
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ca8:	4413      	add	r3, r2
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2bbf      	cmp	r3, #191	; 0xbf
 8000cae:	d841      	bhi.n	8000d34 <GMG12864_Decode_UTF8+0xbc>
			if (flag_block) {
 8000cb0:	7dfb      	ldrb	r3, [r7, #23]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <GMG12864_Decode_UTF8+0x44>
				flag_block = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	75fb      	strb	r3, [r7, #23]
 8000cba:	e16f      	b.n	8000f9c <GMG12864_Decode_UTF8+0x324>
			} else {
				symbol = tx_buffer[i];
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cc0:	4413      	add	r3, r2
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	81fb      	strh	r3, [r7, #14]
				if (font == FONT_3X5) { //Если выбран шрифт размера 3x5
 8000cc6:	797b      	ldrb	r3, [r7, #5]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d117      	bne.n	8000cfc <GMG12864_Decode_UTF8+0x84>
					if (inversion) {
 8000ccc:	793b      	ldrb	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d008      	beq.n	8000ce4 <GMG12864_Decode_UTF8+0x6c>
						GMG12864_Print_symbol_3x5(x, y, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 8000cd2:	89fb      	ldrh	r3, [r7, #14]
 8000cd4:	3b20      	subs	r3, #32
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	79b9      	ldrb	r1, [r7, #6]
 8000cda:	79f8      	ldrb	r0, [r7, #7]
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f7ff ff21 	bl	8000b24 <GMG12864_Print_symbol_3x5>
 8000ce2:	e007      	b.n	8000cf4 <GMG12864_Decode_UTF8+0x7c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 8000ce4:	89fb      	ldrh	r3, [r7, #14]
 8000ce6:	3b20      	subs	r3, #32
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	79b9      	ldrb	r1, [r7, #6]
 8000cec:	79f8      	ldrb	r0, [r7, #7]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f7ff ff18 	bl	8000b24 <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	e14f      	b.n	8000f9c <GMG12864_Decode_UTF8+0x324>
				} else if (font == FONT_5X7) { //Если выбран шрифт размера 5x7
 8000cfc:	797b      	ldrb	r3, [r7, #5]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	f040 814c 	bne.w	8000f9c <GMG12864_Decode_UTF8+0x324>
					if (inversion) {
 8000d04:	793b      	ldrb	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d008      	beq.n	8000d1c <GMG12864_Decode_UTF8+0xa4>
						GMG12864_Print_symbol_5x7(x, y, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 8000d0a:	89fb      	ldrh	r3, [r7, #14]
 8000d0c:	3b20      	subs	r3, #32
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	79b9      	ldrb	r1, [r7, #6]
 8000d12:	79f8      	ldrb	r0, [r7, #7]
 8000d14:	2301      	movs	r3, #1
 8000d16:	f7ff fe5b 	bl	80009d0 <GMG12864_Print_symbol_5x7>
 8000d1a:	e007      	b.n	8000d2c <GMG12864_Decode_UTF8+0xb4>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 8000d1c:	89fb      	ldrh	r3, [r7, #14]
 8000d1e:	3b20      	subs	r3, #32
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	79b9      	ldrb	r1, [r7, #6]
 8000d24:	79f8      	ldrb	r0, [r7, #7]
 8000d26:	2300      	movs	r3, #0
 8000d28:	f7ff fe52 	bl	80009d0 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	3306      	adds	r3, #6
 8000d30:	71fb      	strb	r3, [r7, #7]
 8000d32:	e133      	b.n	8000f9c <GMG12864_Decode_UTF8+0x324>
				}
			}
		}

		else { //Русский текст
			symbol = tx_buffer[i] << 8 | tx_buffer[i + 1];
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d38:	4413      	add	r3, r2
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	3301      	adds	r3, #1
 8000d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d46:	440b      	add	r3, r1
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	b21b      	sxth	r3, r3
 8000d50:	81fb      	strh	r3, [r7, #14]
			if (symbol < 0xD180 && symbol > 0xD081) {
 8000d52:	89fb      	ldrh	r3, [r7, #14]
 8000d54:	f24d 127f 	movw	r2, #53631	; 0xd17f
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d843      	bhi.n	8000de4 <GMG12864_Decode_UTF8+0x16c>
 8000d5c:	89fb      	ldrh	r3, [r7, #14]
 8000d5e:	f24d 0281 	movw	r2, #53377	; 0xd081
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d93e      	bls.n	8000de4 <GMG12864_Decode_UTF8+0x16c>
				if (font == FONT_3X5) { //Если выбран шрифт размера 3x5
 8000d66:	797b      	ldrb	r3, [r7, #5]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d11b      	bne.n	8000da4 <GMG12864_Decode_UTF8+0x12c>
					if (inversion) {
 8000d6c:	793b      	ldrb	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d00a      	beq.n	8000d88 <GMG12864_Decode_UTF8+0x110>
						GMG12864_Print_symbol_3x5(x, y, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 8000d72:	89fb      	ldrh	r3, [r7, #14]
 8000d74:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8000d78:	330f      	adds	r3, #15
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	79b9      	ldrb	r1, [r7, #6]
 8000d7e:	79f8      	ldrb	r0, [r7, #7]
 8000d80:	2301      	movs	r3, #1
 8000d82:	f7ff fecf 	bl	8000b24 <GMG12864_Print_symbol_3x5>
 8000d86:	e009      	b.n	8000d9c <GMG12864_Decode_UTF8+0x124>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 8000d88:	89fb      	ldrh	r3, [r7, #14]
 8000d8a:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8000d8e:	330f      	adds	r3, #15
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	79b9      	ldrb	r1, [r7, #6]
 8000d94:	79f8      	ldrb	r0, [r7, #7]
 8000d96:	2300      	movs	r3, #0
 8000d98:	f7ff fec4 	bl	8000b24 <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	3304      	adds	r3, #4
 8000da0:	71fb      	strb	r3, [r7, #7]
				if (font == FONT_3X5) { //Если выбран шрифт размера 3x5
 8000da2:	e0f8      	b.n	8000f96 <GMG12864_Decode_UTF8+0x31e>
				} else if (font == FONT_5X7) { //Если выбран шрифт размера 5x7
 8000da4:	797b      	ldrb	r3, [r7, #5]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	f040 80f5 	bne.w	8000f96 <GMG12864_Decode_UTF8+0x31e>
					if (inversion) {
 8000dac:	793b      	ldrb	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d00a      	beq.n	8000dc8 <GMG12864_Decode_UTF8+0x150>
						GMG12864_Print_symbol_5x7(x, y, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 8000db2:	89fb      	ldrh	r3, [r7, #14]
 8000db4:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8000db8:	330f      	adds	r3, #15
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	79b9      	ldrb	r1, [r7, #6]
 8000dbe:	79f8      	ldrb	r0, [r7, #7]
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	f7ff fe05 	bl	80009d0 <GMG12864_Print_symbol_5x7>
 8000dc6:	e009      	b.n	8000ddc <GMG12864_Decode_UTF8+0x164>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 8000dc8:	89fb      	ldrh	r3, [r7, #14]
 8000dca:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8000dce:	330f      	adds	r3, #15
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	79b9      	ldrb	r1, [r7, #6]
 8000dd4:	79f8      	ldrb	r0, [r7, #7]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f7ff fdfa 	bl	80009d0 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	3306      	adds	r3, #6
 8000de0:	71fb      	strb	r3, [r7, #7]
				if (font == FONT_3X5) { //Если выбран шрифт размера 3x5
 8000de2:	e0d8      	b.n	8000f96 <GMG12864_Decode_UTF8+0x31e>
				}
			} else if (symbol == 0xD081) {
 8000de4:	89fb      	ldrh	r3, [r7, #14]
 8000de6:	f24d 0281 	movw	r2, #53377	; 0xd081
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d12e      	bne.n	8000e4c <GMG12864_Decode_UTF8+0x1d4>
				if (font == FONT_3X5) { //Если выбран шрифт размера 3x5
 8000dee:	797b      	ldrb	r3, [r7, #5]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d113      	bne.n	8000e1c <GMG12864_Decode_UTF8+0x1a4>
					if (inversion) {
 8000df4:	793b      	ldrb	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d006      	beq.n	8000e08 <GMG12864_Decode_UTF8+0x190>
						GMG12864_Print_symbol_3x5(x, y, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 8000dfa:	79b9      	ldrb	r1, [r7, #6]
 8000dfc:	79f8      	ldrb	r0, [r7, #7]
 8000dfe:	2301      	movs	r3, #1
 8000e00:	229f      	movs	r2, #159	; 0x9f
 8000e02:	f7ff fe8f 	bl	8000b24 <GMG12864_Print_symbol_3x5>
 8000e06:	e005      	b.n	8000e14 <GMG12864_Decode_UTF8+0x19c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 8000e08:	79b9      	ldrb	r1, [r7, #6]
 8000e0a:	79f8      	ldrb	r0, [r7, #7]
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	229f      	movs	r2, #159	; 0x9f
 8000e10:	f7ff fe88 	bl	8000b24 <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	3304      	adds	r3, #4
 8000e18:	71fb      	strb	r3, [r7, #7]
 8000e1a:	e0bd      	b.n	8000f98 <GMG12864_Decode_UTF8+0x320>
				} else if (font == FONT_5X7) { //Если выбран шрифт размера 5x7
 8000e1c:	797b      	ldrb	r3, [r7, #5]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	f040 80ba 	bne.w	8000f98 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 8000e24:	793b      	ldrb	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d006      	beq.n	8000e38 <GMG12864_Decode_UTF8+0x1c0>
						GMG12864_Print_symbol_5x7(x, y, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 8000e2a:	79b9      	ldrb	r1, [r7, #6]
 8000e2c:	79f8      	ldrb	r0, [r7, #7]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	229f      	movs	r2, #159	; 0x9f
 8000e32:	f7ff fdcd 	bl	80009d0 <GMG12864_Print_symbol_5x7>
 8000e36:	e005      	b.n	8000e44 <GMG12864_Decode_UTF8+0x1cc>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 8000e38:	79b9      	ldrb	r1, [r7, #6]
 8000e3a:	79f8      	ldrb	r0, [r7, #7]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	229f      	movs	r2, #159	; 0x9f
 8000e40:	f7ff fdc6 	bl	80009d0 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	3306      	adds	r3, #6
 8000e48:	71fb      	strb	r3, [r7, #7]
 8000e4a:	e0a5      	b.n	8000f98 <GMG12864_Decode_UTF8+0x320>
				}
			} else if (symbol == 0xD191) {
 8000e4c:	89fb      	ldrh	r3, [r7, #14]
 8000e4e:	f24d 1291 	movw	r2, #53649	; 0xd191
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d12e      	bne.n	8000eb4 <GMG12864_Decode_UTF8+0x23c>
				if (font == FONT_3X5) { //Если выбран шрифт размера 3x5
 8000e56:	797b      	ldrb	r3, [r7, #5]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d113      	bne.n	8000e84 <GMG12864_Decode_UTF8+0x20c>
					if (inversion) {
 8000e5c:	793b      	ldrb	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d006      	beq.n	8000e70 <GMG12864_Decode_UTF8+0x1f8>
						GMG12864_Print_symbol_3x5(x, y, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 8000e62:	79b9      	ldrb	r1, [r7, #6]
 8000e64:	79f8      	ldrb	r0, [r7, #7]
 8000e66:	2301      	movs	r3, #1
 8000e68:	22a0      	movs	r2, #160	; 0xa0
 8000e6a:	f7ff fe5b 	bl	8000b24 <GMG12864_Print_symbol_3x5>
 8000e6e:	e005      	b.n	8000e7c <GMG12864_Decode_UTF8+0x204>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8000e70:	79b9      	ldrb	r1, [r7, #6]
 8000e72:	79f8      	ldrb	r0, [r7, #7]
 8000e74:	2300      	movs	r3, #0
 8000e76:	22a0      	movs	r2, #160	; 0xa0
 8000e78:	f7ff fe54 	bl	8000b24 <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	3304      	adds	r3, #4
 8000e80:	71fb      	strb	r3, [r7, #7]
 8000e82:	e089      	b.n	8000f98 <GMG12864_Decode_UTF8+0x320>
				} else if (font == FONT_5X7) { //Если выбран шрифт размера 5x7
 8000e84:	797b      	ldrb	r3, [r7, #5]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	f040 8086 	bne.w	8000f98 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 8000e8c:	793b      	ldrb	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <GMG12864_Decode_UTF8+0x228>
						GMG12864_Print_symbol_5x7(x, y, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 8000e92:	79b9      	ldrb	r1, [r7, #6]
 8000e94:	79f8      	ldrb	r0, [r7, #7]
 8000e96:	2301      	movs	r3, #1
 8000e98:	22a0      	movs	r2, #160	; 0xa0
 8000e9a:	f7ff fd99 	bl	80009d0 <GMG12864_Print_symbol_5x7>
 8000e9e:	e005      	b.n	8000eac <GMG12864_Decode_UTF8+0x234>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8000ea0:	79b9      	ldrb	r1, [r7, #6]
 8000ea2:	79f8      	ldrb	r0, [r7, #7]
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	22a0      	movs	r2, #160	; 0xa0
 8000ea8:	f7ff fd92 	bl	80009d0 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	3306      	adds	r3, #6
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	e071      	b.n	8000f98 <GMG12864_Decode_UTF8+0x320>
				}
			} else if (symbol == 0xC2B0) {
 8000eb4:	89fb      	ldrh	r3, [r7, #14]
 8000eb6:	f24c 22b0 	movw	r2, #49840	; 0xc2b0
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d12d      	bne.n	8000f1a <GMG12864_Decode_UTF8+0x2a2>
				if (font == FONT_3X5) { //Если выбран шрифт размера 3x5
 8000ebe:	797b      	ldrb	r3, [r7, #5]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d113      	bne.n	8000eec <GMG12864_Decode_UTF8+0x274>
					if (inversion) {
 8000ec4:	793b      	ldrb	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d006      	beq.n	8000ed8 <GMG12864_Decode_UTF8+0x260>
						GMG12864_Print_symbol_3x5(x, y, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 8000eca:	79b9      	ldrb	r1, [r7, #6]
 8000ecc:	79f8      	ldrb	r0, [r7, #7]
 8000ece:	2301      	movs	r3, #1
 8000ed0:	22a1      	movs	r2, #161	; 0xa1
 8000ed2:	f7ff fe27 	bl	8000b24 <GMG12864_Print_symbol_3x5>
 8000ed6:	e005      	b.n	8000ee4 <GMG12864_Decode_UTF8+0x26c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 8000ed8:	79b9      	ldrb	r1, [r7, #6]
 8000eda:	79f8      	ldrb	r0, [r7, #7]
 8000edc:	2300      	movs	r3, #0
 8000ede:	22a1      	movs	r2, #161	; 0xa1
 8000ee0:	f7ff fe20 	bl	8000b24 <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	71fb      	strb	r3, [r7, #7]
 8000eea:	e055      	b.n	8000f98 <GMG12864_Decode_UTF8+0x320>
				} else if (font == FONT_5X7) { //Если выбран шрифт размера 5x7
 8000eec:	797b      	ldrb	r3, [r7, #5]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d152      	bne.n	8000f98 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 8000ef2:	793b      	ldrb	r3, [r7, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <GMG12864_Decode_UTF8+0x28e>
						GMG12864_Print_symbol_5x7(x, y, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 8000ef8:	79b9      	ldrb	r1, [r7, #6]
 8000efa:	79f8      	ldrb	r0, [r7, #7]
 8000efc:	2301      	movs	r3, #1
 8000efe:	22a1      	movs	r2, #161	; 0xa1
 8000f00:	f7ff fd66 	bl	80009d0 <GMG12864_Print_symbol_5x7>
 8000f04:	e005      	b.n	8000f12 <GMG12864_Decode_UTF8+0x29a>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 8000f06:	79b9      	ldrb	r1, [r7, #6]
 8000f08:	79f8      	ldrb	r0, [r7, #7]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	22a1      	movs	r2, #161	; 0xa1
 8000f0e:	f7ff fd5f 	bl	80009d0 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	3306      	adds	r3, #6
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	e03e      	b.n	8000f98 <GMG12864_Decode_UTF8+0x320>
				}
			}

			else {
				if (font == FONT_3X5) { //Если выбран шрифт размера 3x5
 8000f1a:	797b      	ldrb	r3, [r7, #5]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d11b      	bne.n	8000f58 <GMG12864_Decode_UTF8+0x2e0>
					if (inversion) {
 8000f20:	793b      	ldrb	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00a      	beq.n	8000f3c <GMG12864_Decode_UTF8+0x2c4>
						GMG12864_Print_symbol_3x5(x, y, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8000f2c:	330f      	adds	r3, #15
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	79b9      	ldrb	r1, [r7, #6]
 8000f32:	79f8      	ldrb	r0, [r7, #7]
 8000f34:	2301      	movs	r3, #1
 8000f36:	f7ff fdf5 	bl	8000b24 <GMG12864_Print_symbol_3x5>
 8000f3a:	e009      	b.n	8000f50 <GMG12864_Decode_UTF8+0x2d8>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 8000f3c:	89fb      	ldrh	r3, [r7, #14]
 8000f3e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8000f42:	330f      	adds	r3, #15
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	79b9      	ldrb	r1, [r7, #6]
 8000f48:	79f8      	ldrb	r0, [r7, #7]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f7ff fdea 	bl	8000b24 <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	3304      	adds	r3, #4
 8000f54:	71fb      	strb	r3, [r7, #7]
 8000f56:	e01f      	b.n	8000f98 <GMG12864_Decode_UTF8+0x320>
				} else if (font == FONT_5X7) { //Если выбран шрифт размера 5x7
 8000f58:	797b      	ldrb	r3, [r7, #5]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d11c      	bne.n	8000f98 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 8000f5e:	793b      	ldrb	r3, [r7, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00a      	beq.n	8000f7a <GMG12864_Decode_UTF8+0x302>
						GMG12864_Print_symbol_5x7(x, y, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 8000f64:	89fb      	ldrh	r3, [r7, #14]
 8000f66:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8000f6a:	330f      	adds	r3, #15
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	79b9      	ldrb	r1, [r7, #6]
 8000f70:	79f8      	ldrb	r0, [r7, #7]
 8000f72:	2301      	movs	r3, #1
 8000f74:	f7ff fd2c 	bl	80009d0 <GMG12864_Print_symbol_5x7>
 8000f78:	e009      	b.n	8000f8e <GMG12864_Decode_UTF8+0x316>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 8000f7a:	89fb      	ldrh	r3, [r7, #14]
 8000f7c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8000f80:	330f      	adds	r3, #15
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	79b9      	ldrb	r1, [r7, #6]
 8000f86:	79f8      	ldrb	r0, [r7, #7]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f7ff fd21 	bl	80009d0 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	3306      	adds	r3, #6
 8000f92:	71fb      	strb	r3, [r7, #7]
 8000f94:	e000      	b.n	8000f98 <GMG12864_Decode_UTF8+0x320>
				if (font == FONT_3X5) { //Если выбран шрифт размера 3x5
 8000f96:	bf00      	nop
				}
			}
			flag_block = 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fa4:	f7ff f8d2 	bl	800014c <strlen>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	f63f ae79 	bhi.w	8000ca4 <GMG12864_Decode_UTF8+0x2c>
		}
	}
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd90      	pop	{r4, r7, pc}

08000fbc <GMG12864_Value_for_Plot>:
	}
}
/*---------------------Функция инверсии любого места в буфере------------------*/

/*----------------Функция, формирующая точку значения на графике---------------*/
uint8_t GMG12864_Value_for_Plot(int y_min, int y_max, float value) {
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b08f      	sub	sp, #60	; 0x3c
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
/// Функция, формирующая точку значения на графике
/// \param int y_min - минимальное значение по оси y
/// \param int y_max - максимальное значение по оси y
/// \param float value - значение, которое будем отображать на графике
	char text[20] = { 0, };
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
	uint8_t Graph_value = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (y_max > y_min && value >= y_min && value <= y_max) {
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	dd3d      	ble.n	8001064 <GMG12864_Value_for_Plot+0xa8>
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f7ff f971 	bl	80002d0 <__aeabi_i2f>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff fb72 	bl	80006dc <__aeabi_fcmpge>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d032      	beq.n	8001064 <GMG12864_Value_for_Plot+0xa8>
 8000ffe:	68b8      	ldr	r0, [r7, #8]
 8001000:	f7ff f966 	bl	80002d0 <__aeabi_i2f>
 8001004:	4603      	mov	r3, r0
 8001006:	4619      	mov	r1, r3
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff fb5d 	bl	80006c8 <__aeabi_fcmple>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d027      	beq.n	8001064 <GMG12864_Value_for_Plot+0xa8>
		float y = 50.0f - (y_max + value * (-1)) * (50.0f / (y_max + y_min * (-1)));
 8001014:	68b8      	ldr	r0, [r7, #8]
 8001016:	f7ff f95b 	bl	80002d0 <__aeabi_i2f>
 800101a:	4603      	mov	r3, r0
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff f8a0 	bl	8000164 <__aeabi_fsub>
 8001024:	4603      	mov	r3, r0
 8001026:	461c      	mov	r4, r3
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff f94e 	bl	80002d0 <__aeabi_i2f>
 8001034:	4603      	mov	r3, r0
 8001036:	4619      	mov	r1, r3
 8001038:	482d      	ldr	r0, [pc, #180]	; (80010f0 <GMG12864_Value_for_Plot+0x134>)
 800103a:	f7ff fa51 	bl	80004e0 <__aeabi_fdiv>
 800103e:	4603      	mov	r3, r0
 8001040:	4619      	mov	r1, r3
 8001042:	4620      	mov	r0, r4
 8001044:	f7ff f998 	bl	8000378 <__aeabi_fmul>
 8001048:	4603      	mov	r3, r0
 800104a:	4619      	mov	r1, r3
 800104c:	4828      	ldr	r0, [pc, #160]	; (80010f0 <GMG12864_Value_for_Plot+0x134>)
 800104e:	f7ff f889 	bl	8000164 <__aeabi_fsub>
 8001052:	4603      	mov	r3, r0
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
		Graph_value = (uint8_t) y;
 8001056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001058:	f7ff fb54 	bl	8000704 <__aeabi_f2uiz>
 800105c:	4603      	mov	r3, r0
 800105e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (y_max > y_min && value >= y_min && value <= y_max) {
 8001062:	e03e      	b.n	80010e2 <GMG12864_Value_for_Plot+0x126>
	} else if (value > y_max) {
 8001064:	68b8      	ldr	r0, [r7, #8]
 8001066:	f7ff f933 	bl	80002d0 <__aeabi_i2f>
 800106a:	4603      	mov	r3, r0
 800106c:	4619      	mov	r1, r3
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff fb3e 	bl	80006f0 <__aeabi_fcmpgt>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d014      	beq.n	80010a4 <GMG12864_Value_for_Plot+0xe8>
		Graph_value = 50;
 800107a:	2332      	movs	r3, #50	; 0x32
 800107c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		sprintf(text, "   Clipping    ");
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	491b      	ldr	r1, [pc, #108]	; (80010f4 <GMG12864_Value_for_Plot+0x138>)
 8001086:	4618      	mov	r0, r3
 8001088:	f002 fe36 	bl	8003cf8 <siprintf>
		GMG12864_Decode_UTF8(37, 26, 1, 0, text);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2300      	movs	r3, #0
 8001094:	2201      	movs	r2, #1
 8001096:	211a      	movs	r1, #26
 8001098:	2025      	movs	r0, #37	; 0x25
 800109a:	f7ff fded 	bl	8000c78 <GMG12864_Decode_UTF8>
		GMG12864_Update();
 800109e:	f7ff fc57 	bl	8000950 <GMG12864_Update>
 80010a2:	e01e      	b.n	80010e2 <GMG12864_Value_for_Plot+0x126>
	} else if (value < y_min) {
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f7ff f913 	bl	80002d0 <__aeabi_i2f>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4619      	mov	r1, r3
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fb00 	bl	80006b4 <__aeabi_fcmplt>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d013      	beq.n	80010e2 <GMG12864_Value_for_Plot+0x126>
		Graph_value = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		sprintf(text, "   Clipping    ");
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	490b      	ldr	r1, [pc, #44]	; (80010f4 <GMG12864_Value_for_Plot+0x138>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 fe16 	bl	8003cf8 <siprintf>
		GMG12864_Decode_UTF8(37, 26, 1, 0, text);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2300      	movs	r3, #0
 80010d4:	2201      	movs	r2, #1
 80010d6:	211a      	movs	r1, #26
 80010d8:	2025      	movs	r0, #37	; 0x25
 80010da:	f7ff fdcd 	bl	8000c78 <GMG12864_Decode_UTF8>
		GMG12864_Update();
 80010de:	f7ff fc37 	bl	8000950 <GMG12864_Update>
	}
	return Graph_value;
 80010e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3734      	adds	r7, #52	; 0x34
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd90      	pop	{r4, r7, pc}
 80010ee:	bf00      	nop
 80010f0:	42480000 	.word	0x42480000
 80010f4:	080045c0 	.word	0x080045c0

080010f8 <GMG12864_Fill_the_array_Plot>:
/*----------------Функция, формирующая точку значения на графике---------------*/

/*-------------------Работа с массивом данных---------------------*/

void GMG12864_Fill_the_array_Plot(uint8_t *counter, uint8_t *array, uint8_t size_array, uint8_t value) {
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	4611      	mov	r1, r2
 8001104:	461a      	mov	r2, r3
 8001106:	460b      	mov	r3, r1
 8001108:	71fb      	strb	r3, [r7, #7]
 800110a:	4613      	mov	r3, r2
 800110c:	71bb      	strb	r3, [r7, #6]
/// Функция, заполняющая массив значениями, чтоб отрисовывать график
/// \param uint8_t *counter - счетчик значений
/// \param uint8_t *array - массив, куда будем закидывать значения для отображения графика
/// \param uint8_t size_array - размер массива, куда будем закидывать значения для отображения графика
/// \param uint8_t value - подготовленное значение для графика(подготавливается при помощи ф-ии uint8_t GMG12864_Value_for_Plot(int y_min, int y_max, float value))
	if (*counter == 0) {
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d102      	bne.n	800111c <GMG12864_Fill_the_array_Plot+0x24>
		array[0] = value;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	79ba      	ldrb	r2, [r7, #6]
 800111a:	701a      	strb	r2, [r3, #0]
	}

	if (*counter) {
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d04d      	beq.n	80011c0 <GMG12864_Fill_the_array_Plot+0xc8>
		if (*counter <= size_array - 1) {
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	79fa      	ldrb	r2, [r7, #7]
 800112a:	429a      	cmp	r2, r3
 800112c:	d928      	bls.n	8001180 <GMG12864_Fill_the_array_Plot+0x88>
			for (int i = 0; i <= *counter; i++) {
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	e01e      	b.n	8001172 <GMG12864_Fill_the_array_Plot+0x7a>
				if (i == *counter) {
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	4293      	cmp	r3, r2
 800113e:	d103      	bne.n	8001148 <GMG12864_Fill_the_array_Plot+0x50>
					array[0] = value;
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	79ba      	ldrb	r2, [r7, #6]
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	e011      	b.n	800116c <GMG12864_Fill_the_array_Plot+0x74>
				} else {
					array[*counter - i] = array[*counter - i - 1];
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	3b01      	subs	r3, #1
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	441a      	add	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	1acb      	subs	r3, r1, r3
 8001162:	4619      	mov	r1, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	440b      	add	r3, r1
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i <= *counter; i++) {
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	3301      	adds	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	4293      	cmp	r3, r2
 800117c:	ddda      	ble.n	8001134 <GMG12864_Fill_the_array_Plot+0x3c>
 800117e:	e01f      	b.n	80011c0 <GMG12864_Fill_the_array_Plot+0xc8>
				}
			}
		} else if (*counter > size_array - 1) {
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	79fa      	ldrb	r2, [r7, #7]
 8001186:	429a      	cmp	r2, r3
 8001188:	d81a      	bhi.n	80011c0 <GMG12864_Fill_the_array_Plot+0xc8>
			for (int i = size_array - 1; i >= 0; i--) {
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	3b01      	subs	r3, #1
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	e013      	b.n	80011ba <GMG12864_Fill_the_array_Plot+0xc2>
				array[i] = array[i - 1];
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	3b01      	subs	r3, #1
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	441a      	add	r2, r3
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	440b      	add	r3, r1
 80011a0:	7812      	ldrb	r2, [r2, #0]
 80011a2:	701a      	strb	r2, [r3, #0]
				if (i == 0) {
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d104      	bne.n	80011b4 <GMG12864_Fill_the_array_Plot+0xbc>
					array[i] = value;
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	4413      	add	r3, r2
 80011b0:	79ba      	ldrb	r2, [r7, #6]
 80011b2:	701a      	strb	r2, [r3, #0]
			for (int i = size_array - 1; i >= 0; i--) {
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	dae8      	bge.n	8001192 <GMG12864_Fill_the_array_Plot+0x9a>
				}
			}
		}

	}
	(*counter)++;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	701a      	strb	r2, [r3, #0]
	if (*counter == 250) {
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2bfa      	cmp	r3, #250	; 0xfa
 80011d2:	d102      	bne.n	80011da <GMG12864_Fill_the_array_Plot+0xe2>
		*counter = 128; //Защита от переполнения, иначе график будет сбрасываться(главное чтоб разница была равна или больше кол-ву выводимых точек)
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2280      	movs	r2, #128	; 0x80
 80011d8:	701a      	strb	r2, [r3, #0]
	}

}
 80011da:	bf00      	nop
 80011dc:	371c      	adds	r7, #28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <GMG12864_Generate_a_Graph>:
/*-------------------Работа с массивом данных---------------------*/

/*----------------------Функция, формирующая весь график, который будет отображаться на дисплее-----------------------------*/
void GMG12864_Generate_a_Graph(uint8_t *counter, uint8_t *array, uint8_t size_array, int y_min, int y_max, uint8_t x_grid_time, uint8_t time_interval,
bool grid) {
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b093      	sub	sp, #76	; 0x4c
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	4613      	mov	r3, r2
 80011f2:	71fb      	strb	r3, [r7, #7]
/// \param int y_max - максимальное значение по оси y
/// \param uint8_t x_grid_time - размер клетки по x(Например, график обновляется раз в 100 мс, значит одна клетка по X будет 1 сек.)
/// \param uint8_t time_interval - интервал времени. 0 - сек., 1 - мин., 2 = час.
/// \param bool grid - Сетка граффика. вкл = 1. выкл = 0.

	int y_minimum = y_min;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	int y_maximum = y_max;
 80011f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (y_min < 0) {
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	da02      	bge.n	8001208 <GMG12864_Generate_a_Graph+0x24>
		y_minimum = y_minimum * (-1);
 8001202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001204:	425b      	negs	r3, r3
 8001206:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	if (y_max < 0) {
 8001208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800120a:	2b00      	cmp	r3, #0
 800120c:	da02      	bge.n	8001214 <GMG12864_Generate_a_Graph+0x30>
		y_maximum = y_maximum * (-1);
 800120e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001210:	425b      	negs	r3, r3
 8001212:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	int val_del = (y_minimum + y_maximum) / 5;
 8001214:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001218:	4413      	add	r3, r2
 800121a:	4ac4      	ldr	r2, [pc, #784]	; (800152c <GMG12864_Generate_a_Graph+0x348>)
 800121c:	fb82 1203 	smull	r1, r2, r2, r3
 8001220:	1052      	asrs	r2, r2, #1
 8001222:	17db      	asrs	r3, r3, #31
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
	//printf("%d\r\n", val_del);
	char text[20] = { 0, };
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
	GMG12864_Clean_Frame_buffer();
 800123a:	f7ff fabf 	bl	80007bc <GMG12864_Clean_Frame_buffer>
	sprintf(text, "%4.1d", y_min);
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	49ba      	ldr	r1, [pc, #744]	; (8001530 <GMG12864_Generate_a_Graph+0x34c>)
 8001246:	4618      	mov	r0, r3
 8001248:	f002 fd56 	bl	8003cf8 <siprintf>
	GMG12864_Decode_UTF8(8, 48, 0, 0, text);
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2300      	movs	r3, #0
 8001254:	2200      	movs	r2, #0
 8001256:	2130      	movs	r1, #48	; 0x30
 8001258:	2008      	movs	r0, #8
 800125a:	f7ff fd0d 	bl	8000c78 <GMG12864_Decode_UTF8>
	sprintf(text, "%4.1d", (y_min + val_del));
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001262:	441a      	add	r2, r3
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	49b1      	ldr	r1, [pc, #708]	; (8001530 <GMG12864_Generate_a_Graph+0x34c>)
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fd44 	bl	8003cf8 <siprintf>
	GMG12864_Decode_UTF8(8, 38, 0, 0, text);
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2300      	movs	r3, #0
 8001278:	2200      	movs	r2, #0
 800127a:	2126      	movs	r1, #38	; 0x26
 800127c:	2008      	movs	r0, #8
 800127e:	f7ff fcfb 	bl	8000c78 <GMG12864_Decode_UTF8>
	sprintf(text, "%4.1d", (y_min + val_del * 2));
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	005a      	lsls	r2, r3, #1
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	441a      	add	r2, r3
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	49a8      	ldr	r1, [pc, #672]	; (8001530 <GMG12864_Generate_a_Graph+0x34c>)
 8001290:	4618      	mov	r0, r3
 8001292:	f002 fd31 	bl	8003cf8 <siprintf>
	GMG12864_Decode_UTF8(8, 28, 0, 0, text);
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2300      	movs	r3, #0
 800129e:	2200      	movs	r2, #0
 80012a0:	211c      	movs	r1, #28
 80012a2:	2008      	movs	r0, #8
 80012a4:	f7ff fce8 	bl	8000c78 <GMG12864_Decode_UTF8>
	sprintf(text, "%4.1d", (y_min + val_del * 3));
 80012a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012aa:	4613      	mov	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	441a      	add	r2, r3
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	441a      	add	r2, r3
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	499d      	ldr	r1, [pc, #628]	; (8001530 <GMG12864_Generate_a_Graph+0x34c>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f002 fd1c 	bl	8003cf8 <siprintf>
	GMG12864_Decode_UTF8(8, 18, 0, 0, text);
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2300      	movs	r3, #0
 80012c8:	2200      	movs	r2, #0
 80012ca:	2112      	movs	r1, #18
 80012cc:	2008      	movs	r0, #8
 80012ce:	f7ff fcd3 	bl	8000c78 <GMG12864_Decode_UTF8>
	sprintf(text, "%4.1d", (y_min + val_del * 4));
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	009a      	lsls	r2, r3, #2
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	441a      	add	r2, r3
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	4994      	ldr	r1, [pc, #592]	; (8001530 <GMG12864_Generate_a_Graph+0x34c>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 fd09 	bl	8003cf8 <siprintf>
	GMG12864_Decode_UTF8(8, 8, 0, 0, text);
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2300      	movs	r3, #0
 80012ee:	2200      	movs	r2, #0
 80012f0:	2108      	movs	r1, #8
 80012f2:	2008      	movs	r0, #8
 80012f4:	f7ff fcc0 	bl	8000c78 <GMG12864_Decode_UTF8>
	sprintf(text, "%4.1d", y_max);
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80012fe:	498c      	ldr	r1, [pc, #560]	; (8001530 <GMG12864_Generate_a_Graph+0x34c>)
 8001300:	4618      	mov	r0, r3
 8001302:	f002 fcf9 	bl	8003cf8 <siprintf>
	GMG12864_Decode_UTF8(8, 0, 0, 0, text);
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2300      	movs	r3, #0
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	2008      	movs	r0, #8
 8001314:	f7ff fcb0 	bl	8000c78 <GMG12864_Decode_UTF8>

	if (time_interval == 0) {
 8001318:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800131c:	2b00      	cmp	r3, #0
 800131e:	d108      	bne.n	8001332 <GMG12864_Generate_a_Graph+0x14e>
		sprintf(text, "%2.1dcек.", x_grid_time);
 8001320:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	4982      	ldr	r1, [pc, #520]	; (8001534 <GMG12864_Generate_a_Graph+0x350>)
 800132a:	4618      	mov	r0, r3
 800132c:	f002 fce4 	bl	8003cf8 <siprintf>
 8001330:	e018      	b.n	8001364 <GMG12864_Generate_a_Graph+0x180>
	} else if (time_interval == 1) {
 8001332:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001336:	2b01      	cmp	r3, #1
 8001338:	d108      	bne.n	800134c <GMG12864_Generate_a_Graph+0x168>
		sprintf(text, "%2.1dмин.", x_grid_time);
 800133a:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	497d      	ldr	r1, [pc, #500]	; (8001538 <GMG12864_Generate_a_Graph+0x354>)
 8001344:	4618      	mov	r0, r3
 8001346:	f002 fcd7 	bl	8003cf8 <siprintf>
 800134a:	e00b      	b.n	8001364 <GMG12864_Generate_a_Graph+0x180>
	} else if (time_interval == 2) {
 800134c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001350:	2b02      	cmp	r3, #2
 8001352:	d107      	bne.n	8001364 <GMG12864_Generate_a_Graph+0x180>
		sprintf(text, "%2.1dчас.", x_grid_time);
 8001354:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4977      	ldr	r1, [pc, #476]	; (800153c <GMG12864_Generate_a_Graph+0x358>)
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fcca 	bl	8003cf8 <siprintf>
	}
	GMG12864_Decode_UTF8(53, 57, 1, 0, text);
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2300      	movs	r3, #0
 800136c:	2201      	movs	r2, #1
 800136e:	2139      	movs	r1, #57	; 0x39
 8001370:	2035      	movs	r0, #53	; 0x35
 8001372:	f7ff fc81 	bl	8000c78 <GMG12864_Decode_UTF8>

	/*----------------Ось асцисс, ось ординат, разметка-----------------*/

	GMG12864_Draw_line(27, 50, 127, 50, 1); //ось абсцисс
 8001376:	2301      	movs	r3, #1
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2332      	movs	r3, #50	; 0x32
 800137c:	227f      	movs	r2, #127	; 0x7f
 800137e:	2132      	movs	r1, #50	; 0x32
 8001380:	201b      	movs	r0, #27
 8001382:	f000 f965 	bl	8001650 <GMG12864_Draw_line>
	for (uint8_t i = 27; i <= 77; i = i + 10) {
 8001386:	231b      	movs	r3, #27
 8001388:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800138c:	e00e      	b.n	80013ac <GMG12864_Generate_a_Graph+0x1c8>
		GMG12864_Draw_line(i, 51, i, 52, 1);
 800138e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001392:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8001396:	2301      	movs	r3, #1
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2334      	movs	r3, #52	; 0x34
 800139c:	2133      	movs	r1, #51	; 0x33
 800139e:	f000 f957 	bl	8001650 <GMG12864_Draw_line>
	for (uint8_t i = 27; i <= 77; i = i + 10) {
 80013a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013a6:	330a      	adds	r3, #10
 80013a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80013ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013b0:	2b4d      	cmp	r3, #77	; 0x4d
 80013b2:	d9ec      	bls.n	800138e <GMG12864_Generate_a_Graph+0x1aa>
	}
	for (uint8_t i = 87; i <= 127; i = i + 10) {
 80013b4:	2357      	movs	r3, #87	; 0x57
 80013b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80013ba:	e00c      	b.n	80013d6 <GMG12864_Generate_a_Graph+0x1f2>
		GMG12864_Draw_pixel(i, 51, 1);
 80013bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	2201      	movs	r2, #1
 80013c4:	2133      	movs	r1, #51	; 0x33
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fa52 	bl	8000870 <GMG12864_Draw_pixel>
	for (uint8_t i = 87; i <= 127; i = i + 10) {
 80013cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80013d0:	330a      	adds	r3, #10
 80013d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80013d6:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80013da:	2b00      	cmp	r3, #0
 80013dc:	daee      	bge.n	80013bc <GMG12864_Generate_a_Graph+0x1d8>
	}

	GMG12864_Draw_line(27, 0, 27, 50, 1); //ось ординат
 80013de:	2301      	movs	r3, #1
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2332      	movs	r3, #50	; 0x32
 80013e4:	221b      	movs	r2, #27
 80013e6:	2100      	movs	r1, #0
 80013e8:	201b      	movs	r0, #27
 80013ea:	f000 f931 	bl	8001650 <GMG12864_Draw_line>
	for (uint8_t i = 0; i <= 50; i = i + 10) {
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80013f4:	e00e      	b.n	8001414 <GMG12864_Generate_a_Graph+0x230>
		GMG12864_Draw_line(25, i, 27, i, 1);
 80013f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80013fa:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80013fe:	2201      	movs	r2, #1
 8001400:	9200      	str	r2, [sp, #0]
 8001402:	221b      	movs	r2, #27
 8001404:	2019      	movs	r0, #25
 8001406:	f000 f923 	bl	8001650 <GMG12864_Draw_line>
	for (uint8_t i = 0; i <= 50; i = i + 10) {
 800140a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800140e:	330a      	adds	r3, #10
 8001410:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001414:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001418:	2b32      	cmp	r3, #50	; 0x32
 800141a:	d9ec      	bls.n	80013f6 <GMG12864_Generate_a_Graph+0x212>
	}

	GMG12864_Draw_line(57, 53, 57, 55, 1); //Полоса по х левая
 800141c:	2301      	movs	r3, #1
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2337      	movs	r3, #55	; 0x37
 8001422:	2239      	movs	r2, #57	; 0x39
 8001424:	2135      	movs	r1, #53	; 0x35
 8001426:	2039      	movs	r0, #57	; 0x39
 8001428:	f000 f912 	bl	8001650 <GMG12864_Draw_line>
	GMG12864_Draw_line(67, 53, 67, 55, 1); //Полоса по х правая
 800142c:	2301      	movs	r3, #1
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2337      	movs	r3, #55	; 0x37
 8001432:	2243      	movs	r2, #67	; 0x43
 8001434:	2135      	movs	r1, #53	; 0x35
 8001436:	2043      	movs	r0, #67	; 0x43
 8001438:	f000 f90a 	bl	8001650 <GMG12864_Draw_line>
	GMG12864_Draw_line(52, 54, 72, 54, 1); //Полоса между делениями по х
 800143c:	2301      	movs	r3, #1
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2336      	movs	r3, #54	; 0x36
 8001442:	2248      	movs	r2, #72	; 0x48
 8001444:	2136      	movs	r1, #54	; 0x36
 8001446:	2034      	movs	r0, #52	; 0x34
 8001448:	f000 f902 	bl	8001650 <GMG12864_Draw_line>
	GMG12864_Draw_line(54, 52, 54, 56, 1); //Левая стрелка на деление
 800144c:	2301      	movs	r3, #1
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	2338      	movs	r3, #56	; 0x38
 8001452:	2236      	movs	r2, #54	; 0x36
 8001454:	2134      	movs	r1, #52	; 0x34
 8001456:	2036      	movs	r0, #54	; 0x36
 8001458:	f000 f8fa 	bl	8001650 <GMG12864_Draw_line>
	GMG12864_Draw_line(55, 53, 55, 55, 1); //Левая стрелка на деление
 800145c:	2301      	movs	r3, #1
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2337      	movs	r3, #55	; 0x37
 8001462:	2237      	movs	r2, #55	; 0x37
 8001464:	2135      	movs	r1, #53	; 0x35
 8001466:	2037      	movs	r0, #55	; 0x37
 8001468:	f000 f8f2 	bl	8001650 <GMG12864_Draw_line>
	GMG12864_Draw_line(69, 53, 69, 55, 1); //Правая стрелка на деление
 800146c:	2301      	movs	r3, #1
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2337      	movs	r3, #55	; 0x37
 8001472:	2245      	movs	r2, #69	; 0x45
 8001474:	2135      	movs	r1, #53	; 0x35
 8001476:	2045      	movs	r0, #69	; 0x45
 8001478:	f000 f8ea 	bl	8001650 <GMG12864_Draw_line>
	GMG12864_Draw_line(70, 52, 70, 56, 1); //Правая стрелка на деление
 800147c:	2301      	movs	r3, #1
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2338      	movs	r3, #56	; 0x38
 8001482:	2246      	movs	r2, #70	; 0x46
 8001484:	2134      	movs	r1, #52	; 0x34
 8001486:	2046      	movs	r0, #70	; 0x46
 8001488:	f000 f8e2 	bl	8001650 <GMG12864_Draw_line>
	GMG12864_Draw_line(127, 53, 127, 57, 1); //Отметка "сейчас"
 800148c:	2301      	movs	r3, #1
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2339      	movs	r3, #57	; 0x39
 8001492:	227f      	movs	r2, #127	; 0x7f
 8001494:	2135      	movs	r1, #53	; 0x35
 8001496:	207f      	movs	r0, #127	; 0x7f
 8001498:	f000 f8da 	bl	8001650 <GMG12864_Draw_line>
	GMG12864_Draw_line(122, 55, 127, 55, 1); //Стрелка на "сейчас"
 800149c:	2301      	movs	r3, #1
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2337      	movs	r3, #55	; 0x37
 80014a2:	227f      	movs	r2, #127	; 0x7f
 80014a4:	2137      	movs	r1, #55	; 0x37
 80014a6:	207a      	movs	r0, #122	; 0x7a
 80014a8:	f000 f8d2 	bl	8001650 <GMG12864_Draw_line>
	GMG12864_Draw_line(124, 53, 124, 57, 1); //Стрелка на "сейчас"
 80014ac:	2301      	movs	r3, #1
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2339      	movs	r3, #57	; 0x39
 80014b2:	227c      	movs	r2, #124	; 0x7c
 80014b4:	2135      	movs	r1, #53	; 0x35
 80014b6:	207c      	movs	r0, #124	; 0x7c
 80014b8:	f000 f8ca 	bl	8001650 <GMG12864_Draw_line>
	GMG12864_Draw_line(125, 54, 125, 56, 1); //Стрелка на "сейчас"
 80014bc:	2301      	movs	r3, #1
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2338      	movs	r3, #56	; 0x38
 80014c2:	227d      	movs	r2, #125	; 0x7d
 80014c4:	2136      	movs	r1, #54	; 0x36
 80014c6:	207d      	movs	r0, #125	; 0x7d
 80014c8:	f000 f8c2 	bl	8001650 <GMG12864_Draw_line>

	/*----------------Ось асцисс, ось ординат, разметка-----------------*/

	/*--------------------------Разметка сетки-------------------------*/
	if (grid) {
 80014cc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d051      	beq.n	8001578 <GMG12864_Generate_a_Graph+0x394>
		for (uint8_t y = 0; y <= 40; y = y + 10) {
 80014d4:	2300      	movs	r3, #0
 80014d6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80014da:	e01b      	b.n	8001514 <GMG12864_Generate_a_Graph+0x330>
			for (uint8_t x = 27; x <= 127; x = x + 2) {
 80014dc:	231b      	movs	r3, #27
 80014de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80014e2:	e00e      	b.n	8001502 <GMG12864_Generate_a_Graph+0x31e>
				GMG12864_Draw_pixel(x, y, 1);
 80014e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80014ee:	b211      	sxth	r1, r2
 80014f0:	2201      	movs	r2, #1
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f9bc 	bl	8000870 <GMG12864_Draw_pixel>
			for (uint8_t x = 27; x <= 127; x = x + 2) {
 80014f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014fc:	3302      	adds	r3, #2
 80014fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001502:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001506:	2b00      	cmp	r3, #0
 8001508:	daec      	bge.n	80014e4 <GMG12864_Generate_a_Graph+0x300>
		for (uint8_t y = 0; y <= 40; y = y + 10) {
 800150a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800150e:	330a      	adds	r3, #10
 8001510:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001514:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001518:	2b28      	cmp	r3, #40	; 0x28
 800151a:	d9df      	bls.n	80014dc <GMG12864_Generate_a_Graph+0x2f8>
			}
		}

		for (uint8_t x = 27; x <= 127; x = x + 10) {
 800151c:	231b      	movs	r3, #27
 800151e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8001522:	e025      	b.n	8001570 <GMG12864_Generate_a_Graph+0x38c>
			for (uint8_t y = 0; y <= 50; y = y + 2) {
 8001524:	2300      	movs	r3, #0
 8001526:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800152a:	e018      	b.n	800155e <GMG12864_Generate_a_Graph+0x37a>
 800152c:	66666667 	.word	0x66666667
 8001530:	080045d0 	.word	0x080045d0
 8001534:	080045d8 	.word	0x080045d8
 8001538:	080045e4 	.word	0x080045e4
 800153c:	080045f4 	.word	0x080045f4
				GMG12864_Draw_pixel(x, y, 1);
 8001540:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001544:	b21b      	sxth	r3, r3
 8001546:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800154a:	b211      	sxth	r1, r2
 800154c:	2201      	movs	r2, #1
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f98e 	bl	8000870 <GMG12864_Draw_pixel>
			for (uint8_t y = 0; y <= 50; y = y + 2) {
 8001554:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001558:	3302      	adds	r3, #2
 800155a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800155e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001562:	2b32      	cmp	r3, #50	; 0x32
 8001564:	d9ec      	bls.n	8001540 <GMG12864_Generate_a_Graph+0x35c>
		for (uint8_t x = 27; x <= 127; x = x + 10) {
 8001566:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800156a:	330a      	adds	r3, #10
 800156c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8001570:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8001574:	2b00      	cmp	r3, #0
 8001576:	dad5      	bge.n	8001524 <GMG12864_Generate_a_Graph+0x340>
			}
		}
	}
	/*--------------------------Разметка сетки-------------------------*/

	if (*counter <= size_array) {
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	79fa      	ldrb	r2, [r7, #7]
 800157e:	429a      	cmp	r2, r3
 8001580:	d307      	bcc.n	8001592 <GMG12864_Generate_a_Graph+0x3ae>
		if (*counter == size_array) {
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	79fa      	ldrb	r2, [r7, #7]
 8001588:	429a      	cmp	r2, r3
 800158a:	d102      	bne.n	8001592 <GMG12864_Generate_a_Graph+0x3ae>
			array_is_full = true;
 800158c:	4b2f      	ldr	r3, [pc, #188]	; (800164c <GMG12864_Generate_a_Graph+0x468>)
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]
		}
	}

	if (array_is_full) {
 8001592:	4b2e      	ldr	r3, [pc, #184]	; (800164c <GMG12864_Generate_a_Graph+0x468>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d029      	beq.n	80015ee <GMG12864_Generate_a_Graph+0x40a>
		for (int i = 0; i < size_array - 1; i++) {
 800159a:	2300      	movs	r3, #0
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800159e:	e020      	b.n	80015e2 <GMG12864_Generate_a_Graph+0x3fe>
			//GMG12864_Draw_pixel(127 - i, 50 - array[i], 1); //Рисуем точками
			GMG12864_Draw_line(127 - (i + 1), 50 - array[i + 1], 127 - i, 50 - array[i], 1); //Рисуем линиями
 80015a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 80015a8:	b2d8      	uxtb	r0, r3
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	3301      	adds	r3, #1
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 80015b8:	b2d9      	uxtb	r1, r3
 80015ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80015c2:	b2dc      	uxtb	r4, r3
 80015c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	4413      	add	r3, r2
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2201      	movs	r2, #1
 80015d4:	9200      	str	r2, [sp, #0]
 80015d6:	4622      	mov	r2, r4
 80015d8:	f000 f83a 	bl	8001650 <GMG12864_Draw_line>
		for (int i = 0; i < size_array - 1; i++) {
 80015dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015de:	3301      	adds	r3, #1
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbd9      	blt.n	80015a0 <GMG12864_Generate_a_Graph+0x3bc>
			GMG12864_Draw_line(127 - (i + 1), 50 - array[i + 1], 127 - i, 50 - array[i], 1); //Рисуем линиями
			//GMG12864_Draw_line(127-i, 50, 127-i, 50 - array[i], 1);//Закрашиваем область

		}
	}
}
 80015ec:	e029      	b.n	8001642 <GMG12864_Generate_a_Graph+0x45e>
		for (int i = 0; i < *counter; i++) {
 80015ee:	2300      	movs	r3, #0
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80015f2:	e020      	b.n	8001636 <GMG12864_Generate_a_Graph+0x452>
			GMG12864_Draw_line(127 - (i + 1), 50 - array[i + 1], 127 - i, 50 - array[i], 1); //Рисуем линиями
 80015f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 80015fc:	b2d8      	uxtb	r0, r3
 80015fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001600:	3301      	adds	r3, #1
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	4413      	add	r3, r2
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 800160c:	b2d9      	uxtb	r1, r3
 800160e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001616:	b2dc      	uxtb	r4, r3
 8001618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	4413      	add	r3, r2
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2201      	movs	r2, #1
 8001628:	9200      	str	r2, [sp, #0]
 800162a:	4622      	mov	r2, r4
 800162c:	f000 f810 	bl	8001650 <GMG12864_Draw_line>
		for (int i = 0; i < *counter; i++) {
 8001630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001632:	3301      	adds	r3, #1
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163e:	4293      	cmp	r3, r2
 8001640:	dbd8      	blt.n	80015f4 <GMG12864_Generate_a_Graph+0x410>
}
 8001642:	bf00      	nop
 8001644:	3744      	adds	r7, #68	; 0x44
 8001646:	46bd      	mov	sp, r7
 8001648:	bd90      	pop	{r4, r7, pc}
 800164a:	bf00      	nop
 800164c:	20000578 	.word	0x20000578

08001650 <GMG12864_Draw_line>:
/*----------------------Функция, формирующая весь график, который будет отображаться на дисплее-----------------------------*/

/********************************РАБОТА С ГЕОМЕТРИЧЕСКИМИ ФИГУРАМИ**********************************/

void GMG12864_Draw_line(uint8_t x_start, uint8_t y_start, uint8_t x_end, uint8_t y_end, uint8_t color) {
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	4604      	mov	r4, r0
 8001658:	4608      	mov	r0, r1
 800165a:	4611      	mov	r1, r2
 800165c:	461a      	mov	r2, r3
 800165e:	4623      	mov	r3, r4
 8001660:	71fb      	strb	r3, [r7, #7]
 8001662:	4603      	mov	r3, r0
 8001664:	71bb      	strb	r3, [r7, #6]
 8001666:	460b      	mov	r3, r1
 8001668:	717b      	strb	r3, [r7, #5]
 800166a:	4613      	mov	r3, r2
 800166c:	713b      	strb	r3, [r7, #4]
	int dx = (x_end >= x_start) ? x_end - x_start : x_start - x_end;
 800166e:	797a      	ldrb	r2, [r7, #5]
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	429a      	cmp	r2, r3
 8001674:	d303      	bcc.n	800167e <GMG12864_Draw_line+0x2e>
 8001676:	797a      	ldrb	r2, [r7, #5]
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	e002      	b.n	8001684 <GMG12864_Draw_line+0x34>
 800167e:	79fa      	ldrb	r2, [r7, #7]
 8001680:	797b      	ldrb	r3, [r7, #5]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	61bb      	str	r3, [r7, #24]
	int dy = (y_end >= y_start) ? y_end - y_start : y_start - y_end;
 8001686:	793a      	ldrb	r2, [r7, #4]
 8001688:	79bb      	ldrb	r3, [r7, #6]
 800168a:	429a      	cmp	r2, r3
 800168c:	d303      	bcc.n	8001696 <GMG12864_Draw_line+0x46>
 800168e:	793a      	ldrb	r2, [r7, #4]
 8001690:	79bb      	ldrb	r3, [r7, #6]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	e002      	b.n	800169c <GMG12864_Draw_line+0x4c>
 8001696:	79ba      	ldrb	r2, [r7, #6]
 8001698:	793b      	ldrb	r3, [r7, #4]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	617b      	str	r3, [r7, #20]
	int sx = (x_start < x_end) ? 1 : -1;
 800169e:	79fa      	ldrb	r2, [r7, #7]
 80016a0:	797b      	ldrb	r3, [r7, #5]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d201      	bcs.n	80016aa <GMG12864_Draw_line+0x5a>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e001      	b.n	80016ae <GMG12864_Draw_line+0x5e>
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	613b      	str	r3, [r7, #16]
	int sy = (y_start < y_end) ? 1 : -1;
 80016b0:	79ba      	ldrb	r2, [r7, #6]
 80016b2:	793b      	ldrb	r3, [r7, #4]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d201      	bcs.n	80016bc <GMG12864_Draw_line+0x6c>
 80016b8:	2301      	movs	r3, #1
 80016ba:	e001      	b.n	80016c0 <GMG12864_Draw_line+0x70>
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
 80016c0:	60fb      	str	r3, [r7, #12]
	int err = dx - dy;
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	61fb      	str	r3, [r7, #28]

	for (;;) {
		GMG12864_Draw_pixel(x_start, y_start, color);
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	79ba      	ldrb	r2, [r7, #6]
 80016d0:	b211      	sxth	r1, r2
 80016d2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff f8ca 	bl	8000870 <GMG12864_Draw_pixel>
		if (x_start == x_end && y_start == y_end)
 80016dc:	79fa      	ldrb	r2, [r7, #7]
 80016de:	797b      	ldrb	r3, [r7, #5]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d103      	bne.n	80016ec <GMG12864_Draw_line+0x9c>
 80016e4:	79ba      	ldrb	r2, [r7, #6]
 80016e6:	793b      	ldrb	r3, [r7, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d01e      	beq.n	800172a <GMG12864_Draw_line+0xda>
			break;
		int e2 = err + err;
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
		if (e2 > -dy) {
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	425b      	negs	r3, r3
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dd08      	ble.n	800170e <GMG12864_Draw_line+0xbe>
			err -= dy;
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	61fb      	str	r3, [r7, #28]
			x_start += sx;
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	4413      	add	r3, r2
 800170c:	71fb      	strb	r3, [r7, #7]
		}
		if (e2 < dx) {
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	429a      	cmp	r2, r3
 8001714:	dad9      	bge.n	80016ca <GMG12864_Draw_line+0x7a>
			err += dx;
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	4413      	add	r3, r2
 800171c:	61fb      	str	r3, [r7, #28]
			y_start += sy;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	79bb      	ldrb	r3, [r7, #6]
 8001724:	4413      	add	r3, r2
 8001726:	71bb      	strb	r3, [r7, #6]
	for (;;) {
 8001728:	e7cf      	b.n	80016ca <GMG12864_Draw_line+0x7a>
			break;
 800172a:	bf00      	nop
		}
	}
}
 800172c:	bf00      	nop
 800172e:	3724      	adds	r7, #36	; 0x24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd90      	pop	{r4, r7, pc}

08001734 <GMG12864_Draw_rectangle>:

/*--------------------------------Вывести пустотелый прямоугольник---------------------------------*/
void GMG12864_Draw_rectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t color) {
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b085      	sub	sp, #20
 8001738:	af02      	add	r7, sp, #8
 800173a:	4604      	mov	r4, r0
 800173c:	4608      	mov	r0, r1
 800173e:	4611      	mov	r1, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4623      	mov	r3, r4
 8001744:	80fb      	strh	r3, [r7, #6]
 8001746:	4603      	mov	r3, r0
 8001748:	80bb      	strh	r3, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	807b      	strh	r3, [r7, #2]
 800174e:	4613      	mov	r3, r2
 8001750:	803b      	strh	r3, [r7, #0]
/// \param y - начальная точка по оси "y"
/// \param width - ширина прямоугольника
/// \param height - высота прямоугольника

	/*Проверка ширины и высоты*/
	if ((x + width) >= GMG12864_width) {
 8001752:	88fa      	ldrh	r2, [r7, #6]
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	4413      	add	r3, r2
 8001758:	4a38      	ldr	r2, [pc, #224]	; (800183c <GMG12864_Draw_rectangle+0x108>)
 800175a:	7812      	ldrb	r2, [r2, #0]
 800175c:	4293      	cmp	r3, r2
 800175e:	db05      	blt.n	800176c <GMG12864_Draw_rectangle+0x38>
		width = GMG12864_width - x;
 8001760:	4b36      	ldr	r3, [pc, #216]	; (800183c <GMG12864_Draw_rectangle+0x108>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b29a      	uxth	r2, r3
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	807b      	strh	r3, [r7, #2]
	}
	if ((y + height) >= GMG12864_height) {
 800176c:	88ba      	ldrh	r2, [r7, #4]
 800176e:	883b      	ldrh	r3, [r7, #0]
 8001770:	4413      	add	r3, r2
 8001772:	4a33      	ldr	r2, [pc, #204]	; (8001840 <GMG12864_Draw_rectangle+0x10c>)
 8001774:	7812      	ldrb	r2, [r2, #0]
 8001776:	4293      	cmp	r3, r2
 8001778:	db05      	blt.n	8001786 <GMG12864_Draw_rectangle+0x52>
		height = GMG12864_height - y;
 800177a:	4b31      	ldr	r3, [pc, #196]	; (8001840 <GMG12864_Draw_rectangle+0x10c>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b29a      	uxth	r2, r3
 8001780:	88bb      	ldrh	r3, [r7, #4]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	803b      	strh	r3, [r7, #0]
	}

	/*Рисуем линии*/
	GMG12864_Draw_line(x, y, x + width, y, color); /*Верх прямоугольника*/
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	b2d8      	uxtb	r0, r3
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	b2d9      	uxtb	r1, r3
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	887b      	ldrh	r3, [r7, #2]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	4413      	add	r3, r2
 8001798:	b2da      	uxtb	r2, r3
 800179a:	88bb      	ldrh	r3, [r7, #4]
 800179c:	b2dc      	uxtb	r4, r3
 800179e:	7e3b      	ldrb	r3, [r7, #24]
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	4623      	mov	r3, r4
 80017a4:	f7ff ff54 	bl	8001650 <GMG12864_Draw_line>
	GMG12864_Draw_line(x, y + height, x + width, y + height, color); /*Низ прямоугольника*/
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	b2d8      	uxtb	r0, r3
 80017ac:	88bb      	ldrh	r3, [r7, #4]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	883b      	ldrh	r3, [r7, #0]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	b2d9      	uxtb	r1, r3
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	b2dc      	uxtb	r4, r3
 80017c4:	88bb      	ldrh	r3, [r7, #4]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	883b      	ldrh	r3, [r7, #0]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	7e3b      	ldrb	r3, [r7, #24]
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	4613      	mov	r3, r2
 80017d6:	4622      	mov	r2, r4
 80017d8:	f7ff ff3a 	bl	8001650 <GMG12864_Draw_line>
	GMG12864_Draw_line(x, y, x, y + height, color); /*Левая сторона прямоугольника*/
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	b2d8      	uxtb	r0, r3
 80017e0:	88bb      	ldrh	r3, [r7, #4]
 80017e2:	b2d9      	uxtb	r1, r3
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	b2dc      	uxtb	r4, r3
 80017e8:	88bb      	ldrh	r3, [r7, #4]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	883b      	ldrh	r3, [r7, #0]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	7e3b      	ldrb	r3, [r7, #24]
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	4613      	mov	r3, r2
 80017fa:	4622      	mov	r2, r4
 80017fc:	f7ff ff28 	bl	8001650 <GMG12864_Draw_line>
	GMG12864_Draw_line(x + width, y, x + width, y + height, color); /*Правая сторона прямоугольника*/
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	887b      	ldrh	r3, [r7, #2]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	4413      	add	r3, r2
 800180a:	b2d8      	uxtb	r0, r3
 800180c:	88bb      	ldrh	r3, [r7, #4]
 800180e:	b2d9      	uxtb	r1, r3
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	887b      	ldrh	r3, [r7, #2]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	4413      	add	r3, r2
 800181a:	b2dc      	uxtb	r4, r3
 800181c:	88bb      	ldrh	r3, [r7, #4]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	883b      	ldrh	r3, [r7, #0]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	4413      	add	r3, r2
 8001826:	b2da      	uxtb	r2, r3
 8001828:	7e3b      	ldrb	r3, [r7, #24]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	4613      	mov	r3, r2
 800182e:	4622      	mov	r2, r4
 8001830:	f7ff ff0e 	bl	8001650 <GMG12864_Draw_line>
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bd90      	pop	{r4, r7, pc}
 800183c:	20000000 	.word	0x20000000
 8001840:	20000001 	.word	0x20000001

08001844 <GMG12864_Draw_rectangle_filled>:
/*--------------------------------Вывести пустотелый прямоугольник---------------------------------*/

/*-------------------------------Вывести закрашенный прямоугольник---------------------------------*/
void GMG12864_Draw_rectangle_filled(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t color) {
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b087      	sub	sp, #28
 8001848:	af02      	add	r7, sp, #8
 800184a:	4604      	mov	r4, r0
 800184c:	4608      	mov	r0, r1
 800184e:	4611      	mov	r1, r2
 8001850:	461a      	mov	r2, r3
 8001852:	4623      	mov	r3, r4
 8001854:	80fb      	strh	r3, [r7, #6]
 8001856:	4603      	mov	r3, r0
 8001858:	80bb      	strh	r3, [r7, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	807b      	strh	r3, [r7, #2]
 800185e:	4613      	mov	r3, r2
 8001860:	803b      	strh	r3, [r7, #0]
/// \param y - начальная точка по оси "y"
/// \param width - ширина прямоугольника
/// \param height - высота прямоугольника

	/*Проверка ширины и высоты*/
	if ((x + width) >= GMG12864_width) {
 8001862:	88fa      	ldrh	r2, [r7, #6]
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	4413      	add	r3, r2
 8001868:	4a1f      	ldr	r2, [pc, #124]	; (80018e8 <GMG12864_Draw_rectangle_filled+0xa4>)
 800186a:	7812      	ldrb	r2, [r2, #0]
 800186c:	4293      	cmp	r3, r2
 800186e:	db05      	blt.n	800187c <GMG12864_Draw_rectangle_filled+0x38>
		width = GMG12864_width - x;
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <GMG12864_Draw_rectangle_filled+0xa4>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b29a      	uxth	r2, r3
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	807b      	strh	r3, [r7, #2]
	}
	if ((y + height) >= GMG12864_height) {
 800187c:	88ba      	ldrh	r2, [r7, #4]
 800187e:	883b      	ldrh	r3, [r7, #0]
 8001880:	4413      	add	r3, r2
 8001882:	4a1a      	ldr	r2, [pc, #104]	; (80018ec <GMG12864_Draw_rectangle_filled+0xa8>)
 8001884:	7812      	ldrb	r2, [r2, #0]
 8001886:	4293      	cmp	r3, r2
 8001888:	db05      	blt.n	8001896 <GMG12864_Draw_rectangle_filled+0x52>
		height = GMG12864_height - y;
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <GMG12864_Draw_rectangle_filled+0xa8>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b29a      	uxth	r2, r3
 8001890:	88bb      	ldrh	r3, [r7, #4]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	803b      	strh	r3, [r7, #0]
	}

	/*Рисуем линии*/
	for (uint8_t i = 0; i <= height; i++) {
 8001896:	2300      	movs	r3, #0
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	e01b      	b.n	80018d4 <GMG12864_Draw_rectangle_filled+0x90>
		GMG12864_Draw_line(x, y + i, x + width, y + i, color);
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	b2d8      	uxtb	r0, r3
 80018a0:	88bb      	ldrh	r3, [r7, #4]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	4413      	add	r3, r2
 80018a8:	b2d9      	uxtb	r1, r3
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	b2dc      	uxtb	r4, r3
 80018b6:	88bb      	ldrh	r3, [r7, #4]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	4413      	add	r3, r2
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	4613      	mov	r3, r2
 80018c8:	4622      	mov	r2, r4
 80018ca:	f7ff fec1 	bl	8001650 <GMG12864_Draw_line>
	for (uint8_t i = 0; i <= height; i++) {
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	3301      	adds	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	883a      	ldrh	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d2de      	bcs.n	800189c <GMG12864_Draw_rectangle_filled+0x58>
	}
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd90      	pop	{r4, r7, pc}
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000001 	.word	0x20000001

080018f0 <GMG12864_Draw_circle>:
/*-------------------------------Вывести закрашенный прямоугольник---------------------------------*/

/*---------------------------------Вывести пустотелую окружность-----------------------------------*/
void GMG12864_Draw_circle(uint8_t x, uint8_t y, uint8_t radius, uint8_t color) {
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b089      	sub	sp, #36	; 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4604      	mov	r4, r0
 80018f8:	4608      	mov	r0, r1
 80018fa:	4611      	mov	r1, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	4623      	mov	r3, r4
 8001900:	71fb      	strb	r3, [r7, #7]
 8001902:	4603      	mov	r3, r0
 8001904:	71bb      	strb	r3, [r7, #6]
 8001906:	460b      	mov	r3, r1
 8001908:	717b      	strb	r3, [r7, #5]
 800190a:	4613      	mov	r3, r2
 800190c:	713b      	strb	r3, [r7, #4]
/// Вывести пустотелую окружность
/// \param x - точка центра окружности по оси "x"
/// \param y - точка центра окружности по оси "y"
/// \param radius - радиус окружности

	int f = 1 - (int) radius;
 800190e:	797b      	ldrb	r3, [r7, #5]
 8001910:	f1c3 0301 	rsb	r3, r3, #1
 8001914:	61fb      	str	r3, [r7, #28]
	int ddF_x = 1;
 8001916:	2301      	movs	r3, #1
 8001918:	61bb      	str	r3, [r7, #24]

	int ddF_y = -2 * (int) radius;
 800191a:	797a      	ldrb	r2, [r7, #5]
 800191c:	4613      	mov	r3, r2
 800191e:	07db      	lsls	r3, r3, #31
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	617b      	str	r3, [r7, #20]
	int x_0 = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]

	GMG12864_Draw_pixel(x, y + radius, color);
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	b218      	sxth	r0, r3
 800192e:	79bb      	ldrb	r3, [r7, #6]
 8001930:	b29a      	uxth	r2, r3
 8001932:	797b      	ldrb	r3, [r7, #5]
 8001934:	b29b      	uxth	r3, r3
 8001936:	4413      	add	r3, r2
 8001938:	b29b      	uxth	r3, r3
 800193a:	b21b      	sxth	r3, r3
 800193c:	793a      	ldrb	r2, [r7, #4]
 800193e:	4619      	mov	r1, r3
 8001940:	f7fe ff96 	bl	8000870 <GMG12864_Draw_pixel>
	GMG12864_Draw_pixel(x, y - radius, color);
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	b218      	sxth	r0, r3
 8001948:	79bb      	ldrb	r3, [r7, #6]
 800194a:	b29a      	uxth	r2, r3
 800194c:	797b      	ldrb	r3, [r7, #5]
 800194e:	b29b      	uxth	r3, r3
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	b29b      	uxth	r3, r3
 8001954:	b21b      	sxth	r3, r3
 8001956:	793a      	ldrb	r2, [r7, #4]
 8001958:	4619      	mov	r1, r3
 800195a:	f7fe ff89 	bl	8000870 <GMG12864_Draw_pixel>
	GMG12864_Draw_pixel(x + radius, y, color);
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	b29a      	uxth	r2, r3
 8001962:	797b      	ldrb	r3, [r7, #5]
 8001964:	b29b      	uxth	r3, r3
 8001966:	4413      	add	r3, r2
 8001968:	b29b      	uxth	r3, r3
 800196a:	b21b      	sxth	r3, r3
 800196c:	79ba      	ldrb	r2, [r7, #6]
 800196e:	b211      	sxth	r1, r2
 8001970:	793a      	ldrb	r2, [r7, #4]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe ff7c 	bl	8000870 <GMG12864_Draw_pixel>
	GMG12864_Draw_pixel(x - radius, y, color);
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	b29a      	uxth	r2, r3
 800197c:	797b      	ldrb	r3, [r7, #5]
 800197e:	b29b      	uxth	r3, r3
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	b29b      	uxth	r3, r3
 8001984:	b21b      	sxth	r3, r3
 8001986:	79ba      	ldrb	r2, [r7, #6]
 8001988:	b211      	sxth	r1, r2
 800198a:	793a      	ldrb	r2, [r7, #4]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe ff6f 	bl	8000870 <GMG12864_Draw_pixel>

	int y_0 = radius;
 8001992:	797b      	ldrb	r3, [r7, #5]
 8001994:	60fb      	str	r3, [r7, #12]
	while (x_0 < y_0) {
 8001996:	e0a6      	b.n	8001ae6 <GMG12864_Draw_circle+0x1f6>
		if (f >= 0) {
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	2b00      	cmp	r3, #0
 800199c:	db09      	blt.n	80019b2 <GMG12864_Draw_circle+0xc2>
			y_0--;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
			ddF_y += 2;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3302      	adds	r3, #2
 80019a8:	617b      	str	r3, [r7, #20]
			f += ddF_y;
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	4413      	add	r3, r2
 80019b0:	61fb      	str	r3, [r7, #28]
		}
		x_0++;
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	3301      	adds	r3, #1
 80019b6:	613b      	str	r3, [r7, #16]
		ddF_x += 2;
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	3302      	adds	r3, #2
 80019bc:	61bb      	str	r3, [r7, #24]
		f += ddF_x;
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	4413      	add	r3, r2
 80019c4:	61fb      	str	r3, [r7, #28]
		GMG12864_Draw_pixel(x + x_0, y + y_0, color);
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	b218      	sxth	r0, r3
 80019d4:	79bb      	ldrb	r3, [r7, #6]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	4413      	add	r3, r2
 80019de:	b29b      	uxth	r3, r3
 80019e0:	b21b      	sxth	r3, r3
 80019e2:	793a      	ldrb	r2, [r7, #4]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7fe ff43 	bl	8000870 <GMG12864_Draw_pixel>
		GMG12864_Draw_pixel(x - x_0, y + y_0, color);
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	b218      	sxth	r0, r3
 80019f8:	79bb      	ldrb	r3, [r7, #6]
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	b21b      	sxth	r3, r3
 8001a06:	793a      	ldrb	r2, [r7, #4]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7fe ff31 	bl	8000870 <GMG12864_Draw_pixel>
		GMG12864_Draw_pixel(x + x_0, y - y_0, color);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	b218      	sxth	r0, r3
 8001a1c:	79bb      	ldrb	r3, [r7, #6]
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	793a      	ldrb	r2, [r7, #4]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7fe ff1f 	bl	8000870 <GMG12864_Draw_pixel>
		GMG12864_Draw_pixel(x - x_0, y - y_0, color);
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	b218      	sxth	r0, r3
 8001a40:	79bb      	ldrb	r3, [r7, #6]
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	793a      	ldrb	r2, [r7, #4]
 8001a50:	4619      	mov	r1, r3
 8001a52:	f7fe ff0d 	bl	8000870 <GMG12864_Draw_pixel>
		GMG12864_Draw_pixel(x + y_0, y + x_0, color);
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	b218      	sxth	r0, r3
 8001a64:	79bb      	ldrb	r3, [r7, #6]
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	793a      	ldrb	r2, [r7, #4]
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7fe fefb 	bl	8000870 <GMG12864_Draw_pixel>
		GMG12864_Draw_pixel(x - y_0, y + x_0, color);
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	b218      	sxth	r0, r3
 8001a88:	79bb      	ldrb	r3, [r7, #6]
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4413      	add	r3, r2
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	793a      	ldrb	r2, [r7, #4]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f7fe fee9 	bl	8000870 <GMG12864_Draw_pixel>
		GMG12864_Draw_pixel(x + y_0, y - x_0, color);
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	b218      	sxth	r0, r3
 8001aac:	79bb      	ldrb	r3, [r7, #6]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	793a      	ldrb	r2, [r7, #4]
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7fe fed7 	bl	8000870 <GMG12864_Draw_pixel>
		GMG12864_Draw_pixel(x - y_0, y - x_0, color);
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	b218      	sxth	r0, r3
 8001ad0:	79bb      	ldrb	r3, [r7, #6]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	b21b      	sxth	r3, r3
 8001ade:	793a      	ldrb	r2, [r7, #4]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f7fe fec5 	bl	8000870 <GMG12864_Draw_pixel>
	while (x_0 < y_0) {
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	f6ff af54 	blt.w	8001998 <GMG12864_Draw_circle+0xa8>
	}
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd90      	pop	{r4, r7, pc}

08001afa <GMG12864_Draw_circle_filled>:
/*---------------------------------Вывести пустотелую окружность-----------------------------------*/

/*--------------------------------Вывести закрашенную окружность-----------------------------------*/
void GMG12864_Draw_circle_filled(int16_t x, int16_t y, int16_t radius, uint8_t color) {
 8001afa:	b590      	push	{r4, r7, lr}
 8001afc:	b089      	sub	sp, #36	; 0x24
 8001afe:	af02      	add	r7, sp, #8
 8001b00:	4604      	mov	r4, r0
 8001b02:	4608      	mov	r0, r1
 8001b04:	4611      	mov	r1, r2
 8001b06:	461a      	mov	r2, r3
 8001b08:	4623      	mov	r3, r4
 8001b0a:	80fb      	strh	r3, [r7, #6]
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	80bb      	strh	r3, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
 8001b14:	4613      	mov	r3, r2
 8001b16:	707b      	strb	r3, [r7, #1]
/// Вывести закрашенную окружность
/// \param x - точка центра окружности по оси "x"
/// \param y - точка центра окружности по оси "y"
/// \param radius - радиус окружности

	int16_t f = 1 - radius;
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	f1c3 0301 	rsb	r3, r3, #1
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * radius;
 8001b26:	887b      	ldrh	r3, [r7, #2]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	03d2      	lsls	r2, r2, #15
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	827b      	strh	r3, [r7, #18]
	int16_t x_0 = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	823b      	strh	r3, [r7, #16]
	int16_t y_0 = radius;
 8001b38:	887b      	ldrh	r3, [r7, #2]
 8001b3a:	81fb      	strh	r3, [r7, #14]

	GMG12864_Draw_pixel(x, y + radius, color);
 8001b3c:	88ba      	ldrh	r2, [r7, #4]
 8001b3e:	887b      	ldrh	r3, [r7, #2]
 8001b40:	4413      	add	r3, r2
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	b219      	sxth	r1, r3
 8001b46:	787a      	ldrb	r2, [r7, #1]
 8001b48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fe8f 	bl	8000870 <GMG12864_Draw_pixel>
	GMG12864_Draw_pixel(x, y - radius, color);
 8001b52:	88ba      	ldrh	r2, [r7, #4]
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	b219      	sxth	r1, r3
 8001b5c:	787a      	ldrb	r2, [r7, #1]
 8001b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fe84 	bl	8000870 <GMG12864_Draw_pixel>
	GMG12864_Draw_pixel(x + radius, y, color);
 8001b68:	88fa      	ldrh	r2, [r7, #6]
 8001b6a:	887b      	ldrh	r3, [r7, #2]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	b21b      	sxth	r3, r3
 8001b72:	787a      	ldrb	r2, [r7, #1]
 8001b74:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fe79 	bl	8000870 <GMG12864_Draw_pixel>
	GMG12864_Draw_pixel(x - radius, y, color);
 8001b7e:	88fa      	ldrh	r2, [r7, #6]
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	b21b      	sxth	r3, r3
 8001b88:	787a      	ldrb	r2, [r7, #1]
 8001b8a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fe6e 	bl	8000870 <GMG12864_Draw_pixel>
	GMG12864_Draw_line(x - radius, y, x + radius, y, color);
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	887b      	ldrh	r3, [r7, #2]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	b2d8      	uxtb	r0, r3
 8001ba0:	88bb      	ldrh	r3, [r7, #4]
 8001ba2:	b2d9      	uxtb	r1, r3
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	4413      	add	r3, r2
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	88bb      	ldrh	r3, [r7, #4]
 8001bb2:	b2dc      	uxtb	r4, r3
 8001bb4:	787b      	ldrb	r3, [r7, #1]
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	4623      	mov	r3, r4
 8001bba:	f7ff fd49 	bl	8001650 <GMG12864_Draw_line>

	while (x_0 < y_0) {
 8001bbe:	e099      	b.n	8001cf4 <GMG12864_Draw_circle_filled+0x1fa>
		if (f >= 0) {
 8001bc0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0e      	blt.n	8001be6 <GMG12864_Draw_circle_filled+0xec>
			y_0--;
 8001bc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8001bd4:	8a7b      	ldrh	r3, [r7, #18]
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8001bdc:	8afa      	ldrh	r2, [r7, #22]
 8001bde:	8a7b      	ldrh	r3, [r7, #18]
 8001be0:	4413      	add	r3, r2
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	82fb      	strh	r3, [r7, #22]
		}
		x_0++;
 8001be6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3301      	adds	r3, #1
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8001bf2:	8abb      	ldrh	r3, [r7, #20]
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8001bfa:	8afa      	ldrh	r2, [r7, #22]
 8001bfc:	8abb      	ldrh	r3, [r7, #20]
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	82fb      	strh	r3, [r7, #22]

		GMG12864_Draw_line(x - x_0, y + y_0, x + x_0, y + y_0, color);
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	8a3b      	ldrh	r3, [r7, #16]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	b2d8      	uxtb	r0, r3
 8001c10:	88bb      	ldrh	r3, [r7, #4]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	89fb      	ldrh	r3, [r7, #14]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	4413      	add	r3, r2
 8001c1a:	b2d9      	uxtb	r1, r3
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	8a3b      	ldrh	r3, [r7, #16]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	4413      	add	r3, r2
 8001c26:	b2dc      	uxtb	r4, r3
 8001c28:	88bb      	ldrh	r3, [r7, #4]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	89fb      	ldrh	r3, [r7, #14]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	787b      	ldrb	r3, [r7, #1]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	4622      	mov	r2, r4
 8001c3c:	f7ff fd08 	bl	8001650 <GMG12864_Draw_line>
		GMG12864_Draw_line(x + x_0, y - y_0, x - x_0, y - y_0, color);
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	8a3b      	ldrh	r3, [r7, #16]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	b2d8      	uxtb	r0, r3
 8001c4c:	88bb      	ldrh	r3, [r7, #4]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	89fb      	ldrh	r3, [r7, #14]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	b2d9      	uxtb	r1, r3
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	8a3b      	ldrh	r3, [r7, #16]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	b2dc      	uxtb	r4, r3
 8001c64:	88bb      	ldrh	r3, [r7, #4]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	89fb      	ldrh	r3, [r7, #14]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	787b      	ldrb	r3, [r7, #1]
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	4613      	mov	r3, r2
 8001c76:	4622      	mov	r2, r4
 8001c78:	f7ff fcea 	bl	8001650 <GMG12864_Draw_line>
		GMG12864_Draw_line(x + y_0, y + x_0, x - y_0, y + x_0, color);
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	89fb      	ldrh	r3, [r7, #14]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	b2d8      	uxtb	r0, r3
 8001c88:	88bb      	ldrh	r3, [r7, #4]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	8a3b      	ldrh	r3, [r7, #16]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	b2d9      	uxtb	r1, r3
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	89fb      	ldrh	r3, [r7, #14]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	b2dc      	uxtb	r4, r3
 8001ca0:	88bb      	ldrh	r3, [r7, #4]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	8a3b      	ldrh	r3, [r7, #16]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	4413      	add	r3, r2
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	787b      	ldrb	r3, [r7, #1]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	4622      	mov	r2, r4
 8001cb4:	f7ff fccc 	bl	8001650 <GMG12864_Draw_line>
		GMG12864_Draw_line(x + y_0, y - x_0, x - y_0, y - x_0, color);
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	89fb      	ldrh	r3, [r7, #14]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	b2d8      	uxtb	r0, r3
 8001cc4:	88bb      	ldrh	r3, [r7, #4]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	8a3b      	ldrh	r3, [r7, #16]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	b2d9      	uxtb	r1, r3
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	89fb      	ldrh	r3, [r7, #14]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	b2dc      	uxtb	r4, r3
 8001cdc:	88bb      	ldrh	r3, [r7, #4]
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	8a3b      	ldrh	r3, [r7, #16]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	787b      	ldrb	r3, [r7, #1]
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	4613      	mov	r3, r2
 8001cee:	4622      	mov	r2, r4
 8001cf0:	f7ff fcae 	bl	8001650 <GMG12864_Draw_line>
	while (x_0 < y_0) {
 8001cf4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001cf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	f6ff af5f 	blt.w	8001bc0 <GMG12864_Draw_circle_filled+0xc6>
	}
}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd90      	pop	{r4, r7, pc}

08001d0c <GMG12864_Draw_triangle>:
/*--------------------------------Вывести закрашенную окружность-----------------------------------*/

/*-----------------------------------Вывести пустотелый треугольник--------------------------------*/
void GMG12864_Draw_triangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint8_t color) {
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	4604      	mov	r4, r0
 8001d14:	4608      	mov	r0, r1
 8001d16:	4611      	mov	r1, r2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4623      	mov	r3, r4
 8001d1c:	80fb      	strh	r3, [r7, #6]
 8001d1e:	4603      	mov	r3, r0
 8001d20:	80bb      	strh	r3, [r7, #4]
 8001d22:	460b      	mov	r3, r1
 8001d24:	807b      	strh	r3, [r7, #2]
 8001d26:	4613      	mov	r3, r2
 8001d28:	803b      	strh	r3, [r7, #0]
/// \param x_2 - вторая точка треугольника. Координата по оси "x"
/// \param y_2 - вторая точка треугольника. Координата по оси "y"
/// \param x_3 - третья точка треугольника. Координата по оси "x"
/// \param y_3 - третья точка треугольника. Координата по оси "y"

	GMG12864_Draw_line(x1, y1, x2, y2, color);
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	b2d8      	uxtb	r0, r3
 8001d2e:	88bb      	ldrh	r3, [r7, #4]
 8001d30:	b2d9      	uxtb	r1, r3
 8001d32:	887b      	ldrh	r3, [r7, #2]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	883b      	ldrh	r3, [r7, #0]
 8001d38:	b2dc      	uxtb	r4, r3
 8001d3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	4623      	mov	r3, r4
 8001d42:	f7ff fc85 	bl	8001650 <GMG12864_Draw_line>
	GMG12864_Draw_line(x2, y2, x3, y3, color);
 8001d46:	887b      	ldrh	r3, [r7, #2]
 8001d48:	b2d8      	uxtb	r0, r3
 8001d4a:	883b      	ldrh	r3, [r7, #0]
 8001d4c:	b2d9      	uxtb	r1, r3
 8001d4e:	8b3b      	ldrh	r3, [r7, #24]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	8bbb      	ldrh	r3, [r7, #28]
 8001d54:	b2dc      	uxtb	r4, r3
 8001d56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	4623      	mov	r3, r4
 8001d5e:	f7ff fc77 	bl	8001650 <GMG12864_Draw_line>
	GMG12864_Draw_line(x3, y3, x1, y1, color);
 8001d62:	8b3b      	ldrh	r3, [r7, #24]
 8001d64:	b2d8      	uxtb	r0, r3
 8001d66:	8bbb      	ldrh	r3, [r7, #28]
 8001d68:	b2d9      	uxtb	r1, r3
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	88bb      	ldrh	r3, [r7, #4]
 8001d70:	b2dc      	uxtb	r4, r3
 8001d72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	4623      	mov	r3, r4
 8001d7a:	f7ff fc69 	bl	8001650 <GMG12864_Draw_line>
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd90      	pop	{r4, r7, pc}

08001d86 <GMG12864_Draw_triangle_filled>:
/*-----------------------------------Вывести пустотелый треугольник--------------------------------*/

/*----------------------------------Вывести закрашенный треугольник--------------------------------*/
void GMG12864_Draw_triangle_filled(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint8_t color) {
 8001d86:	b590      	push	{r4, r7, lr}
 8001d88:	b08d      	sub	sp, #52	; 0x34
 8001d8a:	af02      	add	r7, sp, #8
 8001d8c:	4604      	mov	r4, r0
 8001d8e:	4608      	mov	r0, r1
 8001d90:	4611      	mov	r1, r2
 8001d92:	461a      	mov	r2, r3
 8001d94:	4623      	mov	r3, r4
 8001d96:	80fb      	strh	r3, [r7, #6]
 8001d98:	4603      	mov	r3, r0
 8001d9a:	80bb      	strh	r3, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	803b      	strh	r3, [r7, #0]
/// \param y_2 - вторая точка треугольника. Координата по оси "y"
/// \param x_3 - третья точка треугольника. Координата по оси "x"
/// \param y_3 - третья точка треугольника. Координата по оси "y"

#define ABS(x)   ((x) > 0 ? (x) : -(x))
	int16_t deltax = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	823b      	strh	r3, [r7, #16]
	int16_t deltay = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	81fb      	strh	r3, [r7, #14]
	int16_t x = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t y = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t xinc1 = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t xinc2 = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	843b      	strh	r3, [r7, #32]
	int16_t yinc1 = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	83fb      	strh	r3, [r7, #30]
	int16_t yinc2 = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	83bb      	strh	r3, [r7, #28]
	int16_t den = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	837b      	strh	r3, [r7, #26]
	int16_t num = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	833b      	strh	r3, [r7, #24]
	int16_t numadd = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	82fb      	strh	r3, [r7, #22]
	int16_t numpixels = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	82bb      	strh	r3, [r7, #20]
	int16_t curpixel = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 8001dd8:	887a      	ldrh	r2, [r7, #2]
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	bfb8      	it	lt
 8001de2:	425b      	neglt	r3, r3
 8001de4:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8001de6:	883a      	ldrh	r2, [r7, #0]
 8001de8:	88bb      	ldrh	r3, [r7, #4]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bfb8      	it	lt
 8001df0:	425b      	neglt	r3, r3
 8001df2:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8001df8:	88bb      	ldrh	r3, [r7, #4]
 8001dfa:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 8001dfc:	887a      	ldrh	r2, [r7, #2]
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d304      	bcc.n	8001e0e <GMG12864_Draw_triangle_filled+0x88>
		xinc1 = 1;
 8001e04:	2301      	movs	r3, #1
 8001e06:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	843b      	strh	r3, [r7, #32]
 8001e0c:	e005      	b.n	8001e1a <GMG12864_Draw_triangle_filled+0x94>
	} else {
		xinc1 = -1;
 8001e0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e12:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8001e14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e18:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8001e1a:	883a      	ldrh	r2, [r7, #0]
 8001e1c:	88bb      	ldrh	r3, [r7, #4]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d304      	bcc.n	8001e2c <GMG12864_Draw_triangle_filled+0xa6>
		yinc1 = 1;
 8001e22:	2301      	movs	r3, #1
 8001e24:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	83bb      	strh	r3, [r7, #28]
 8001e2a:	e005      	b.n	8001e38 <GMG12864_Draw_triangle_filled+0xb2>
	} else {
		yinc1 = -1;
 8001e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e30:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8001e32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e36:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) {
 8001e38:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001e3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	db10      	blt.n	8001e66 <GMG12864_Draw_triangle_filled+0xe0>
		xinc1 = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8001e4c:	8a3b      	ldrh	r3, [r7, #16]
 8001e4e:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8001e50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e54:	0fda      	lsrs	r2, r3, #31
 8001e56:	4413      	add	r3, r2
 8001e58:	105b      	asrs	r3, r3, #1
 8001e5a:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8001e5c:	89fb      	ldrh	r3, [r7, #14]
 8001e5e:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8001e60:	8a3b      	ldrh	r3, [r7, #16]
 8001e62:	82bb      	strh	r3, [r7, #20]
 8001e64:	e00f      	b.n	8001e86 <GMG12864_Draw_triangle_filled+0x100>
	} else {
		xinc2 = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8001e6e:	89fb      	ldrh	r3, [r7, #14]
 8001e70:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8001e72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e76:	0fda      	lsrs	r2, r3, #31
 8001e78:	4413      	add	r3, r2
 8001e7a:	105b      	asrs	r3, r3, #1
 8001e7c:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8001e7e:	8a3b      	ldrh	r3, [r7, #16]
 8001e80:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8001e82:	89fb      	ldrh	r3, [r7, #14]
 8001e84:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8001e86:	2300      	movs	r3, #0
 8001e88:	827b      	strh	r3, [r7, #18]
 8001e8a:	e037      	b.n	8001efc <GMG12864_Draw_triangle_filled+0x176>
		GMG12864_Draw_line(x, y, x3, y3, color);
 8001e8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e8e:	b2d8      	uxtb	r0, r3
 8001e90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e92:	b2d9      	uxtb	r1, r3
 8001e94:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001e9a:	b2dc      	uxtb	r4, r3
 8001e9c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	4623      	mov	r3, r4
 8001ea4:	f7ff fbd4 	bl	8001650 <GMG12864_Draw_line>

		num += numadd;
 8001ea8:	8b3a      	ldrh	r2, [r7, #24]
 8001eaa:	8afb      	ldrh	r3, [r7, #22]
 8001eac:	4413      	add	r3, r2
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8001eb2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001eb6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	db0e      	blt.n	8001edc <GMG12864_Draw_triangle_filled+0x156>
			num -= den;
 8001ebe:	8b3a      	ldrh	r2, [r7, #24]
 8001ec0:	8b7b      	ldrh	r3, [r7, #26]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8001ec8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001eca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ecc:	4413      	add	r3, r2
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 8001ed2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ed4:	8bfb      	ldrh	r3, [r7, #30]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8001edc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001ede:	8c3b      	ldrh	r3, [r7, #32]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 8001ee6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ee8:	8bbb      	ldrh	r3, [r7, #28]
 8001eea:	4413      	add	r3, r2
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8001ef0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	827b      	strh	r3, [r7, #18]
 8001efc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f00:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	ddc1      	ble.n	8001e8c <GMG12864_Draw_triangle_filled+0x106>
	}
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	372c      	adds	r7, #44	; 0x2c
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd90      	pop	{r4, r7, pc}
	...

08001f14 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001f1a:	f000 fd59 	bl	80029d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001f1e:	f000 fb9d 	bl	800265c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001f22:	f000 fc17 	bl	8002754 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001f26:	f000 fbdf 	bl	80026e8 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	GMG12864_Init();
 8001f2a:	f7fe fc53 	bl	80007d4 <GMG12864_Init>
//GMG12864_logo_demonstration();
    /*пример фигур(да, говнокод)*/
      //Фигуры на белом
    for (uint8_t i = 0; i < 8; i++) {
 8001f2e:	2300      	movs	r3, #0
 8001f30:	73fb      	strb	r3, [r7, #15]
 8001f32:	e18e      	b.n	8002252 <main+0x33e>
        for (uint8_t i = 0; i < 10; i++) {
 8001f34:	2300      	movs	r3, #0
 8001f36:	73bb      	strb	r3, [r7, #14]
 8001f38:	e05c      	b.n	8001ff4 <main+0xe0>
            GMG12864_Clean_Frame_buffer();
 8001f3a:	f7fe fc3f 	bl	80007bc <GMG12864_Clean_Frame_buffer>
            GMG12864_Draw_line(0, 0, 127, 63, 1);
 8001f3e:	2301      	movs	r3, #1
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	233f      	movs	r3, #63	; 0x3f
 8001f44:	227f      	movs	r2, #127	; 0x7f
 8001f46:	2100      	movs	r1, #0
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f7ff fb81 	bl	8001650 <GMG12864_Draw_line>
            GMG12864_Draw_line(0, 63, 127, 0, 1);
 8001f4e:	2301      	movs	r3, #1
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2300      	movs	r3, #0
 8001f54:	227f      	movs	r2, #127	; 0x7f
 8001f56:	213f      	movs	r1, #63	; 0x3f
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7ff fb79 	bl	8001650 <GMG12864_Draw_line>
            GMG12864_Draw_rectangle(80, 5, 30, 20, 1);
 8001f5e:	2301      	movs	r3, #1
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2314      	movs	r3, #20
 8001f64:	221e      	movs	r2, #30
 8001f66:	2105      	movs	r1, #5
 8001f68:	2050      	movs	r0, #80	; 0x50
 8001f6a:	f7ff fbe3 	bl	8001734 <GMG12864_Draw_rectangle>
            GMG12864_Draw_rectangle_filled(i, i, 50, 10, 1);
 8001f6e:	7bbb      	ldrb	r3, [r7, #14]
 8001f70:	b298      	uxth	r0, r3
 8001f72:	7bbb      	ldrb	r3, [r7, #14]
 8001f74:	b299      	uxth	r1, r3
 8001f76:	2301      	movs	r3, #1
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	230a      	movs	r3, #10
 8001f7c:	2232      	movs	r2, #50	; 0x32
 8001f7e:	f7ff fc61 	bl	8001844 <GMG12864_Draw_rectangle_filled>
            GMG12864_Draw_circle(70 + i, 50, 10, 1);
 8001f82:	7bbb      	ldrb	r3, [r7, #14]
 8001f84:	3346      	adds	r3, #70	; 0x46
 8001f86:	b2d8      	uxtb	r0, r3
 8001f88:	2301      	movs	r3, #1
 8001f8a:	220a      	movs	r2, #10
 8001f8c:	2132      	movs	r1, #50	; 0x32
 8001f8e:	f7ff fcaf 	bl	80018f0 <GMG12864_Draw_circle>
            GMG12864_Draw_circle_filled(50, 25, 10 + i, 1);
 8001f92:	7bbb      	ldrb	r3, [r7, #14]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	330a      	adds	r3, #10
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	b21a      	sxth	r2, r3
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	2119      	movs	r1, #25
 8001fa0:	2032      	movs	r0, #50	; 0x32
 8001fa2:	f7ff fdaa 	bl	8001afa <GMG12864_Draw_circle_filled>
            GMG12864_Draw_triangle(0, 63, 50 + i, 0, 127 - i, 20, 1);
 8001fa6:	7bbb      	ldrb	r3, [r7, #14]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	3332      	adds	r3, #50	; 0x32
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	7bbb      	ldrb	r3, [r7, #14]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	2101      	movs	r1, #1
 8001fba:	9102      	str	r1, [sp, #8]
 8001fbc:	2114      	movs	r1, #20
 8001fbe:	9101      	str	r1, [sp, #4]
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	213f      	movs	r1, #63	; 0x3f
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff fea0 	bl	8001d0c <GMG12864_Draw_triangle>
            GMG12864_Draw_triangle_filled(40, 10 + i, 75, 20, 100, 40, 1);
 8001fcc:	7bbb      	ldrb	r3, [r7, #14]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	330a      	adds	r3, #10
 8001fd2:	b299      	uxth	r1, r3
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	9302      	str	r3, [sp, #8]
 8001fd8:	2328      	movs	r3, #40	; 0x28
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	2364      	movs	r3, #100	; 0x64
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2314      	movs	r3, #20
 8001fe2:	224b      	movs	r2, #75	; 0x4b
 8001fe4:	2028      	movs	r0, #40	; 0x28
 8001fe6:	f7ff fece 	bl	8001d86 <GMG12864_Draw_triangle_filled>
            GMG12864_Update();
 8001fea:	f7fe fcb1 	bl	8000950 <GMG12864_Update>
        for (uint8_t i = 0; i < 10; i++) {
 8001fee:	7bbb      	ldrb	r3, [r7, #14]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	73bb      	strb	r3, [r7, #14]
 8001ff4:	7bbb      	ldrb	r3, [r7, #14]
 8001ff6:	2b09      	cmp	r3, #9
 8001ff8:	d99f      	bls.n	8001f3a <main+0x26>
        }
        for (uint8_t i = 10; i > 0; i--) {
 8001ffa:	230a      	movs	r3, #10
 8001ffc:	737b      	strb	r3, [r7, #13]
 8001ffe:	e05c      	b.n	80020ba <main+0x1a6>
            GMG12864_Clean_Frame_buffer();
 8002000:	f7fe fbdc 	bl	80007bc <GMG12864_Clean_Frame_buffer>
            GMG12864_Draw_line(0, 0, 127, 63, 1);
 8002004:	2301      	movs	r3, #1
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	233f      	movs	r3, #63	; 0x3f
 800200a:	227f      	movs	r2, #127	; 0x7f
 800200c:	2100      	movs	r1, #0
 800200e:	2000      	movs	r0, #0
 8002010:	f7ff fb1e 	bl	8001650 <GMG12864_Draw_line>
            GMG12864_Draw_line(0, 63, 127, 0, 1);
 8002014:	2301      	movs	r3, #1
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2300      	movs	r3, #0
 800201a:	227f      	movs	r2, #127	; 0x7f
 800201c:	213f      	movs	r1, #63	; 0x3f
 800201e:	2000      	movs	r0, #0
 8002020:	f7ff fb16 	bl	8001650 <GMG12864_Draw_line>
            GMG12864_Draw_rectangle(80, 5, 30, 20, 1);
 8002024:	2301      	movs	r3, #1
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2314      	movs	r3, #20
 800202a:	221e      	movs	r2, #30
 800202c:	2105      	movs	r1, #5
 800202e:	2050      	movs	r0, #80	; 0x50
 8002030:	f7ff fb80 	bl	8001734 <GMG12864_Draw_rectangle>
            GMG12864_Draw_rectangle_filled(i, i, 50, 10, 1);
 8002034:	7b7b      	ldrb	r3, [r7, #13]
 8002036:	b298      	uxth	r0, r3
 8002038:	7b7b      	ldrb	r3, [r7, #13]
 800203a:	b299      	uxth	r1, r3
 800203c:	2301      	movs	r3, #1
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	230a      	movs	r3, #10
 8002042:	2232      	movs	r2, #50	; 0x32
 8002044:	f7ff fbfe 	bl	8001844 <GMG12864_Draw_rectangle_filled>
            GMG12864_Draw_circle(70 + i, 50, 10, 1);
 8002048:	7b7b      	ldrb	r3, [r7, #13]
 800204a:	3346      	adds	r3, #70	; 0x46
 800204c:	b2d8      	uxtb	r0, r3
 800204e:	2301      	movs	r3, #1
 8002050:	220a      	movs	r2, #10
 8002052:	2132      	movs	r1, #50	; 0x32
 8002054:	f7ff fc4c 	bl	80018f0 <GMG12864_Draw_circle>
            GMG12864_Draw_circle_filled(50, 25, 10 + i, 1);
 8002058:	7b7b      	ldrb	r3, [r7, #13]
 800205a:	b29b      	uxth	r3, r3
 800205c:	330a      	adds	r3, #10
 800205e:	b29b      	uxth	r3, r3
 8002060:	b21a      	sxth	r2, r3
 8002062:	2301      	movs	r3, #1
 8002064:	2119      	movs	r1, #25
 8002066:	2032      	movs	r0, #50	; 0x32
 8002068:	f7ff fd47 	bl	8001afa <GMG12864_Draw_circle_filled>
            GMG12864_Draw_triangle(0, 63, 50 + i, 0, 127 - i, 20, 1);
 800206c:	7b7b      	ldrb	r3, [r7, #13]
 800206e:	b29b      	uxth	r3, r3
 8002070:	3332      	adds	r3, #50	; 0x32
 8002072:	b29a      	uxth	r2, r3
 8002074:	7b7b      	ldrb	r3, [r7, #13]
 8002076:	b29b      	uxth	r3, r3
 8002078:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800207c:	b29b      	uxth	r3, r3
 800207e:	2101      	movs	r1, #1
 8002080:	9102      	str	r1, [sp, #8]
 8002082:	2114      	movs	r1, #20
 8002084:	9101      	str	r1, [sp, #4]
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	2300      	movs	r3, #0
 800208a:	213f      	movs	r1, #63	; 0x3f
 800208c:	2000      	movs	r0, #0
 800208e:	f7ff fe3d 	bl	8001d0c <GMG12864_Draw_triangle>
            GMG12864_Draw_triangle_filled(40, 10 + i, 75, 20, 100, 40, 1);
 8002092:	7b7b      	ldrb	r3, [r7, #13]
 8002094:	b29b      	uxth	r3, r3
 8002096:	330a      	adds	r3, #10
 8002098:	b299      	uxth	r1, r3
 800209a:	2301      	movs	r3, #1
 800209c:	9302      	str	r3, [sp, #8]
 800209e:	2328      	movs	r3, #40	; 0x28
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	2364      	movs	r3, #100	; 0x64
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2314      	movs	r3, #20
 80020a8:	224b      	movs	r2, #75	; 0x4b
 80020aa:	2028      	movs	r0, #40	; 0x28
 80020ac:	f7ff fe6b 	bl	8001d86 <GMG12864_Draw_triangle_filled>
            GMG12864_Update();
 80020b0:	f7fe fc4e 	bl	8000950 <GMG12864_Update>
        for (uint8_t i = 10; i > 0; i--) {
 80020b4:	7b7b      	ldrb	r3, [r7, #13]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	737b      	strb	r3, [r7, #13]
 80020ba:	7b7b      	ldrb	r3, [r7, #13]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d19f      	bne.n	8002000 <main+0xec>
        }
        for (uint8_t i = 0; i < 20; i++) {
 80020c0:	2300      	movs	r3, #0
 80020c2:	733b      	strb	r3, [r7, #12]
 80020c4:	e05c      	b.n	8002180 <main+0x26c>
            GMG12864_Clean_Frame_buffer();
 80020c6:	f7fe fb79 	bl	80007bc <GMG12864_Clean_Frame_buffer>
            GMG12864_Draw_line(0, 0, 127, 63, 1);
 80020ca:	2301      	movs	r3, #1
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	233f      	movs	r3, #63	; 0x3f
 80020d0:	227f      	movs	r2, #127	; 0x7f
 80020d2:	2100      	movs	r1, #0
 80020d4:	2000      	movs	r0, #0
 80020d6:	f7ff fabb 	bl	8001650 <GMG12864_Draw_line>
            GMG12864_Draw_line(0, 63, 127, 0, 1);
 80020da:	2301      	movs	r3, #1
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	2300      	movs	r3, #0
 80020e0:	227f      	movs	r2, #127	; 0x7f
 80020e2:	213f      	movs	r1, #63	; 0x3f
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff fab3 	bl	8001650 <GMG12864_Draw_line>
            GMG12864_Draw_rectangle(80, 5, 30, 20, 1);
 80020ea:	2301      	movs	r3, #1
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2314      	movs	r3, #20
 80020f0:	221e      	movs	r2, #30
 80020f2:	2105      	movs	r1, #5
 80020f4:	2050      	movs	r0, #80	; 0x50
 80020f6:	f7ff fb1d 	bl	8001734 <GMG12864_Draw_rectangle>
            GMG12864_Draw_rectangle_filled(i, i, 50, 10, 1);
 80020fa:	7b3b      	ldrb	r3, [r7, #12]
 80020fc:	b298      	uxth	r0, r3
 80020fe:	7b3b      	ldrb	r3, [r7, #12]
 8002100:	b299      	uxth	r1, r3
 8002102:	2301      	movs	r3, #1
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	230a      	movs	r3, #10
 8002108:	2232      	movs	r2, #50	; 0x32
 800210a:	f7ff fb9b 	bl	8001844 <GMG12864_Draw_rectangle_filled>
            GMG12864_Draw_circle(70 + i, 50, 10, 1);
 800210e:	7b3b      	ldrb	r3, [r7, #12]
 8002110:	3346      	adds	r3, #70	; 0x46
 8002112:	b2d8      	uxtb	r0, r3
 8002114:	2301      	movs	r3, #1
 8002116:	220a      	movs	r2, #10
 8002118:	2132      	movs	r1, #50	; 0x32
 800211a:	f7ff fbe9 	bl	80018f0 <GMG12864_Draw_circle>
            GMG12864_Draw_circle_filled(50, 25, 10 + i, 1);
 800211e:	7b3b      	ldrb	r3, [r7, #12]
 8002120:	b29b      	uxth	r3, r3
 8002122:	330a      	adds	r3, #10
 8002124:	b29b      	uxth	r3, r3
 8002126:	b21a      	sxth	r2, r3
 8002128:	2301      	movs	r3, #1
 800212a:	2119      	movs	r1, #25
 800212c:	2032      	movs	r0, #50	; 0x32
 800212e:	f7ff fce4 	bl	8001afa <GMG12864_Draw_circle_filled>
            GMG12864_Draw_triangle(0, 63, 50 + i, 0, 127 - i, 20, 1);
 8002132:	7b3b      	ldrb	r3, [r7, #12]
 8002134:	b29b      	uxth	r3, r3
 8002136:	3332      	adds	r3, #50	; 0x32
 8002138:	b29a      	uxth	r2, r3
 800213a:	7b3b      	ldrb	r3, [r7, #12]
 800213c:	b29b      	uxth	r3, r3
 800213e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002142:	b29b      	uxth	r3, r3
 8002144:	2101      	movs	r1, #1
 8002146:	9102      	str	r1, [sp, #8]
 8002148:	2114      	movs	r1, #20
 800214a:	9101      	str	r1, [sp, #4]
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2300      	movs	r3, #0
 8002150:	213f      	movs	r1, #63	; 0x3f
 8002152:	2000      	movs	r0, #0
 8002154:	f7ff fdda 	bl	8001d0c <GMG12864_Draw_triangle>
            GMG12864_Draw_triangle_filled(40, 10 + i, 75, 20, 100, 40, 1);
 8002158:	7b3b      	ldrb	r3, [r7, #12]
 800215a:	b29b      	uxth	r3, r3
 800215c:	330a      	adds	r3, #10
 800215e:	b299      	uxth	r1, r3
 8002160:	2301      	movs	r3, #1
 8002162:	9302      	str	r3, [sp, #8]
 8002164:	2328      	movs	r3, #40	; 0x28
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	2364      	movs	r3, #100	; 0x64
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2314      	movs	r3, #20
 800216e:	224b      	movs	r2, #75	; 0x4b
 8002170:	2028      	movs	r0, #40	; 0x28
 8002172:	f7ff fe08 	bl	8001d86 <GMG12864_Draw_triangle_filled>
            GMG12864_Update();
 8002176:	f7fe fbeb 	bl	8000950 <GMG12864_Update>
        for (uint8_t i = 0; i < 20; i++) {
 800217a:	7b3b      	ldrb	r3, [r7, #12]
 800217c:	3301      	adds	r3, #1
 800217e:	733b      	strb	r3, [r7, #12]
 8002180:	7b3b      	ldrb	r3, [r7, #12]
 8002182:	2b13      	cmp	r3, #19
 8002184:	d99f      	bls.n	80020c6 <main+0x1b2>
        }
        for (uint8_t i = 20; i > 0; i--) {
 8002186:	2314      	movs	r3, #20
 8002188:	72fb      	strb	r3, [r7, #11]
 800218a:	e05c      	b.n	8002246 <main+0x332>
            GMG12864_Clean_Frame_buffer();
 800218c:	f7fe fb16 	bl	80007bc <GMG12864_Clean_Frame_buffer>
            GMG12864_Draw_line(0, 0, 127, 63, 1);
 8002190:	2301      	movs	r3, #1
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	233f      	movs	r3, #63	; 0x3f
 8002196:	227f      	movs	r2, #127	; 0x7f
 8002198:	2100      	movs	r1, #0
 800219a:	2000      	movs	r0, #0
 800219c:	f7ff fa58 	bl	8001650 <GMG12864_Draw_line>
            GMG12864_Draw_line(0, 63, 127, 0, 1);
 80021a0:	2301      	movs	r3, #1
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2300      	movs	r3, #0
 80021a6:	227f      	movs	r2, #127	; 0x7f
 80021a8:	213f      	movs	r1, #63	; 0x3f
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7ff fa50 	bl	8001650 <GMG12864_Draw_line>
            GMG12864_Draw_rectangle(80, 5, 30, 20, 1);
 80021b0:	2301      	movs	r3, #1
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	2314      	movs	r3, #20
 80021b6:	221e      	movs	r2, #30
 80021b8:	2105      	movs	r1, #5
 80021ba:	2050      	movs	r0, #80	; 0x50
 80021bc:	f7ff faba 	bl	8001734 <GMG12864_Draw_rectangle>
            GMG12864_Draw_rectangle_filled(i, i, 50, 10, 1);
 80021c0:	7afb      	ldrb	r3, [r7, #11]
 80021c2:	b298      	uxth	r0, r3
 80021c4:	7afb      	ldrb	r3, [r7, #11]
 80021c6:	b299      	uxth	r1, r3
 80021c8:	2301      	movs	r3, #1
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	230a      	movs	r3, #10
 80021ce:	2232      	movs	r2, #50	; 0x32
 80021d0:	f7ff fb38 	bl	8001844 <GMG12864_Draw_rectangle_filled>
            GMG12864_Draw_circle(70 + i, 50, 10, 1);
 80021d4:	7afb      	ldrb	r3, [r7, #11]
 80021d6:	3346      	adds	r3, #70	; 0x46
 80021d8:	b2d8      	uxtb	r0, r3
 80021da:	2301      	movs	r3, #1
 80021dc:	220a      	movs	r2, #10
 80021de:	2132      	movs	r1, #50	; 0x32
 80021e0:	f7ff fb86 	bl	80018f0 <GMG12864_Draw_circle>
            GMG12864_Draw_circle_filled(50, 25, 10 + i, 1);
 80021e4:	7afb      	ldrb	r3, [r7, #11]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	330a      	adds	r3, #10
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	2301      	movs	r3, #1
 80021f0:	2119      	movs	r1, #25
 80021f2:	2032      	movs	r0, #50	; 0x32
 80021f4:	f7ff fc81 	bl	8001afa <GMG12864_Draw_circle_filled>
            GMG12864_Draw_triangle(0, 63, 50 + i, 0, 127 - i, 20, 1);
 80021f8:	7afb      	ldrb	r3, [r7, #11]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3332      	adds	r3, #50	; 0x32
 80021fe:	b29a      	uxth	r2, r3
 8002200:	7afb      	ldrb	r3, [r7, #11]
 8002202:	b29b      	uxth	r3, r3
 8002204:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002208:	b29b      	uxth	r3, r3
 800220a:	2101      	movs	r1, #1
 800220c:	9102      	str	r1, [sp, #8]
 800220e:	2114      	movs	r1, #20
 8002210:	9101      	str	r1, [sp, #4]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2300      	movs	r3, #0
 8002216:	213f      	movs	r1, #63	; 0x3f
 8002218:	2000      	movs	r0, #0
 800221a:	f7ff fd77 	bl	8001d0c <GMG12864_Draw_triangle>
            GMG12864_Draw_triangle_filled(40, 10 + i, 75, 20, 100, 40, 1);
 800221e:	7afb      	ldrb	r3, [r7, #11]
 8002220:	b29b      	uxth	r3, r3
 8002222:	330a      	adds	r3, #10
 8002224:	b299      	uxth	r1, r3
 8002226:	2301      	movs	r3, #1
 8002228:	9302      	str	r3, [sp, #8]
 800222a:	2328      	movs	r3, #40	; 0x28
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	2364      	movs	r3, #100	; 0x64
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	2314      	movs	r3, #20
 8002234:	224b      	movs	r2, #75	; 0x4b
 8002236:	2028      	movs	r0, #40	; 0x28
 8002238:	f7ff fda5 	bl	8001d86 <GMG12864_Draw_triangle_filled>
            GMG12864_Update();
 800223c:	f7fe fb88 	bl	8000950 <GMG12864_Update>
        for (uint8_t i = 20; i > 0; i--) {
 8002240:	7afb      	ldrb	r3, [r7, #11]
 8002242:	3b01      	subs	r3, #1
 8002244:	72fb      	strb	r3, [r7, #11]
 8002246:	7afb      	ldrb	r3, [r7, #11]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d19f      	bne.n	800218c <main+0x278>
    for (uint8_t i = 0; i < 8; i++) {
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	3301      	adds	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	2b07      	cmp	r3, #7
 8002256:	f67f ae6d 	bls.w	8001f34 <main+0x20>
        }
    }
    //Фигуры на черном
    for (uint8_t i = 0; i < 8; i++) {
 800225a:	2300      	movs	r3, #0
 800225c:	72bb      	strb	r3, [r7, #10]
 800225e:	e1a0      	b.n	80025a2 <main+0x68e>
        for (uint8_t i = 0; i < 10; i++) {
 8002260:	2300      	movs	r3, #0
 8002262:	727b      	strb	r3, [r7, #9]
 8002264:	e060      	b.n	8002328 <main+0x414>
            memset(Frame_buffer, 0xFF, sizeof(Frame_buffer));
 8002266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800226a:	21ff      	movs	r1, #255	; 0xff
 800226c:	4898      	ldr	r0, [pc, #608]	; (80024d0 <main+0x5bc>)
 800226e:	f001 fd3b 	bl	8003ce8 <memset>
            GMG12864_Draw_line(0, 0, 127, 63, 0);
 8002272:	2300      	movs	r3, #0
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	233f      	movs	r3, #63	; 0x3f
 8002278:	227f      	movs	r2, #127	; 0x7f
 800227a:	2100      	movs	r1, #0
 800227c:	2000      	movs	r0, #0
 800227e:	f7ff f9e7 	bl	8001650 <GMG12864_Draw_line>
            GMG12864_Draw_line(0, 63, 127, 0, 0);
 8002282:	2300      	movs	r3, #0
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	2300      	movs	r3, #0
 8002288:	227f      	movs	r2, #127	; 0x7f
 800228a:	213f      	movs	r1, #63	; 0x3f
 800228c:	2000      	movs	r0, #0
 800228e:	f7ff f9df 	bl	8001650 <GMG12864_Draw_line>
            GMG12864_Draw_rectangle(80, 5, 30, 20, 0);
 8002292:	2300      	movs	r3, #0
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	2314      	movs	r3, #20
 8002298:	221e      	movs	r2, #30
 800229a:	2105      	movs	r1, #5
 800229c:	2050      	movs	r0, #80	; 0x50
 800229e:	f7ff fa49 	bl	8001734 <GMG12864_Draw_rectangle>
            GMG12864_Draw_rectangle_filled(i, i, 50, 10, 0);
 80022a2:	7a7b      	ldrb	r3, [r7, #9]
 80022a4:	b298      	uxth	r0, r3
 80022a6:	7a7b      	ldrb	r3, [r7, #9]
 80022a8:	b299      	uxth	r1, r3
 80022aa:	2300      	movs	r3, #0
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	230a      	movs	r3, #10
 80022b0:	2232      	movs	r2, #50	; 0x32
 80022b2:	f7ff fac7 	bl	8001844 <GMG12864_Draw_rectangle_filled>
            GMG12864_Draw_circle(70 + i, 50, 10, 0);
 80022b6:	7a7b      	ldrb	r3, [r7, #9]
 80022b8:	3346      	adds	r3, #70	; 0x46
 80022ba:	b2d8      	uxtb	r0, r3
 80022bc:	2300      	movs	r3, #0
 80022be:	220a      	movs	r2, #10
 80022c0:	2132      	movs	r1, #50	; 0x32
 80022c2:	f7ff fb15 	bl	80018f0 <GMG12864_Draw_circle>
            GMG12864_Draw_circle_filled(50, 25, 10 + i, 0);
 80022c6:	7a7b      	ldrb	r3, [r7, #9]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	330a      	adds	r3, #10
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	b21a      	sxth	r2, r3
 80022d0:	2300      	movs	r3, #0
 80022d2:	2119      	movs	r1, #25
 80022d4:	2032      	movs	r0, #50	; 0x32
 80022d6:	f7ff fc10 	bl	8001afa <GMG12864_Draw_circle_filled>
            GMG12864_Draw_triangle(0, 63, 50 + i, 0, 127 - i, 20, 0);
 80022da:	7a7b      	ldrb	r3, [r7, #9]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	3332      	adds	r3, #50	; 0x32
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	7a7b      	ldrb	r3, [r7, #9]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2100      	movs	r1, #0
 80022ee:	9102      	str	r1, [sp, #8]
 80022f0:	2114      	movs	r1, #20
 80022f2:	9101      	str	r1, [sp, #4]
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	2300      	movs	r3, #0
 80022f8:	213f      	movs	r1, #63	; 0x3f
 80022fa:	2000      	movs	r0, #0
 80022fc:	f7ff fd06 	bl	8001d0c <GMG12864_Draw_triangle>
            GMG12864_Draw_triangle_filled(40, 10 + i, 75, 20, 100, 40, 0);
 8002300:	7a7b      	ldrb	r3, [r7, #9]
 8002302:	b29b      	uxth	r3, r3
 8002304:	330a      	adds	r3, #10
 8002306:	b299      	uxth	r1, r3
 8002308:	2300      	movs	r3, #0
 800230a:	9302      	str	r3, [sp, #8]
 800230c:	2328      	movs	r3, #40	; 0x28
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	2364      	movs	r3, #100	; 0x64
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	2314      	movs	r3, #20
 8002316:	224b      	movs	r2, #75	; 0x4b
 8002318:	2028      	movs	r0, #40	; 0x28
 800231a:	f7ff fd34 	bl	8001d86 <GMG12864_Draw_triangle_filled>
            GMG12864_Update();
 800231e:	f7fe fb17 	bl	8000950 <GMG12864_Update>
        for (uint8_t i = 0; i < 10; i++) {
 8002322:	7a7b      	ldrb	r3, [r7, #9]
 8002324:	3301      	adds	r3, #1
 8002326:	727b      	strb	r3, [r7, #9]
 8002328:	7a7b      	ldrb	r3, [r7, #9]
 800232a:	2b09      	cmp	r3, #9
 800232c:	d99b      	bls.n	8002266 <main+0x352>
        }
        for (uint8_t i = 10; i > 0; i--) {
 800232e:	230a      	movs	r3, #10
 8002330:	723b      	strb	r3, [r7, #8]
 8002332:	e060      	b.n	80023f6 <main+0x4e2>
            memset(Frame_buffer, 0xFF, sizeof(Frame_buffer));
 8002334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002338:	21ff      	movs	r1, #255	; 0xff
 800233a:	4865      	ldr	r0, [pc, #404]	; (80024d0 <main+0x5bc>)
 800233c:	f001 fcd4 	bl	8003ce8 <memset>
            GMG12864_Draw_line(0, 0, 127, 63, 0);
 8002340:	2300      	movs	r3, #0
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	233f      	movs	r3, #63	; 0x3f
 8002346:	227f      	movs	r2, #127	; 0x7f
 8002348:	2100      	movs	r1, #0
 800234a:	2000      	movs	r0, #0
 800234c:	f7ff f980 	bl	8001650 <GMG12864_Draw_line>
            GMG12864_Draw_line(0, 63, 127, 0, 0);
 8002350:	2300      	movs	r3, #0
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	2300      	movs	r3, #0
 8002356:	227f      	movs	r2, #127	; 0x7f
 8002358:	213f      	movs	r1, #63	; 0x3f
 800235a:	2000      	movs	r0, #0
 800235c:	f7ff f978 	bl	8001650 <GMG12864_Draw_line>
            GMG12864_Draw_rectangle(80, 5, 30, 20, 0);
 8002360:	2300      	movs	r3, #0
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	2314      	movs	r3, #20
 8002366:	221e      	movs	r2, #30
 8002368:	2105      	movs	r1, #5
 800236a:	2050      	movs	r0, #80	; 0x50
 800236c:	f7ff f9e2 	bl	8001734 <GMG12864_Draw_rectangle>
            GMG12864_Draw_rectangle_filled(i, i, 50, 10, 0);
 8002370:	7a3b      	ldrb	r3, [r7, #8]
 8002372:	b298      	uxth	r0, r3
 8002374:	7a3b      	ldrb	r3, [r7, #8]
 8002376:	b299      	uxth	r1, r3
 8002378:	2300      	movs	r3, #0
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	230a      	movs	r3, #10
 800237e:	2232      	movs	r2, #50	; 0x32
 8002380:	f7ff fa60 	bl	8001844 <GMG12864_Draw_rectangle_filled>
            GMG12864_Draw_circle(70 + i, 50, 10, 0);
 8002384:	7a3b      	ldrb	r3, [r7, #8]
 8002386:	3346      	adds	r3, #70	; 0x46
 8002388:	b2d8      	uxtb	r0, r3
 800238a:	2300      	movs	r3, #0
 800238c:	220a      	movs	r2, #10
 800238e:	2132      	movs	r1, #50	; 0x32
 8002390:	f7ff faae 	bl	80018f0 <GMG12864_Draw_circle>
            GMG12864_Draw_circle_filled(50, 25, 10 + i, 0);
 8002394:	7a3b      	ldrb	r3, [r7, #8]
 8002396:	b29b      	uxth	r3, r3
 8002398:	330a      	adds	r3, #10
 800239a:	b29b      	uxth	r3, r3
 800239c:	b21a      	sxth	r2, r3
 800239e:	2300      	movs	r3, #0
 80023a0:	2119      	movs	r1, #25
 80023a2:	2032      	movs	r0, #50	; 0x32
 80023a4:	f7ff fba9 	bl	8001afa <GMG12864_Draw_circle_filled>
            GMG12864_Draw_triangle(0, 63, 50 + i, 0, 127 - i, 20, 0);
 80023a8:	7a3b      	ldrb	r3, [r7, #8]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3332      	adds	r3, #50	; 0x32
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	7a3b      	ldrb	r3, [r7, #8]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2100      	movs	r1, #0
 80023bc:	9102      	str	r1, [sp, #8]
 80023be:	2114      	movs	r1, #20
 80023c0:	9101      	str	r1, [sp, #4]
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2300      	movs	r3, #0
 80023c6:	213f      	movs	r1, #63	; 0x3f
 80023c8:	2000      	movs	r0, #0
 80023ca:	f7ff fc9f 	bl	8001d0c <GMG12864_Draw_triangle>
            GMG12864_Draw_triangle_filled(40, 10 + i, 75, 20, 100, 40, 0);
 80023ce:	7a3b      	ldrb	r3, [r7, #8]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	330a      	adds	r3, #10
 80023d4:	b299      	uxth	r1, r3
 80023d6:	2300      	movs	r3, #0
 80023d8:	9302      	str	r3, [sp, #8]
 80023da:	2328      	movs	r3, #40	; 0x28
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	2364      	movs	r3, #100	; 0x64
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2314      	movs	r3, #20
 80023e4:	224b      	movs	r2, #75	; 0x4b
 80023e6:	2028      	movs	r0, #40	; 0x28
 80023e8:	f7ff fccd 	bl	8001d86 <GMG12864_Draw_triangle_filled>
            GMG12864_Update();
 80023ec:	f7fe fab0 	bl	8000950 <GMG12864_Update>
        for (uint8_t i = 10; i > 0; i--) {
 80023f0:	7a3b      	ldrb	r3, [r7, #8]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	723b      	strb	r3, [r7, #8]
 80023f6:	7a3b      	ldrb	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d19b      	bne.n	8002334 <main+0x420>
        }
        for (uint8_t i = 0; i < 20; i++) {
 80023fc:	2300      	movs	r3, #0
 80023fe:	71fb      	strb	r3, [r7, #7]
 8002400:	e060      	b.n	80024c4 <main+0x5b0>
            memset(Frame_buffer, 0xFF, sizeof(Frame_buffer));
 8002402:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002406:	21ff      	movs	r1, #255	; 0xff
 8002408:	4831      	ldr	r0, [pc, #196]	; (80024d0 <main+0x5bc>)
 800240a:	f001 fc6d 	bl	8003ce8 <memset>
            GMG12864_Draw_line(0, 0, 127, 63, 0);
 800240e:	2300      	movs	r3, #0
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	233f      	movs	r3, #63	; 0x3f
 8002414:	227f      	movs	r2, #127	; 0x7f
 8002416:	2100      	movs	r1, #0
 8002418:	2000      	movs	r0, #0
 800241a:	f7ff f919 	bl	8001650 <GMG12864_Draw_line>
            GMG12864_Draw_line(0, 63, 127, 0, 0);
 800241e:	2300      	movs	r3, #0
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2300      	movs	r3, #0
 8002424:	227f      	movs	r2, #127	; 0x7f
 8002426:	213f      	movs	r1, #63	; 0x3f
 8002428:	2000      	movs	r0, #0
 800242a:	f7ff f911 	bl	8001650 <GMG12864_Draw_line>
            GMG12864_Draw_rectangle(80, 5, 30, 20, 0);
 800242e:	2300      	movs	r3, #0
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	2314      	movs	r3, #20
 8002434:	221e      	movs	r2, #30
 8002436:	2105      	movs	r1, #5
 8002438:	2050      	movs	r0, #80	; 0x50
 800243a:	f7ff f97b 	bl	8001734 <GMG12864_Draw_rectangle>
            GMG12864_Draw_rectangle_filled(i, i, 50, 10, 0);
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	b298      	uxth	r0, r3
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	b299      	uxth	r1, r3
 8002446:	2300      	movs	r3, #0
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	230a      	movs	r3, #10
 800244c:	2232      	movs	r2, #50	; 0x32
 800244e:	f7ff f9f9 	bl	8001844 <GMG12864_Draw_rectangle_filled>
            GMG12864_Draw_circle(70 + i, 50, 10, 0);
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	3346      	adds	r3, #70	; 0x46
 8002456:	b2d8      	uxtb	r0, r3
 8002458:	2300      	movs	r3, #0
 800245a:	220a      	movs	r2, #10
 800245c:	2132      	movs	r1, #50	; 0x32
 800245e:	f7ff fa47 	bl	80018f0 <GMG12864_Draw_circle>
            GMG12864_Draw_circle_filled(50, 25, 10 + i, 0);
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	b29b      	uxth	r3, r3
 8002466:	330a      	adds	r3, #10
 8002468:	b29b      	uxth	r3, r3
 800246a:	b21a      	sxth	r2, r3
 800246c:	2300      	movs	r3, #0
 800246e:	2119      	movs	r1, #25
 8002470:	2032      	movs	r0, #50	; 0x32
 8002472:	f7ff fb42 	bl	8001afa <GMG12864_Draw_circle_filled>
            GMG12864_Draw_triangle(0, 63, 50 + i, 0, 127 - i, 20, 0);
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	b29b      	uxth	r3, r3
 800247a:	3332      	adds	r3, #50	; 0x32
 800247c:	b29a      	uxth	r2, r3
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	b29b      	uxth	r3, r3
 8002482:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002486:	b29b      	uxth	r3, r3
 8002488:	2100      	movs	r1, #0
 800248a:	9102      	str	r1, [sp, #8]
 800248c:	2114      	movs	r1, #20
 800248e:	9101      	str	r1, [sp, #4]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	2300      	movs	r3, #0
 8002494:	213f      	movs	r1, #63	; 0x3f
 8002496:	2000      	movs	r0, #0
 8002498:	f7ff fc38 	bl	8001d0c <GMG12864_Draw_triangle>
            GMG12864_Draw_triangle_filled(40, 10 + i, 75, 20, 100, 40, 0);
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	330a      	adds	r3, #10
 80024a2:	b299      	uxth	r1, r3
 80024a4:	2300      	movs	r3, #0
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	2328      	movs	r3, #40	; 0x28
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	2364      	movs	r3, #100	; 0x64
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2314      	movs	r3, #20
 80024b2:	224b      	movs	r2, #75	; 0x4b
 80024b4:	2028      	movs	r0, #40	; 0x28
 80024b6:	f7ff fc66 	bl	8001d86 <GMG12864_Draw_triangle_filled>
            GMG12864_Update();
 80024ba:	f7fe fa49 	bl	8000950 <GMG12864_Update>
        for (uint8_t i = 0; i < 20; i++) {
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	3301      	adds	r3, #1
 80024c2:	71fb      	strb	r3, [r7, #7]
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	2b13      	cmp	r3, #19
 80024c8:	d99b      	bls.n	8002402 <main+0x4ee>
        }
        for (uint8_t i = 20; i > 0; i--) {
 80024ca:	2314      	movs	r3, #20
 80024cc:	71bb      	strb	r3, [r7, #6]
 80024ce:	e062      	b.n	8002596 <main+0x682>
 80024d0:	20000110 	.word	0x20000110
            memset(Frame_buffer, 0xFF, sizeof(Frame_buffer));
 80024d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024d8:	21ff      	movs	r1, #255	; 0xff
 80024da:	4858      	ldr	r0, [pc, #352]	; (800263c <main+0x728>)
 80024dc:	f001 fc04 	bl	8003ce8 <memset>
            GMG12864_Draw_line(0, 0, 127, 63, 0);
 80024e0:	2300      	movs	r3, #0
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	233f      	movs	r3, #63	; 0x3f
 80024e6:	227f      	movs	r2, #127	; 0x7f
 80024e8:	2100      	movs	r1, #0
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7ff f8b0 	bl	8001650 <GMG12864_Draw_line>
            GMG12864_Draw_line(0, 63, 127, 0, 0);
 80024f0:	2300      	movs	r3, #0
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2300      	movs	r3, #0
 80024f6:	227f      	movs	r2, #127	; 0x7f
 80024f8:	213f      	movs	r1, #63	; 0x3f
 80024fa:	2000      	movs	r0, #0
 80024fc:	f7ff f8a8 	bl	8001650 <GMG12864_Draw_line>
            GMG12864_Draw_rectangle(80, 5, 30, 20, 0);
 8002500:	2300      	movs	r3, #0
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2314      	movs	r3, #20
 8002506:	221e      	movs	r2, #30
 8002508:	2105      	movs	r1, #5
 800250a:	2050      	movs	r0, #80	; 0x50
 800250c:	f7ff f912 	bl	8001734 <GMG12864_Draw_rectangle>
            GMG12864_Draw_rectangle_filled(i, i, 50, 10, 0);
 8002510:	79bb      	ldrb	r3, [r7, #6]
 8002512:	b298      	uxth	r0, r3
 8002514:	79bb      	ldrb	r3, [r7, #6]
 8002516:	b299      	uxth	r1, r3
 8002518:	2300      	movs	r3, #0
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	230a      	movs	r3, #10
 800251e:	2232      	movs	r2, #50	; 0x32
 8002520:	f7ff f990 	bl	8001844 <GMG12864_Draw_rectangle_filled>
            GMG12864_Draw_circle(70 + i, 50, 10, 0);
 8002524:	79bb      	ldrb	r3, [r7, #6]
 8002526:	3346      	adds	r3, #70	; 0x46
 8002528:	b2d8      	uxtb	r0, r3
 800252a:	2300      	movs	r3, #0
 800252c:	220a      	movs	r2, #10
 800252e:	2132      	movs	r1, #50	; 0x32
 8002530:	f7ff f9de 	bl	80018f0 <GMG12864_Draw_circle>
            GMG12864_Draw_circle_filled(50, 25, 10 + i, 0);
 8002534:	79bb      	ldrb	r3, [r7, #6]
 8002536:	b29b      	uxth	r3, r3
 8002538:	330a      	adds	r3, #10
 800253a:	b29b      	uxth	r3, r3
 800253c:	b21a      	sxth	r2, r3
 800253e:	2300      	movs	r3, #0
 8002540:	2119      	movs	r1, #25
 8002542:	2032      	movs	r0, #50	; 0x32
 8002544:	f7ff fad9 	bl	8001afa <GMG12864_Draw_circle_filled>
            GMG12864_Draw_triangle(0, 63, 50 + i, 0, 127 - i, 20, 0);
 8002548:	79bb      	ldrb	r3, [r7, #6]
 800254a:	b29b      	uxth	r3, r3
 800254c:	3332      	adds	r3, #50	; 0x32
 800254e:	b29a      	uxth	r2, r3
 8002550:	79bb      	ldrb	r3, [r7, #6]
 8002552:	b29b      	uxth	r3, r3
 8002554:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002558:	b29b      	uxth	r3, r3
 800255a:	2100      	movs	r1, #0
 800255c:	9102      	str	r1, [sp, #8]
 800255e:	2114      	movs	r1, #20
 8002560:	9101      	str	r1, [sp, #4]
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	2300      	movs	r3, #0
 8002566:	213f      	movs	r1, #63	; 0x3f
 8002568:	2000      	movs	r0, #0
 800256a:	f7ff fbcf 	bl	8001d0c <GMG12864_Draw_triangle>
            GMG12864_Draw_triangle_filled(40, 10 + i, 75, 20, 100, 40, 0);
 800256e:	79bb      	ldrb	r3, [r7, #6]
 8002570:	b29b      	uxth	r3, r3
 8002572:	330a      	adds	r3, #10
 8002574:	b299      	uxth	r1, r3
 8002576:	2300      	movs	r3, #0
 8002578:	9302      	str	r3, [sp, #8]
 800257a:	2328      	movs	r3, #40	; 0x28
 800257c:	9301      	str	r3, [sp, #4]
 800257e:	2364      	movs	r3, #100	; 0x64
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	2314      	movs	r3, #20
 8002584:	224b      	movs	r2, #75	; 0x4b
 8002586:	2028      	movs	r0, #40	; 0x28
 8002588:	f7ff fbfd 	bl	8001d86 <GMG12864_Draw_triangle_filled>
            GMG12864_Update();
 800258c:	f7fe f9e0 	bl	8000950 <GMG12864_Update>
        for (uint8_t i = 20; i > 0; i--) {
 8002590:	79bb      	ldrb	r3, [r7, #6]
 8002592:	3b01      	subs	r3, #1
 8002594:	71bb      	strb	r3, [r7, #6]
 8002596:	79bb      	ldrb	r3, [r7, #6]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d19b      	bne.n	80024d4 <main+0x5c0>
    for (uint8_t i = 0; i < 8; i++) {
 800259c:	7abb      	ldrb	r3, [r7, #10]
 800259e:	3301      	adds	r3, #1
 80025a0:	72bb      	strb	r3, [r7, #10]
 80025a2:	7abb      	ldrb	r3, [r7, #10]
 80025a4:	2b07      	cmp	r3, #7
 80025a6:	f67f ae5b 	bls.w	8002260 <main+0x34c>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		Counter++;
 80025aa:	4b25      	ldr	r3, [pc, #148]	; (8002640 <main+0x72c>)
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	3301      	adds	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	4b23      	ldr	r3, [pc, #140]	; (8002640 <main+0x72c>)
 80025b4:	801a      	strh	r2, [r3, #0]
		if (Counter == 5000) {
 80025b6:	4b22      	ldr	r3, [pc, #136]	; (8002640 <main+0x72c>)
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d102      	bne.n	80025c8 <main+0x6b4>
			Counter = 0;
 80025c2:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <main+0x72c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	801a      	strh	r2, [r3, #0]
		}
		Value_for_plot = GMG12864_Value_for_Plot(0, 5000, Counter);
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <main+0x72c>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fd fe7b 	bl	80002c8 <__aeabi_ui2f>
 80025d2:	4603      	mov	r3, r0
 80025d4:	461a      	mov	r2, r3
 80025d6:	f241 3188 	movw	r1, #5000	; 0x1388
 80025da:	2000      	movs	r0, #0
 80025dc:	f7fe fcee 	bl	8000fbc <GMG12864_Value_for_Plot>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b17      	ldr	r3, [pc, #92]	; (8002644 <main+0x730>)
 80025e6:	701a      	strb	r2, [r3, #0]
		GMG12864_Fill_the_array_Plot(&cnt, arr, size_array, Value_for_plot);
 80025e8:	4b17      	ldr	r3, [pc, #92]	; (8002648 <main+0x734>)
 80025ea:	781a      	ldrb	r2, [r3, #0]
 80025ec:	4b15      	ldr	r3, [pc, #84]	; (8002644 <main+0x730>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	4916      	ldr	r1, [pc, #88]	; (800264c <main+0x738>)
 80025f2:	4817      	ldr	r0, [pc, #92]	; (8002650 <main+0x73c>)
 80025f4:	f7fe fd80 	bl	80010f8 <GMG12864_Fill_the_array_Plot>
		GMG12864_Generate_a_Graph(&cnt, arr, size_array, 0, 5000, 1, 0, 1);
 80025f8:	4b13      	ldr	r3, [pc, #76]	; (8002648 <main+0x734>)
 80025fa:	781a      	ldrb	r2, [r3, #0]
 80025fc:	2301      	movs	r3, #1
 80025fe:	9303      	str	r3, [sp, #12]
 8002600:	2300      	movs	r3, #0
 8002602:	9302      	str	r3, [sp, #8]
 8002604:	2301      	movs	r3, #1
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	f241 3388 	movw	r3, #5000	; 0x1388
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	2300      	movs	r3, #0
 8002610:	490e      	ldr	r1, [pc, #56]	; (800264c <main+0x738>)
 8002612:	480f      	ldr	r0, [pc, #60]	; (8002650 <main+0x73c>)
 8002614:	f7fe fde6 	bl	80011e4 <GMG12864_Generate_a_Graph>
		sprintf(tx_buffer, "%d", Counter);
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <main+0x72c>)
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	490d      	ldr	r1, [pc, #52]	; (8002654 <main+0x740>)
 8002620:	480d      	ldr	r0, [pc, #52]	; (8002658 <main+0x744>)
 8002622:	f001 fb69 	bl	8003cf8 <siprintf>
		GMG12864_Decode_UTF8(0, 55, 1, 0, tx_buffer);
 8002626:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <main+0x744>)
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	2300      	movs	r3, #0
 800262c:	2201      	movs	r2, #1
 800262e:	2137      	movs	r1, #55	; 0x37
 8002630:	2000      	movs	r0, #0
 8002632:	f7fe fb21 	bl	8000c78 <GMG12864_Decode_UTF8>
		GMG12864_Update();
 8002636:	f7fe f98b 	bl	8000950 <GMG12864_Update>
		Counter++;
 800263a:	e7b6      	b.n	80025aa <main+0x696>
 800263c:	20000110 	.word	0x20000110
 8002640:	2000057a 	.word	0x2000057a
 8002644:	2000057c 	.word	0x2000057c
 8002648:	08004618 	.word	0x08004618
 800264c:	20000514 	.word	0x20000514
 8002650:	20000510 	.word	0x20000510
 8002654:	08004604 	.word	0x08004604
 8002658:	20000090 	.word	0x20000090

0800265c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800265c:	b580      	push	{r7, lr}
 800265e:	b090      	sub	sp, #64	; 0x40
 8002660:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002662:	f107 0318 	add.w	r3, r7, #24
 8002666:	2228      	movs	r2, #40	; 0x28
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f001 fb3c 	bl	8003ce8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	60da      	str	r2, [r3, #12]
 800267c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800267e:	2301      	movs	r3, #1
 8002680:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002686:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002688:	2300      	movs	r3, #0
 800268a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800268c:	2301      	movs	r3, #1
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002690:	2302      	movs	r3, #2
 8002692:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002698:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800269a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800269e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80026a0:	f107 0318 	add.w	r3, r7, #24
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fc99 	bl	8002fdc <HAL_RCC_OscConfig>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <SystemClock_Config+0x58>
		Error_Handler();
 80026b0:	f000 f88e 	bl	80027d0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026b4:	230f      	movs	r3, #15
 80026b6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026b8:	2302      	movs	r3, #2
 80026ba:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	2102      	movs	r1, #2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 ff04 	bl	80034dc <HAL_RCC_ClockConfig>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <SystemClock_Config+0x82>
		Error_Handler();
 80026da:	f000 f879 	bl	80027d0 <Error_Handler>
	}
}
 80026de:	bf00      	nop
 80026e0:	3740      	adds	r7, #64	; 0x40
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <MX_SPI1_Init+0x64>)
 80026ee:	4a18      	ldr	r2, [pc, #96]	; (8002750 <MX_SPI1_Init+0x68>)
 80026f0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80026f2:	4b16      	ldr	r3, [pc, #88]	; (800274c <MX_SPI1_Init+0x64>)
 80026f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026f8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026fa:	4b14      	ldr	r3, [pc, #80]	; (800274c <MX_SPI1_Init+0x64>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <MX_SPI1_Init+0x64>)
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002706:	4b11      	ldr	r3, [pc, #68]	; (800274c <MX_SPI1_Init+0x64>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <MX_SPI1_Init+0x64>)
 800270e:	2200      	movs	r2, #0
 8002710:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <MX_SPI1_Init+0x64>)
 8002714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002718:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <MX_SPI1_Init+0x64>)
 800271c:	2208      	movs	r2, #8
 800271e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002720:	4b0a      	ldr	r3, [pc, #40]	; (800274c <MX_SPI1_Init+0x64>)
 8002722:	2200      	movs	r2, #0
 8002724:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <MX_SPI1_Init+0x64>)
 8002728:	2200      	movs	r2, #0
 800272a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800272c:	4b07      	ldr	r3, [pc, #28]	; (800274c <MX_SPI1_Init+0x64>)
 800272e:	2200      	movs	r2, #0
 8002730:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <MX_SPI1_Init+0x64>)
 8002734:	220a      	movs	r2, #10
 8002736:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002738:	4804      	ldr	r0, [pc, #16]	; (800274c <MX_SPI1_Init+0x64>)
 800273a:	f001 f837 	bl	80037ac <HAL_SPI_Init>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_SPI1_Init+0x60>
		Error_Handler();
 8002744:	f000 f844 	bl	80027d0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}
 800274c:	2000058c 	.word	0x2000058c
 8002750:	40013000 	.word	0x40013000

08002754 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800275a:	f107 0308 	add.w	r3, r7, #8
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002768:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <MX_GPIO_Init+0x74>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <MX_GPIO_Init+0x74>)
 800276e:	f043 0320 	orr.w	r3, r3, #32
 8002772:	6193      	str	r3, [r2, #24]
 8002774:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <MX_GPIO_Init+0x74>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	607b      	str	r3, [r7, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <MX_GPIO_Init+0x74>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4a10      	ldr	r2, [pc, #64]	; (80027c8 <MX_GPIO_Init+0x74>)
 8002786:	f043 0304 	orr.w	r3, r3, #4
 800278a:	6193      	str	r3, [r2, #24]
 800278c:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <MX_GPIO_Init+0x74>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, CS_Pin | RST_Pin | DC_Pin, GPIO_PIN_RESET);
 8002798:	2200      	movs	r2, #0
 800279a:	2107      	movs	r1, #7
 800279c:	480b      	ldr	r0, [pc, #44]	; (80027cc <MX_GPIO_Init+0x78>)
 800279e:	f000 fc05 	bl	8002fac <HAL_GPIO_WritePin>

	/*Configure GPIO pins : CS_Pin RST_Pin DC_Pin */
	GPIO_InitStruct.Pin = CS_Pin | RST_Pin | DC_Pin;
 80027a2:	2307      	movs	r3, #7
 80027a4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a6:	2301      	movs	r3, #1
 80027a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ae:	2302      	movs	r3, #2
 80027b0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b2:	f107 0308 	add.w	r3, r7, #8
 80027b6:	4619      	mov	r1, r3
 80027b8:	4804      	ldr	r0, [pc, #16]	; (80027cc <MX_GPIO_Init+0x78>)
 80027ba:	f000 fa73 	bl	8002ca4 <HAL_GPIO_Init>

}
 80027be:	bf00      	nop
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40010800 	.word	0x40010800

080027d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d4:	b672      	cpsid	i
}
 80027d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80027d8:	e7fe      	b.n	80027d8 <Error_Handler+0x8>
	...

080027dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_MspInit+0x5c>)
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	4a14      	ldr	r2, [pc, #80]	; (8002838 <HAL_MspInit+0x5c>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6193      	str	r3, [r2, #24]
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_MspInit+0x5c>)
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_MspInit+0x5c>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <HAL_MspInit+0x5c>)
 8002800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002804:	61d3      	str	r3, [r2, #28]
 8002806:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <HAL_MspInit+0x5c>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_MspInit+0x60>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	4a04      	ldr	r2, [pc, #16]	; (800283c <HAL_MspInit+0x60>)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800282e:	bf00      	nop
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	40021000 	.word	0x40021000
 800283c:	40010000 	.word	0x40010000

08002840 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	f107 0310 	add.w	r3, r7, #16
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a15      	ldr	r2, [pc, #84]	; (80028b0 <HAL_SPI_MspInit+0x70>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d123      	bne.n	80028a8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002860:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <HAL_SPI_MspInit+0x74>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	4a13      	ldr	r2, [pc, #76]	; (80028b4 <HAL_SPI_MspInit+0x74>)
 8002866:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800286a:	6193      	str	r3, [r2, #24]
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <HAL_SPI_MspInit+0x74>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002878:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <HAL_SPI_MspInit+0x74>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	4a0d      	ldr	r2, [pc, #52]	; (80028b4 <HAL_SPI_MspInit+0x74>)
 800287e:	f043 0304 	orr.w	r3, r3, #4
 8002882:	6193      	str	r3, [r2, #24]
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_SPI_MspInit+0x74>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002890:	23a0      	movs	r3, #160	; 0xa0
 8002892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002894:	2302      	movs	r3, #2
 8002896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002898:	2303      	movs	r3, #3
 800289a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289c:	f107 0310 	add.w	r3, r7, #16
 80028a0:	4619      	mov	r1, r3
 80028a2:	4805      	ldr	r0, [pc, #20]	; (80028b8 <HAL_SPI_MspInit+0x78>)
 80028a4:	f000 f9fe 	bl	8002ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80028a8:	bf00      	nop
 80028aa:	3720      	adds	r7, #32
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40013000 	.word	0x40013000
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40010800 	.word	0x40010800

080028bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <NMI_Handler+0x4>

080028c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c6:	e7fe      	b.n	80028c6 <HardFault_Handler+0x4>

080028c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <MemManage_Handler+0x4>

080028ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d2:	e7fe      	b.n	80028d2 <BusFault_Handler+0x4>

080028d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <UsageFault_Handler+0x4>

080028da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002902:	f000 f8ab 	bl	8002a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002914:	4a14      	ldr	r2, [pc, #80]	; (8002968 <_sbrk+0x5c>)
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <_sbrk+0x60>)
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002920:	4b13      	ldr	r3, [pc, #76]	; (8002970 <_sbrk+0x64>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <_sbrk+0x64>)
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <_sbrk+0x68>)
 800292c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <_sbrk+0x64>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	429a      	cmp	r2, r3
 800293a:	d207      	bcs.n	800294c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800293c:	f001 f9aa 	bl	8003c94 <__errno>
 8002940:	4603      	mov	r3, r0
 8002942:	220c      	movs	r2, #12
 8002944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
 800294a:	e009      	b.n	8002960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800294c:	4b08      	ldr	r3, [pc, #32]	; (8002970 <_sbrk+0x64>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <_sbrk+0x64>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	4a05      	ldr	r2, [pc, #20]	; (8002970 <_sbrk+0x64>)
 800295c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800295e:	68fb      	ldr	r3, [r7, #12]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20005000 	.word	0x20005000
 800296c:	00000400 	.word	0x00000400
 8002970:	20000580 	.word	0x20000580
 8002974:	200005f8 	.word	0x200005f8

08002978 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002984:	480c      	ldr	r0, [pc, #48]	; (80029b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002986:	490d      	ldr	r1, [pc, #52]	; (80029bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002988:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800298c:	e002      	b.n	8002994 <LoopCopyDataInit>

0800298e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002992:	3304      	adds	r3, #4

08002994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002998:	d3f9      	bcc.n	800298e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800299c:	4c0a      	ldr	r4, [pc, #40]	; (80029c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800299e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a0:	e001      	b.n	80029a6 <LoopFillZerobss>

080029a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a4:	3204      	adds	r2, #4

080029a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a8:	d3fb      	bcc.n	80029a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029aa:	f7ff ffe5 	bl	8002978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ae:	f001 f977 	bl	8003ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029b2:	f7ff faaf 	bl	8001f14 <main>
  bx lr
 80029b6:	4770      	bx	lr
  ldr r0, =_sdata
 80029b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029bc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80029c0:	08004b7c 	.word	0x08004b7c
  ldr r2, =_sbss
 80029c4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80029c8:	200005f8 	.word	0x200005f8

080029cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029cc:	e7fe      	b.n	80029cc <ADC1_2_IRQHandler>
	...

080029d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_Init+0x28>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <HAL_Init+0x28>)
 80029da:	f043 0310 	orr.w	r3, r3, #16
 80029de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e0:	2003      	movs	r0, #3
 80029e2:	f000 f92b 	bl	8002c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029e6:	200f      	movs	r0, #15
 80029e8:	f000 f808 	bl	80029fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029ec:	f7ff fef6 	bl	80027dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40022000 	.word	0x40022000

080029fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_InitTick+0x54>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_InitTick+0x58>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 f935 	bl	8002c8a <HAL_SYSTICK_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00e      	b.n	8002a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b0f      	cmp	r3, #15
 8002a2e:	d80a      	bhi.n	8002a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a30:	2200      	movs	r2, #0
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
 8002a38:	f000 f90b 	bl	8002c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a3c:	4a06      	ldr	r2, [pc, #24]	; (8002a58 <HAL_InitTick+0x5c>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e000      	b.n	8002a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000004 	.word	0x20000004
 8002a54:	2000000c 	.word	0x2000000c
 8002a58:	20000008 	.word	0x20000008

08002a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_IncTick+0x1c>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_IncTick+0x20>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	4a03      	ldr	r2, [pc, #12]	; (8002a7c <HAL_IncTick+0x20>)
 8002a6e:	6013      	str	r3, [r2, #0]
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	2000000c 	.word	0x2000000c
 8002a7c:	200005e4 	.word	0x200005e4

08002a80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return uwTick;
 8002a84:	4b02      	ldr	r3, [pc, #8]	; (8002a90 <HAL_GetTick+0x10>)
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	200005e4 	.word	0x200005e4

08002a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a9c:	f7ff fff0 	bl	8002a80 <HAL_GetTick>
 8002aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d005      	beq.n	8002aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_Delay+0x44>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aba:	bf00      	nop
 8002abc:	f7ff ffe0 	bl	8002a80 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d8f7      	bhi.n	8002abc <HAL_Delay+0x28>
  {
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	2000000c 	.word	0x2000000c

08002adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <__NVIC_SetPriorityGrouping+0x44>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af8:	4013      	ands	r3, r2
 8002afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0e:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <__NVIC_SetPriorityGrouping+0x44>)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	60d3      	str	r3, [r2, #12]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <__NVIC_GetPriorityGrouping+0x18>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	0a1b      	lsrs	r3, r3, #8
 8002b2e:	f003 0307 	and.w	r3, r3, #7
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	6039      	str	r1, [r7, #0]
 8002b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	db0a      	blt.n	8002b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	490c      	ldr	r1, [pc, #48]	; (8002b8c <__NVIC_SetPriority+0x4c>)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	0112      	lsls	r2, r2, #4
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	440b      	add	r3, r1
 8002b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b68:	e00a      	b.n	8002b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	4908      	ldr	r1, [pc, #32]	; (8002b90 <__NVIC_SetPriority+0x50>)
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	3b04      	subs	r3, #4
 8002b78:	0112      	lsls	r2, r2, #4
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	761a      	strb	r2, [r3, #24]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000e100 	.word	0xe000e100
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	; 0x24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f1c3 0307 	rsb	r3, r3, #7
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	bf28      	it	cs
 8002bb2:	2304      	movcs	r3, #4
 8002bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d902      	bls.n	8002bc4 <NVIC_EncodePriority+0x30>
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3b03      	subs	r3, #3
 8002bc2:	e000      	b.n	8002bc6 <NVIC_EncodePriority+0x32>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43da      	mvns	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	43d9      	mvns	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	4313      	orrs	r3, r2
         );
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3724      	adds	r7, #36	; 0x24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c08:	d301      	bcc.n	8002c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e00f      	b.n	8002c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <SysTick_Config+0x40>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c16:	210f      	movs	r1, #15
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1c:	f7ff ff90 	bl	8002b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <SysTick_Config+0x40>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c26:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <SysTick_Config+0x40>)
 8002c28:	2207      	movs	r2, #7
 8002c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	e000e010 	.word	0xe000e010

08002c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff ff49 	bl	8002adc <__NVIC_SetPriorityGrouping>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	4603      	mov	r3, r0
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c64:	f7ff ff5e 	bl	8002b24 <__NVIC_GetPriorityGrouping>
 8002c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	6978      	ldr	r0, [r7, #20]
 8002c70:	f7ff ff90 	bl	8002b94 <NVIC_EncodePriority>
 8002c74:	4602      	mov	r2, r0
 8002c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff5f 	bl	8002b40 <__NVIC_SetPriority>
}
 8002c82:	bf00      	nop
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ffb0 	bl	8002bf8 <SysTick_Config>
 8002c98:	4603      	mov	r3, r0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b08b      	sub	sp, #44	; 0x2c
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb6:	e169      	b.n	8002f8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cb8:	2201      	movs	r2, #1
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	f040 8158 	bne.w	8002f86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4a9a      	ldr	r2, [pc, #616]	; (8002f44 <HAL_GPIO_Init+0x2a0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d05e      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002ce0:	4a98      	ldr	r2, [pc, #608]	; (8002f44 <HAL_GPIO_Init+0x2a0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d875      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002ce6:	4a98      	ldr	r2, [pc, #608]	; (8002f48 <HAL_GPIO_Init+0x2a4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d058      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002cec:	4a96      	ldr	r2, [pc, #600]	; (8002f48 <HAL_GPIO_Init+0x2a4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d86f      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002cf2:	4a96      	ldr	r2, [pc, #600]	; (8002f4c <HAL_GPIO_Init+0x2a8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d052      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002cf8:	4a94      	ldr	r2, [pc, #592]	; (8002f4c <HAL_GPIO_Init+0x2a8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d869      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002cfe:	4a94      	ldr	r2, [pc, #592]	; (8002f50 <HAL_GPIO_Init+0x2ac>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d04c      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002d04:	4a92      	ldr	r2, [pc, #584]	; (8002f50 <HAL_GPIO_Init+0x2ac>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d863      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002d0a:	4a92      	ldr	r2, [pc, #584]	; (8002f54 <HAL_GPIO_Init+0x2b0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d046      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002d10:	4a90      	ldr	r2, [pc, #576]	; (8002f54 <HAL_GPIO_Init+0x2b0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d85d      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002d16:	2b12      	cmp	r3, #18
 8002d18:	d82a      	bhi.n	8002d70 <HAL_GPIO_Init+0xcc>
 8002d1a:	2b12      	cmp	r3, #18
 8002d1c:	d859      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002d1e:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <HAL_GPIO_Init+0x80>)
 8002d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d24:	08002d9f 	.word	0x08002d9f
 8002d28:	08002d79 	.word	0x08002d79
 8002d2c:	08002d8b 	.word	0x08002d8b
 8002d30:	08002dcd 	.word	0x08002dcd
 8002d34:	08002dd3 	.word	0x08002dd3
 8002d38:	08002dd3 	.word	0x08002dd3
 8002d3c:	08002dd3 	.word	0x08002dd3
 8002d40:	08002dd3 	.word	0x08002dd3
 8002d44:	08002dd3 	.word	0x08002dd3
 8002d48:	08002dd3 	.word	0x08002dd3
 8002d4c:	08002dd3 	.word	0x08002dd3
 8002d50:	08002dd3 	.word	0x08002dd3
 8002d54:	08002dd3 	.word	0x08002dd3
 8002d58:	08002dd3 	.word	0x08002dd3
 8002d5c:	08002dd3 	.word	0x08002dd3
 8002d60:	08002dd3 	.word	0x08002dd3
 8002d64:	08002dd3 	.word	0x08002dd3
 8002d68:	08002d81 	.word	0x08002d81
 8002d6c:	08002d95 	.word	0x08002d95
 8002d70:	4a79      	ldr	r2, [pc, #484]	; (8002f58 <HAL_GPIO_Init+0x2b4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d76:	e02c      	b.n	8002dd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	623b      	str	r3, [r7, #32]
          break;
 8002d7e:	e029      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	3304      	adds	r3, #4
 8002d86:	623b      	str	r3, [r7, #32]
          break;
 8002d88:	e024      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	3308      	adds	r3, #8
 8002d90:	623b      	str	r3, [r7, #32]
          break;
 8002d92:	e01f      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	330c      	adds	r3, #12
 8002d9a:	623b      	str	r3, [r7, #32]
          break;
 8002d9c:	e01a      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d102      	bne.n	8002dac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002da6:	2304      	movs	r3, #4
 8002da8:	623b      	str	r3, [r7, #32]
          break;
 8002daa:	e013      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d105      	bne.n	8002dc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002db4:	2308      	movs	r3, #8
 8002db6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	611a      	str	r2, [r3, #16]
          break;
 8002dbe:	e009      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dc0:	2308      	movs	r3, #8
 8002dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69fa      	ldr	r2, [r7, #28]
 8002dc8:	615a      	str	r2, [r3, #20]
          break;
 8002dca:	e003      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	623b      	str	r3, [r7, #32]
          break;
 8002dd0:	e000      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          break;
 8002dd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2bff      	cmp	r3, #255	; 0xff
 8002dd8:	d801      	bhi.n	8002dde <HAL_GPIO_Init+0x13a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	e001      	b.n	8002de2 <HAL_GPIO_Init+0x13e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3304      	adds	r3, #4
 8002de2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2bff      	cmp	r3, #255	; 0xff
 8002de8:	d802      	bhi.n	8002df0 <HAL_GPIO_Init+0x14c>
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	e002      	b.n	8002df6 <HAL_GPIO_Init+0x152>
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	3b08      	subs	r3, #8
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	210f      	movs	r1, #15
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	fa01 f303 	lsl.w	r3, r1, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	401a      	ands	r2, r3
 8002e08:	6a39      	ldr	r1, [r7, #32]
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	431a      	orrs	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80b1 	beq.w	8002f86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e24:	4b4d      	ldr	r3, [pc, #308]	; (8002f5c <HAL_GPIO_Init+0x2b8>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	4a4c      	ldr	r2, [pc, #304]	; (8002f5c <HAL_GPIO_Init+0x2b8>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6193      	str	r3, [r2, #24]
 8002e30:	4b4a      	ldr	r3, [pc, #296]	; (8002f5c <HAL_GPIO_Init+0x2b8>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e3c:	4a48      	ldr	r2, [pc, #288]	; (8002f60 <HAL_GPIO_Init+0x2bc>)
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	3302      	adds	r3, #2
 8002e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	220f      	movs	r2, #15
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a40      	ldr	r2, [pc, #256]	; (8002f64 <HAL_GPIO_Init+0x2c0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d013      	beq.n	8002e90 <HAL_GPIO_Init+0x1ec>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a3f      	ldr	r2, [pc, #252]	; (8002f68 <HAL_GPIO_Init+0x2c4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00d      	beq.n	8002e8c <HAL_GPIO_Init+0x1e8>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a3e      	ldr	r2, [pc, #248]	; (8002f6c <HAL_GPIO_Init+0x2c8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d007      	beq.n	8002e88 <HAL_GPIO_Init+0x1e4>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a3d      	ldr	r2, [pc, #244]	; (8002f70 <HAL_GPIO_Init+0x2cc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d101      	bne.n	8002e84 <HAL_GPIO_Init+0x1e0>
 8002e80:	2303      	movs	r3, #3
 8002e82:	e006      	b.n	8002e92 <HAL_GPIO_Init+0x1ee>
 8002e84:	2304      	movs	r3, #4
 8002e86:	e004      	b.n	8002e92 <HAL_GPIO_Init+0x1ee>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e002      	b.n	8002e92 <HAL_GPIO_Init+0x1ee>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <HAL_GPIO_Init+0x1ee>
 8002e90:	2300      	movs	r3, #0
 8002e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e94:	f002 0203 	and.w	r2, r2, #3
 8002e98:	0092      	lsls	r2, r2, #2
 8002e9a:	4093      	lsls	r3, r2
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ea2:	492f      	ldr	r1, [pc, #188]	; (8002f60 <HAL_GPIO_Init+0x2bc>)
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	089b      	lsrs	r3, r3, #2
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d006      	beq.n	8002eca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ebc:	4b2d      	ldr	r3, [pc, #180]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	492c      	ldr	r1, [pc, #176]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]
 8002ec8:	e006      	b.n	8002ed8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002eca:	4b2a      	ldr	r3, [pc, #168]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	4928      	ldr	r1, [pc, #160]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d006      	beq.n	8002ef2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ee4:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	4922      	ldr	r1, [pc, #136]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
 8002ef0:	e006      	b.n	8002f00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ef2:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	491e      	ldr	r1, [pc, #120]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d006      	beq.n	8002f1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f0c:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	4918      	ldr	r1, [pc, #96]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	608b      	str	r3, [r1, #8]
 8002f18:	e006      	b.n	8002f28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f1a:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	4914      	ldr	r1, [pc, #80]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d021      	beq.n	8002f78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f34:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	490e      	ldr	r1, [pc, #56]	; (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60cb      	str	r3, [r1, #12]
 8002f40:	e021      	b.n	8002f86 <HAL_GPIO_Init+0x2e2>
 8002f42:	bf00      	nop
 8002f44:	10320000 	.word	0x10320000
 8002f48:	10310000 	.word	0x10310000
 8002f4c:	10220000 	.word	0x10220000
 8002f50:	10210000 	.word	0x10210000
 8002f54:	10120000 	.word	0x10120000
 8002f58:	10110000 	.word	0x10110000
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40010800 	.word	0x40010800
 8002f68:	40010c00 	.word	0x40010c00
 8002f6c:	40011000 	.word	0x40011000
 8002f70:	40011400 	.word	0x40011400
 8002f74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_GPIO_Init+0x304>)
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	4909      	ldr	r1, [pc, #36]	; (8002fa8 <HAL_GPIO_Init+0x304>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	3301      	adds	r3, #1
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f47f ae8e 	bne.w	8002cb8 <HAL_GPIO_Init+0x14>
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	bf00      	nop
 8002fa0:	372c      	adds	r7, #44	; 0x2c
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	40010400 	.word	0x40010400

08002fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fbc:	787b      	ldrb	r3, [r7, #1]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fc8:	e003      	b.n	8002fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	041a      	lsls	r2, r3, #16
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	611a      	str	r2, [r3, #16]
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e26c      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8087 	beq.w	800310a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ffc:	4b92      	ldr	r3, [pc, #584]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	2b04      	cmp	r3, #4
 8003006:	d00c      	beq.n	8003022 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003008:	4b8f      	ldr	r3, [pc, #572]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b08      	cmp	r3, #8
 8003012:	d112      	bne.n	800303a <HAL_RCC_OscConfig+0x5e>
 8003014:	4b8c      	ldr	r3, [pc, #560]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003020:	d10b      	bne.n	800303a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003022:	4b89      	ldr	r3, [pc, #548]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d06c      	beq.n	8003108 <HAL_RCC_OscConfig+0x12c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d168      	bne.n	8003108 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e246      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003042:	d106      	bne.n	8003052 <HAL_RCC_OscConfig+0x76>
 8003044:	4b80      	ldr	r3, [pc, #512]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a7f      	ldr	r2, [pc, #508]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800304a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	e02e      	b.n	80030b0 <HAL_RCC_OscConfig+0xd4>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0x98>
 800305a:	4b7b      	ldr	r3, [pc, #492]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a7a      	ldr	r2, [pc, #488]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b78      	ldr	r3, [pc, #480]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a77      	ldr	r2, [pc, #476]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800306c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e01d      	b.n	80030b0 <HAL_RCC_OscConfig+0xd4>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0xbc>
 800307e:	4b72      	ldr	r3, [pc, #456]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a71      	ldr	r2, [pc, #452]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b6f      	ldr	r3, [pc, #444]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a6e      	ldr	r2, [pc, #440]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e00b      	b.n	80030b0 <HAL_RCC_OscConfig+0xd4>
 8003098:	4b6b      	ldr	r3, [pc, #428]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a6a      	ldr	r2, [pc, #424]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800309e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b68      	ldr	r3, [pc, #416]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a67      	ldr	r2, [pc, #412]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 80030aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7ff fce2 	bl	8002a80 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c0:	f7ff fcde 	bl	8002a80 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	; 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e1fa      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d2:	4b5d      	ldr	r3, [pc, #372]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0xe4>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7ff fcce 	bl	8002a80 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e8:	f7ff fcca 	bl	8002a80 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	; 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e1e6      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fa:	4b53      	ldr	r3, [pc, #332]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x10c>
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d063      	beq.n	80031de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003116:	4b4c      	ldr	r3, [pc, #304]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003122:	4b49      	ldr	r3, [pc, #292]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b08      	cmp	r3, #8
 800312c:	d11c      	bne.n	8003168 <HAL_RCC_OscConfig+0x18c>
 800312e:	4b46      	ldr	r3, [pc, #280]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d116      	bne.n	8003168 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313a:	4b43      	ldr	r3, [pc, #268]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <HAL_RCC_OscConfig+0x176>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d001      	beq.n	8003152 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e1ba      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003152:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4939      	ldr	r1, [pc, #228]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003166:	e03a      	b.n	80031de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d020      	beq.n	80031b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003170:	4b36      	ldr	r3, [pc, #216]	; (800324c <HAL_RCC_OscConfig+0x270>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003176:	f7ff fc83 	bl	8002a80 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317e:	f7ff fc7f 	bl	8002a80 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e19b      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003190:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319c:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4927      	ldr	r1, [pc, #156]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]
 80031b0:	e015      	b.n	80031de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031b2:	4b26      	ldr	r3, [pc, #152]	; (800324c <HAL_RCC_OscConfig+0x270>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7ff fc62 	bl	8002a80 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c0:	f7ff fc5e 	bl	8002a80 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e17a      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d2:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d03a      	beq.n	8003260 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d019      	beq.n	8003226 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f2:	4b17      	ldr	r3, [pc, #92]	; (8003250 <HAL_RCC_OscConfig+0x274>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f8:	f7ff fc42 	bl	8002a80 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003200:	f7ff fc3e 	bl	8002a80 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e15a      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800321e:	2001      	movs	r0, #1
 8003220:	f000 faa6 	bl	8003770 <RCC_Delay>
 8003224:	e01c      	b.n	8003260 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <HAL_RCC_OscConfig+0x274>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322c:	f7ff fc28 	bl	8002a80 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003232:	e00f      	b.n	8003254 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003234:	f7ff fc24 	bl	8002a80 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d908      	bls.n	8003254 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e140      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000
 800324c:	42420000 	.word	0x42420000
 8003250:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	4b9e      	ldr	r3, [pc, #632]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e9      	bne.n	8003234 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80a6 	beq.w	80033ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326e:	2300      	movs	r3, #0
 8003270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003272:	4b97      	ldr	r3, [pc, #604]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10d      	bne.n	800329a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	4b94      	ldr	r3, [pc, #592]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	4a93      	ldr	r2, [pc, #588]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003288:	61d3      	str	r3, [r2, #28]
 800328a:	4b91      	ldr	r3, [pc, #580]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003296:	2301      	movs	r3, #1
 8003298:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329a:	4b8e      	ldr	r3, [pc, #568]	; (80034d4 <HAL_RCC_OscConfig+0x4f8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d118      	bne.n	80032d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a6:	4b8b      	ldr	r3, [pc, #556]	; (80034d4 <HAL_RCC_OscConfig+0x4f8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a8a      	ldr	r2, [pc, #552]	; (80034d4 <HAL_RCC_OscConfig+0x4f8>)
 80032ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b2:	f7ff fbe5 	bl	8002a80 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ba:	f7ff fbe1 	bl	8002a80 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b64      	cmp	r3, #100	; 0x64
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e0fd      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032cc:	4b81      	ldr	r3, [pc, #516]	; (80034d4 <HAL_RCC_OscConfig+0x4f8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d106      	bne.n	80032ee <HAL_RCC_OscConfig+0x312>
 80032e0:	4b7b      	ldr	r3, [pc, #492]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	4a7a      	ldr	r2, [pc, #488]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6213      	str	r3, [r2, #32]
 80032ec:	e02d      	b.n	800334a <HAL_RCC_OscConfig+0x36e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10c      	bne.n	8003310 <HAL_RCC_OscConfig+0x334>
 80032f6:	4b76      	ldr	r3, [pc, #472]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	4a75      	ldr	r2, [pc, #468]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	6213      	str	r3, [r2, #32]
 8003302:	4b73      	ldr	r3, [pc, #460]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	4a72      	ldr	r2, [pc, #456]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003308:	f023 0304 	bic.w	r3, r3, #4
 800330c:	6213      	str	r3, [r2, #32]
 800330e:	e01c      	b.n	800334a <HAL_RCC_OscConfig+0x36e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b05      	cmp	r3, #5
 8003316:	d10c      	bne.n	8003332 <HAL_RCC_OscConfig+0x356>
 8003318:	4b6d      	ldr	r3, [pc, #436]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	4a6c      	ldr	r2, [pc, #432]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 800331e:	f043 0304 	orr.w	r3, r3, #4
 8003322:	6213      	str	r3, [r2, #32]
 8003324:	4b6a      	ldr	r3, [pc, #424]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	4a69      	ldr	r2, [pc, #420]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	6213      	str	r3, [r2, #32]
 8003330:	e00b      	b.n	800334a <HAL_RCC_OscConfig+0x36e>
 8003332:	4b67      	ldr	r3, [pc, #412]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	4a66      	ldr	r2, [pc, #408]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003338:	f023 0301 	bic.w	r3, r3, #1
 800333c:	6213      	str	r3, [r2, #32]
 800333e:	4b64      	ldr	r3, [pc, #400]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	4a63      	ldr	r2, [pc, #396]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003344:	f023 0304 	bic.w	r3, r3, #4
 8003348:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d015      	beq.n	800337e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003352:	f7ff fb95 	bl	8002a80 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003358:	e00a      	b.n	8003370 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335a:	f7ff fb91 	bl	8002a80 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f241 3288 	movw	r2, #5000	; 0x1388
 8003368:	4293      	cmp	r3, r2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e0ab      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003370:	4b57      	ldr	r3, [pc, #348]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0ee      	beq.n	800335a <HAL_RCC_OscConfig+0x37e>
 800337c:	e014      	b.n	80033a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337e:	f7ff fb7f 	bl	8002a80 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003384:	e00a      	b.n	800339c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003386:	f7ff fb7b 	bl	8002a80 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	f241 3288 	movw	r2, #5000	; 0x1388
 8003394:	4293      	cmp	r3, r2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e095      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339c:	4b4c      	ldr	r3, [pc, #304]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1ee      	bne.n	8003386 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d105      	bne.n	80033ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ae:	4b48      	ldr	r3, [pc, #288]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	4a47      	ldr	r2, [pc, #284]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 80033b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 8081 	beq.w	80034c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033c4:	4b42      	ldr	r3, [pc, #264]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 030c 	and.w	r3, r3, #12
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d061      	beq.n	8003494 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d146      	bne.n	8003466 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d8:	4b3f      	ldr	r3, [pc, #252]	; (80034d8 <HAL_RCC_OscConfig+0x4fc>)
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033de:	f7ff fb4f 	bl	8002a80 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e6:	f7ff fb4b 	bl	8002a80 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e067      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f8:	4b35      	ldr	r3, [pc, #212]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f0      	bne.n	80033e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340c:	d108      	bne.n	8003420 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800340e:	4b30      	ldr	r3, [pc, #192]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	492d      	ldr	r1, [pc, #180]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003420:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a19      	ldr	r1, [r3, #32]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	430b      	orrs	r3, r1
 8003432:	4927      	ldr	r1, [pc, #156]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003434:	4313      	orrs	r3, r2
 8003436:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003438:	4b27      	ldr	r3, [pc, #156]	; (80034d8 <HAL_RCC_OscConfig+0x4fc>)
 800343a:	2201      	movs	r2, #1
 800343c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343e:	f7ff fb1f 	bl	8002a80 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003446:	f7ff fb1b 	bl	8002a80 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e037      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003458:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x46a>
 8003464:	e02f      	b.n	80034c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003466:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <HAL_RCC_OscConfig+0x4fc>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7ff fb08 	bl	8002a80 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003474:	f7ff fb04 	bl	8002a80 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e020      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x498>
 8003492:	e018      	b.n	80034c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e013      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d106      	bne.n	80034c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034be:	429a      	cmp	r2, r3
 80034c0:	d001      	beq.n	80034c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40007000 	.word	0x40007000
 80034d8:	42420060 	.word	0x42420060

080034dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0d0      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034f0:	4b6a      	ldr	r3, [pc, #424]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d910      	bls.n	8003520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fe:	4b67      	ldr	r3, [pc, #412]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 0207 	bic.w	r2, r3, #7
 8003506:	4965      	ldr	r1, [pc, #404]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	4b63      	ldr	r3, [pc, #396]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0b8      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003538:	4b59      	ldr	r3, [pc, #356]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4a58      	ldr	r2, [pc, #352]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003542:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003550:	4b53      	ldr	r3, [pc, #332]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4a52      	ldr	r2, [pc, #328]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003556:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800355a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800355c:	4b50      	ldr	r3, [pc, #320]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	494d      	ldr	r1, [pc, #308]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	4313      	orrs	r3, r2
 800356c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d040      	beq.n	80035fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d115      	bne.n	80035ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e07f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359a:	4b41      	ldr	r3, [pc, #260]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e073      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035aa:	4b3d      	ldr	r3, [pc, #244]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e06b      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ba:	4b39      	ldr	r3, [pc, #228]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f023 0203 	bic.w	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4936      	ldr	r1, [pc, #216]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035cc:	f7ff fa58 	bl	8002a80 <HAL_GetTick>
 80035d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d4:	f7ff fa54 	bl	8002a80 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e053      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ea:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 020c 	and.w	r2, r3, #12
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d1eb      	bne.n	80035d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035fc:	4b27      	ldr	r3, [pc, #156]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d210      	bcs.n	800362c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360a:	4b24      	ldr	r3, [pc, #144]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 0207 	bic.w	r2, r3, #7
 8003612:	4922      	ldr	r1, [pc, #136]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361a:	4b20      	ldr	r3, [pc, #128]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e032      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003638:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4916      	ldr	r1, [pc, #88]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003646:	4313      	orrs	r3, r2
 8003648:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003656:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	490e      	ldr	r1, [pc, #56]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800366a:	f000 f821 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 800366e:	4602      	mov	r2, r0
 8003670:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	490a      	ldr	r1, [pc, #40]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 800367c:	5ccb      	ldrb	r3, [r1, r3]
 800367e:	fa22 f303 	lsr.w	r3, r2, r3
 8003682:	4a09      	ldr	r2, [pc, #36]	; (80036a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003686:	4b09      	ldr	r3, [pc, #36]	; (80036ac <HAL_RCC_ClockConfig+0x1d0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff f9b6 	bl	80029fc <HAL_InitTick>

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40022000 	.word	0x40022000
 80036a0:	40021000 	.word	0x40021000
 80036a4:	08004b30 	.word	0x08004b30
 80036a8:	20000004 	.word	0x20000004
 80036ac:	20000008 	.word	0x20000008

080036b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b0:	b490      	push	{r4, r7}
 80036b2:	b08a      	sub	sp, #40	; 0x28
 80036b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036b6:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036b8:	1d3c      	adds	r4, r7, #4
 80036ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036c0:	f240 2301 	movw	r3, #513	; 0x201
 80036c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	2300      	movs	r3, #0
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	2300      	movs	r3, #0
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036da:	4b22      	ldr	r3, [pc, #136]	; (8003764 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d002      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x40>
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d003      	beq.n	80036f6 <HAL_RCC_GetSysClockFreq+0x46>
 80036ee:	e02d      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036f2:	623b      	str	r3, [r7, #32]
      break;
 80036f4:	e02d      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	0c9b      	lsrs	r3, r3, #18
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003702:	4413      	add	r3, r2
 8003704:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003708:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d013      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003714:	4b13      	ldr	r3, [pc, #76]	; (8003764 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	0c5b      	lsrs	r3, r3, #17
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003722:	4413      	add	r3, r2
 8003724:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003728:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	4a0e      	ldr	r2, [pc, #56]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800372e:	fb02 f203 	mul.w	r2, r2, r3
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	fbb2 f3f3 	udiv	r3, r2, r3
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
 800373a:	e004      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	4a0b      	ldr	r2, [pc, #44]	; (800376c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003740:	fb02 f303 	mul.w	r3, r2, r3
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	623b      	str	r3, [r7, #32]
      break;
 800374a:	e002      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800374e:	623b      	str	r3, [r7, #32]
      break;
 8003750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003752:	6a3b      	ldr	r3, [r7, #32]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3728      	adds	r7, #40	; 0x28
 8003758:	46bd      	mov	sp, r7
 800375a:	bc90      	pop	{r4, r7}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	08004608 	.word	0x08004608
 8003764:	40021000 	.word	0x40021000
 8003768:	007a1200 	.word	0x007a1200
 800376c:	003d0900 	.word	0x003d0900

08003770 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <RCC_Delay+0x34>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <RCC_Delay+0x38>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	0a5b      	lsrs	r3, r3, #9
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	fb02 f303 	mul.w	r3, r2, r3
 800378a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800378c:	bf00      	nop
  }
  while (Delay --);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1e5a      	subs	r2, r3, #1
 8003792:	60fa      	str	r2, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f9      	bne.n	800378c <RCC_Delay+0x1c>
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	20000004 	.word	0x20000004
 80037a8:	10624dd3 	.word	0x10624dd3

080037ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e076      	b.n	80038ac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ce:	d009      	beq.n	80037e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	61da      	str	r2, [r3, #28]
 80037d6:	e005      	b.n	80037e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff f81e 	bl	8002840 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003868:	ea42 0103 	orr.w	r1, r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	0c1a      	lsrs	r2, r3, #16
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f002 0204 	and.w	r2, r2, #4
 800388a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	69da      	ldr	r2, [r3, #28]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800389a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_SPI_Transmit+0x22>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e126      	b.n	8003b24 <HAL_SPI_Transmit+0x270>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038de:	f7ff f8cf 	bl	8002a80 <HAL_GetTick>
 80038e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d002      	beq.n	80038fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038f4:	2302      	movs	r3, #2
 80038f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038f8:	e10b      	b.n	8003b12 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_SPI_Transmit+0x52>
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	77fb      	strb	r3, [r7, #31]
    goto error;
 800390a:	e102      	b.n	8003b12 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2203      	movs	r2, #3
 8003910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	88fa      	ldrh	r2, [r7, #6]
 8003924:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	88fa      	ldrh	r2, [r7, #6]
 800392a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003952:	d10f      	bne.n	8003974 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003962:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003972:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	d007      	beq.n	8003992 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003990:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800399a:	d14b      	bne.n	8003a34 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <HAL_SPI_Transmit+0xf6>
 80039a4:	8afb      	ldrh	r3, [r7, #22]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d13e      	bne.n	8003a28 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	881a      	ldrh	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	1c9a      	adds	r2, r3, #2
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039ce:	e02b      	b.n	8003a28 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d112      	bne.n	8003a04 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	881a      	ldrh	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	1c9a      	adds	r2, r3, #2
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a02:	e011      	b.n	8003a28 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a04:	f7ff f83c 	bl	8002a80 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d803      	bhi.n	8003a1c <HAL_SPI_Transmit+0x168>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1a:	d102      	bne.n	8003a22 <HAL_SPI_Transmit+0x16e>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d102      	bne.n	8003a28 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a26:	e074      	b.n	8003b12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1ce      	bne.n	80039d0 <HAL_SPI_Transmit+0x11c>
 8003a32:	e04c      	b.n	8003ace <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HAL_SPI_Transmit+0x18e>
 8003a3c:	8afb      	ldrh	r3, [r7, #22]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d140      	bne.n	8003ac4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	330c      	adds	r3, #12
 8003a4c:	7812      	ldrb	r2, [r2, #0]
 8003a4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a68:	e02c      	b.n	8003ac4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d113      	bne.n	8003aa0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	330c      	adds	r3, #12
 8003a82:	7812      	ldrb	r2, [r2, #0]
 8003a84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a9e:	e011      	b.n	8003ac4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aa0:	f7fe ffee 	bl	8002a80 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d803      	bhi.n	8003ab8 <HAL_SPI_Transmit+0x204>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab6:	d102      	bne.n	8003abe <HAL_SPI_Transmit+0x20a>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d102      	bne.n	8003ac4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ac2:	e026      	b.n	8003b12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1cd      	bne.n	8003a6a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	6839      	ldr	r1, [r7, #0]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f8c0 	bl	8003c58 <SPI_EndRxTxTransaction>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	77fb      	strb	r3, [r7, #31]
 8003b0e:	e000      	b.n	8003b12 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003b10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b22:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3720      	adds	r7, #32
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b3a:	b2db      	uxtb	r3, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
	...

08003b48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b58:	f7fe ff92 	bl	8002a80 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b60:	1a9b      	subs	r3, r3, r2
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	4413      	add	r3, r2
 8003b66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b68:	f7fe ff8a 	bl	8002a80 <HAL_GetTick>
 8003b6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b6e:	4b39      	ldr	r3, [pc, #228]	; (8003c54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	015b      	lsls	r3, r3, #5
 8003b74:	0d1b      	lsrs	r3, r3, #20
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	fb02 f303 	mul.w	r3, r2, r3
 8003b7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b7e:	e054      	b.n	8003c2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b86:	d050      	beq.n	8003c2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b88:	f7fe ff7a 	bl	8002a80 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d902      	bls.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d13d      	bne.n	8003c1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bb6:	d111      	bne.n	8003bdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc0:	d004      	beq.n	8003bcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bca:	d107      	bne.n	8003bdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be4:	d10f      	bne.n	8003c06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e017      	b.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4013      	ands	r3, r2
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	bf0c      	ite	eq
 8003c3a:	2301      	moveq	r3, #1
 8003c3c:	2300      	movne	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d19b      	bne.n	8003b80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000004 	.word	0x20000004

08003c58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2180      	movs	r1, #128	; 0x80
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f7ff ff6a 	bl	8003b48 <SPI_WaitFlagStateUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d007      	beq.n	8003c8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7e:	f043 0220 	orr.w	r2, r3, #32
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e000      	b.n	8003c8c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <__errno>:
 8003c94:	4b01      	ldr	r3, [pc, #4]	; (8003c9c <__errno+0x8>)
 8003c96:	6818      	ldr	r0, [r3, #0]
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	20000010 	.word	0x20000010

08003ca0 <__libc_init_array>:
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	2600      	movs	r6, #0
 8003ca4:	4d0c      	ldr	r5, [pc, #48]	; (8003cd8 <__libc_init_array+0x38>)
 8003ca6:	4c0d      	ldr	r4, [pc, #52]	; (8003cdc <__libc_init_array+0x3c>)
 8003ca8:	1b64      	subs	r4, r4, r5
 8003caa:	10a4      	asrs	r4, r4, #2
 8003cac:	42a6      	cmp	r6, r4
 8003cae:	d109      	bne.n	8003cc4 <__libc_init_array+0x24>
 8003cb0:	f000 fc5c 	bl	800456c <_init>
 8003cb4:	2600      	movs	r6, #0
 8003cb6:	4d0a      	ldr	r5, [pc, #40]	; (8003ce0 <__libc_init_array+0x40>)
 8003cb8:	4c0a      	ldr	r4, [pc, #40]	; (8003ce4 <__libc_init_array+0x44>)
 8003cba:	1b64      	subs	r4, r4, r5
 8003cbc:	10a4      	asrs	r4, r4, #2
 8003cbe:	42a6      	cmp	r6, r4
 8003cc0:	d105      	bne.n	8003cce <__libc_init_array+0x2e>
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
 8003cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc8:	4798      	blx	r3
 8003cca:	3601      	adds	r6, #1
 8003ccc:	e7ee      	b.n	8003cac <__libc_init_array+0xc>
 8003cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd2:	4798      	blx	r3
 8003cd4:	3601      	adds	r6, #1
 8003cd6:	e7f2      	b.n	8003cbe <__libc_init_array+0x1e>
 8003cd8:	08004b74 	.word	0x08004b74
 8003cdc:	08004b74 	.word	0x08004b74
 8003ce0:	08004b74 	.word	0x08004b74
 8003ce4:	08004b78 	.word	0x08004b78

08003ce8 <memset>:
 8003ce8:	4603      	mov	r3, r0
 8003cea:	4402      	add	r2, r0
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d100      	bne.n	8003cf2 <memset+0xa>
 8003cf0:	4770      	bx	lr
 8003cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf6:	e7f9      	b.n	8003cec <memset+0x4>

08003cf8 <siprintf>:
 8003cf8:	b40e      	push	{r1, r2, r3}
 8003cfa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cfe:	b500      	push	{lr}
 8003d00:	b09c      	sub	sp, #112	; 0x70
 8003d02:	ab1d      	add	r3, sp, #116	; 0x74
 8003d04:	9002      	str	r0, [sp, #8]
 8003d06:	9006      	str	r0, [sp, #24]
 8003d08:	9107      	str	r1, [sp, #28]
 8003d0a:	9104      	str	r1, [sp, #16]
 8003d0c:	4808      	ldr	r0, [pc, #32]	; (8003d30 <siprintf+0x38>)
 8003d0e:	4909      	ldr	r1, [pc, #36]	; (8003d34 <siprintf+0x3c>)
 8003d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d14:	9105      	str	r1, [sp, #20]
 8003d16:	6800      	ldr	r0, [r0, #0]
 8003d18:	a902      	add	r1, sp, #8
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	f000 f868 	bl	8003df0 <_svfiprintf_r>
 8003d20:	2200      	movs	r2, #0
 8003d22:	9b02      	ldr	r3, [sp, #8]
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	b01c      	add	sp, #112	; 0x70
 8003d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d2c:	b003      	add	sp, #12
 8003d2e:	4770      	bx	lr
 8003d30:	20000010 	.word	0x20000010
 8003d34:	ffff0208 	.word	0xffff0208

08003d38 <__ssputs_r>:
 8003d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d3c:	688e      	ldr	r6, [r1, #8]
 8003d3e:	4682      	mov	sl, r0
 8003d40:	429e      	cmp	r6, r3
 8003d42:	460c      	mov	r4, r1
 8003d44:	4690      	mov	r8, r2
 8003d46:	461f      	mov	r7, r3
 8003d48:	d838      	bhi.n	8003dbc <__ssputs_r+0x84>
 8003d4a:	898a      	ldrh	r2, [r1, #12]
 8003d4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d50:	d032      	beq.n	8003db8 <__ssputs_r+0x80>
 8003d52:	6825      	ldr	r5, [r4, #0]
 8003d54:	6909      	ldr	r1, [r1, #16]
 8003d56:	3301      	adds	r3, #1
 8003d58:	eba5 0901 	sub.w	r9, r5, r1
 8003d5c:	6965      	ldr	r5, [r4, #20]
 8003d5e:	444b      	add	r3, r9
 8003d60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d68:	106d      	asrs	r5, r5, #1
 8003d6a:	429d      	cmp	r5, r3
 8003d6c:	bf38      	it	cc
 8003d6e:	461d      	movcc	r5, r3
 8003d70:	0553      	lsls	r3, r2, #21
 8003d72:	d531      	bpl.n	8003dd8 <__ssputs_r+0xa0>
 8003d74:	4629      	mov	r1, r5
 8003d76:	f000 fb53 	bl	8004420 <_malloc_r>
 8003d7a:	4606      	mov	r6, r0
 8003d7c:	b950      	cbnz	r0, 8003d94 <__ssputs_r+0x5c>
 8003d7e:	230c      	movs	r3, #12
 8003d80:	f04f 30ff 	mov.w	r0, #4294967295
 8003d84:	f8ca 3000 	str.w	r3, [sl]
 8003d88:	89a3      	ldrh	r3, [r4, #12]
 8003d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d8e:	81a3      	strh	r3, [r4, #12]
 8003d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d94:	464a      	mov	r2, r9
 8003d96:	6921      	ldr	r1, [r4, #16]
 8003d98:	f000 face 	bl	8004338 <memcpy>
 8003d9c:	89a3      	ldrh	r3, [r4, #12]
 8003d9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da6:	81a3      	strh	r3, [r4, #12]
 8003da8:	6126      	str	r6, [r4, #16]
 8003daa:	444e      	add	r6, r9
 8003dac:	6026      	str	r6, [r4, #0]
 8003dae:	463e      	mov	r6, r7
 8003db0:	6165      	str	r5, [r4, #20]
 8003db2:	eba5 0509 	sub.w	r5, r5, r9
 8003db6:	60a5      	str	r5, [r4, #8]
 8003db8:	42be      	cmp	r6, r7
 8003dba:	d900      	bls.n	8003dbe <__ssputs_r+0x86>
 8003dbc:	463e      	mov	r6, r7
 8003dbe:	4632      	mov	r2, r6
 8003dc0:	4641      	mov	r1, r8
 8003dc2:	6820      	ldr	r0, [r4, #0]
 8003dc4:	f000 fac6 	bl	8004354 <memmove>
 8003dc8:	68a3      	ldr	r3, [r4, #8]
 8003dca:	6822      	ldr	r2, [r4, #0]
 8003dcc:	1b9b      	subs	r3, r3, r6
 8003dce:	4432      	add	r2, r6
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	60a3      	str	r3, [r4, #8]
 8003dd4:	6022      	str	r2, [r4, #0]
 8003dd6:	e7db      	b.n	8003d90 <__ssputs_r+0x58>
 8003dd8:	462a      	mov	r2, r5
 8003dda:	f000 fb7b 	bl	80044d4 <_realloc_r>
 8003dde:	4606      	mov	r6, r0
 8003de0:	2800      	cmp	r0, #0
 8003de2:	d1e1      	bne.n	8003da8 <__ssputs_r+0x70>
 8003de4:	4650      	mov	r0, sl
 8003de6:	6921      	ldr	r1, [r4, #16]
 8003de8:	f000 face 	bl	8004388 <_free_r>
 8003dec:	e7c7      	b.n	8003d7e <__ssputs_r+0x46>
	...

08003df0 <_svfiprintf_r>:
 8003df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df4:	4698      	mov	r8, r3
 8003df6:	898b      	ldrh	r3, [r1, #12]
 8003df8:	4607      	mov	r7, r0
 8003dfa:	061b      	lsls	r3, r3, #24
 8003dfc:	460d      	mov	r5, r1
 8003dfe:	4614      	mov	r4, r2
 8003e00:	b09d      	sub	sp, #116	; 0x74
 8003e02:	d50e      	bpl.n	8003e22 <_svfiprintf_r+0x32>
 8003e04:	690b      	ldr	r3, [r1, #16]
 8003e06:	b963      	cbnz	r3, 8003e22 <_svfiprintf_r+0x32>
 8003e08:	2140      	movs	r1, #64	; 0x40
 8003e0a:	f000 fb09 	bl	8004420 <_malloc_r>
 8003e0e:	6028      	str	r0, [r5, #0]
 8003e10:	6128      	str	r0, [r5, #16]
 8003e12:	b920      	cbnz	r0, 8003e1e <_svfiprintf_r+0x2e>
 8003e14:	230c      	movs	r3, #12
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1c:	e0d1      	b.n	8003fc2 <_svfiprintf_r+0x1d2>
 8003e1e:	2340      	movs	r3, #64	; 0x40
 8003e20:	616b      	str	r3, [r5, #20]
 8003e22:	2300      	movs	r3, #0
 8003e24:	9309      	str	r3, [sp, #36]	; 0x24
 8003e26:	2320      	movs	r3, #32
 8003e28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e2c:	2330      	movs	r3, #48	; 0x30
 8003e2e:	f04f 0901 	mov.w	r9, #1
 8003e32:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003fdc <_svfiprintf_r+0x1ec>
 8003e3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e3e:	4623      	mov	r3, r4
 8003e40:	469a      	mov	sl, r3
 8003e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e46:	b10a      	cbz	r2, 8003e4c <_svfiprintf_r+0x5c>
 8003e48:	2a25      	cmp	r2, #37	; 0x25
 8003e4a:	d1f9      	bne.n	8003e40 <_svfiprintf_r+0x50>
 8003e4c:	ebba 0b04 	subs.w	fp, sl, r4
 8003e50:	d00b      	beq.n	8003e6a <_svfiprintf_r+0x7a>
 8003e52:	465b      	mov	r3, fp
 8003e54:	4622      	mov	r2, r4
 8003e56:	4629      	mov	r1, r5
 8003e58:	4638      	mov	r0, r7
 8003e5a:	f7ff ff6d 	bl	8003d38 <__ssputs_r>
 8003e5e:	3001      	adds	r0, #1
 8003e60:	f000 80aa 	beq.w	8003fb8 <_svfiprintf_r+0x1c8>
 8003e64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e66:	445a      	add	r2, fp
 8003e68:	9209      	str	r2, [sp, #36]	; 0x24
 8003e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 80a2 	beq.w	8003fb8 <_svfiprintf_r+0x1c8>
 8003e74:	2300      	movs	r3, #0
 8003e76:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e7e:	f10a 0a01 	add.w	sl, sl, #1
 8003e82:	9304      	str	r3, [sp, #16]
 8003e84:	9307      	str	r3, [sp, #28]
 8003e86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e8a:	931a      	str	r3, [sp, #104]	; 0x68
 8003e8c:	4654      	mov	r4, sl
 8003e8e:	2205      	movs	r2, #5
 8003e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e94:	4851      	ldr	r0, [pc, #324]	; (8003fdc <_svfiprintf_r+0x1ec>)
 8003e96:	f000 fa41 	bl	800431c <memchr>
 8003e9a:	9a04      	ldr	r2, [sp, #16]
 8003e9c:	b9d8      	cbnz	r0, 8003ed6 <_svfiprintf_r+0xe6>
 8003e9e:	06d0      	lsls	r0, r2, #27
 8003ea0:	bf44      	itt	mi
 8003ea2:	2320      	movmi	r3, #32
 8003ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ea8:	0711      	lsls	r1, r2, #28
 8003eaa:	bf44      	itt	mi
 8003eac:	232b      	movmi	r3, #43	; 0x2b
 8003eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8003eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8003eb8:	d015      	beq.n	8003ee6 <_svfiprintf_r+0xf6>
 8003eba:	4654      	mov	r4, sl
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f04f 0c0a 	mov.w	ip, #10
 8003ec2:	9a07      	ldr	r2, [sp, #28]
 8003ec4:	4621      	mov	r1, r4
 8003ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eca:	3b30      	subs	r3, #48	; 0x30
 8003ecc:	2b09      	cmp	r3, #9
 8003ece:	d94e      	bls.n	8003f6e <_svfiprintf_r+0x17e>
 8003ed0:	b1b0      	cbz	r0, 8003f00 <_svfiprintf_r+0x110>
 8003ed2:	9207      	str	r2, [sp, #28]
 8003ed4:	e014      	b.n	8003f00 <_svfiprintf_r+0x110>
 8003ed6:	eba0 0308 	sub.w	r3, r0, r8
 8003eda:	fa09 f303 	lsl.w	r3, r9, r3
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	46a2      	mov	sl, r4
 8003ee2:	9304      	str	r3, [sp, #16]
 8003ee4:	e7d2      	b.n	8003e8c <_svfiprintf_r+0x9c>
 8003ee6:	9b03      	ldr	r3, [sp, #12]
 8003ee8:	1d19      	adds	r1, r3, #4
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	9103      	str	r1, [sp, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	bfbb      	ittet	lt
 8003ef2:	425b      	neglt	r3, r3
 8003ef4:	f042 0202 	orrlt.w	r2, r2, #2
 8003ef8:	9307      	strge	r3, [sp, #28]
 8003efa:	9307      	strlt	r3, [sp, #28]
 8003efc:	bfb8      	it	lt
 8003efe:	9204      	strlt	r2, [sp, #16]
 8003f00:	7823      	ldrb	r3, [r4, #0]
 8003f02:	2b2e      	cmp	r3, #46	; 0x2e
 8003f04:	d10c      	bne.n	8003f20 <_svfiprintf_r+0x130>
 8003f06:	7863      	ldrb	r3, [r4, #1]
 8003f08:	2b2a      	cmp	r3, #42	; 0x2a
 8003f0a:	d135      	bne.n	8003f78 <_svfiprintf_r+0x188>
 8003f0c:	9b03      	ldr	r3, [sp, #12]
 8003f0e:	3402      	adds	r4, #2
 8003f10:	1d1a      	adds	r2, r3, #4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	9203      	str	r2, [sp, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	bfb8      	it	lt
 8003f1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f1e:	9305      	str	r3, [sp, #20]
 8003f20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003fec <_svfiprintf_r+0x1fc>
 8003f24:	2203      	movs	r2, #3
 8003f26:	4650      	mov	r0, sl
 8003f28:	7821      	ldrb	r1, [r4, #0]
 8003f2a:	f000 f9f7 	bl	800431c <memchr>
 8003f2e:	b140      	cbz	r0, 8003f42 <_svfiprintf_r+0x152>
 8003f30:	2340      	movs	r3, #64	; 0x40
 8003f32:	eba0 000a 	sub.w	r0, r0, sl
 8003f36:	fa03 f000 	lsl.w	r0, r3, r0
 8003f3a:	9b04      	ldr	r3, [sp, #16]
 8003f3c:	3401      	adds	r4, #1
 8003f3e:	4303      	orrs	r3, r0
 8003f40:	9304      	str	r3, [sp, #16]
 8003f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f46:	2206      	movs	r2, #6
 8003f48:	4825      	ldr	r0, [pc, #148]	; (8003fe0 <_svfiprintf_r+0x1f0>)
 8003f4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f4e:	f000 f9e5 	bl	800431c <memchr>
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d038      	beq.n	8003fc8 <_svfiprintf_r+0x1d8>
 8003f56:	4b23      	ldr	r3, [pc, #140]	; (8003fe4 <_svfiprintf_r+0x1f4>)
 8003f58:	bb1b      	cbnz	r3, 8003fa2 <_svfiprintf_r+0x1b2>
 8003f5a:	9b03      	ldr	r3, [sp, #12]
 8003f5c:	3307      	adds	r3, #7
 8003f5e:	f023 0307 	bic.w	r3, r3, #7
 8003f62:	3308      	adds	r3, #8
 8003f64:	9303      	str	r3, [sp, #12]
 8003f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f68:	4433      	add	r3, r6
 8003f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f6c:	e767      	b.n	8003e3e <_svfiprintf_r+0x4e>
 8003f6e:	460c      	mov	r4, r1
 8003f70:	2001      	movs	r0, #1
 8003f72:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f76:	e7a5      	b.n	8003ec4 <_svfiprintf_r+0xd4>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f04f 0c0a 	mov.w	ip, #10
 8003f7e:	4619      	mov	r1, r3
 8003f80:	3401      	adds	r4, #1
 8003f82:	9305      	str	r3, [sp, #20]
 8003f84:	4620      	mov	r0, r4
 8003f86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f8a:	3a30      	subs	r2, #48	; 0x30
 8003f8c:	2a09      	cmp	r2, #9
 8003f8e:	d903      	bls.n	8003f98 <_svfiprintf_r+0x1a8>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0c5      	beq.n	8003f20 <_svfiprintf_r+0x130>
 8003f94:	9105      	str	r1, [sp, #20]
 8003f96:	e7c3      	b.n	8003f20 <_svfiprintf_r+0x130>
 8003f98:	4604      	mov	r4, r0
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fa0:	e7f0      	b.n	8003f84 <_svfiprintf_r+0x194>
 8003fa2:	ab03      	add	r3, sp, #12
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	462a      	mov	r2, r5
 8003fa8:	4638      	mov	r0, r7
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <_svfiprintf_r+0x1f8>)
 8003fac:	a904      	add	r1, sp, #16
 8003fae:	f3af 8000 	nop.w
 8003fb2:	1c42      	adds	r2, r0, #1
 8003fb4:	4606      	mov	r6, r0
 8003fb6:	d1d6      	bne.n	8003f66 <_svfiprintf_r+0x176>
 8003fb8:	89ab      	ldrh	r3, [r5, #12]
 8003fba:	065b      	lsls	r3, r3, #25
 8003fbc:	f53f af2c 	bmi.w	8003e18 <_svfiprintf_r+0x28>
 8003fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fc2:	b01d      	add	sp, #116	; 0x74
 8003fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc8:	ab03      	add	r3, sp, #12
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	462a      	mov	r2, r5
 8003fce:	4638      	mov	r0, r7
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <_svfiprintf_r+0x1f8>)
 8003fd2:	a904      	add	r1, sp, #16
 8003fd4:	f000 f87c 	bl	80040d0 <_printf_i>
 8003fd8:	e7eb      	b.n	8003fb2 <_svfiprintf_r+0x1c2>
 8003fda:	bf00      	nop
 8003fdc:	08004b40 	.word	0x08004b40
 8003fe0:	08004b4a 	.word	0x08004b4a
 8003fe4:	00000000 	.word	0x00000000
 8003fe8:	08003d39 	.word	0x08003d39
 8003fec:	08004b46 	.word	0x08004b46

08003ff0 <_printf_common>:
 8003ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff4:	4616      	mov	r6, r2
 8003ff6:	4699      	mov	r9, r3
 8003ff8:	688a      	ldr	r2, [r1, #8]
 8003ffa:	690b      	ldr	r3, [r1, #16]
 8003ffc:	4607      	mov	r7, r0
 8003ffe:	4293      	cmp	r3, r2
 8004000:	bfb8      	it	lt
 8004002:	4613      	movlt	r3, r2
 8004004:	6033      	str	r3, [r6, #0]
 8004006:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800400a:	460c      	mov	r4, r1
 800400c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004010:	b10a      	cbz	r2, 8004016 <_printf_common+0x26>
 8004012:	3301      	adds	r3, #1
 8004014:	6033      	str	r3, [r6, #0]
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	0699      	lsls	r1, r3, #26
 800401a:	bf42      	ittt	mi
 800401c:	6833      	ldrmi	r3, [r6, #0]
 800401e:	3302      	addmi	r3, #2
 8004020:	6033      	strmi	r3, [r6, #0]
 8004022:	6825      	ldr	r5, [r4, #0]
 8004024:	f015 0506 	ands.w	r5, r5, #6
 8004028:	d106      	bne.n	8004038 <_printf_common+0x48>
 800402a:	f104 0a19 	add.w	sl, r4, #25
 800402e:	68e3      	ldr	r3, [r4, #12]
 8004030:	6832      	ldr	r2, [r6, #0]
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	42ab      	cmp	r3, r5
 8004036:	dc28      	bgt.n	800408a <_printf_common+0x9a>
 8004038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800403c:	1e13      	subs	r3, r2, #0
 800403e:	6822      	ldr	r2, [r4, #0]
 8004040:	bf18      	it	ne
 8004042:	2301      	movne	r3, #1
 8004044:	0692      	lsls	r2, r2, #26
 8004046:	d42d      	bmi.n	80040a4 <_printf_common+0xb4>
 8004048:	4649      	mov	r1, r9
 800404a:	4638      	mov	r0, r7
 800404c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004050:	47c0      	blx	r8
 8004052:	3001      	adds	r0, #1
 8004054:	d020      	beq.n	8004098 <_printf_common+0xa8>
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	68e5      	ldr	r5, [r4, #12]
 800405a:	f003 0306 	and.w	r3, r3, #6
 800405e:	2b04      	cmp	r3, #4
 8004060:	bf18      	it	ne
 8004062:	2500      	movne	r5, #0
 8004064:	6832      	ldr	r2, [r6, #0]
 8004066:	f04f 0600 	mov.w	r6, #0
 800406a:	68a3      	ldr	r3, [r4, #8]
 800406c:	bf08      	it	eq
 800406e:	1aad      	subeq	r5, r5, r2
 8004070:	6922      	ldr	r2, [r4, #16]
 8004072:	bf08      	it	eq
 8004074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004078:	4293      	cmp	r3, r2
 800407a:	bfc4      	itt	gt
 800407c:	1a9b      	subgt	r3, r3, r2
 800407e:	18ed      	addgt	r5, r5, r3
 8004080:	341a      	adds	r4, #26
 8004082:	42b5      	cmp	r5, r6
 8004084:	d11a      	bne.n	80040bc <_printf_common+0xcc>
 8004086:	2000      	movs	r0, #0
 8004088:	e008      	b.n	800409c <_printf_common+0xac>
 800408a:	2301      	movs	r3, #1
 800408c:	4652      	mov	r2, sl
 800408e:	4649      	mov	r1, r9
 8004090:	4638      	mov	r0, r7
 8004092:	47c0      	blx	r8
 8004094:	3001      	adds	r0, #1
 8004096:	d103      	bne.n	80040a0 <_printf_common+0xb0>
 8004098:	f04f 30ff 	mov.w	r0, #4294967295
 800409c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a0:	3501      	adds	r5, #1
 80040a2:	e7c4      	b.n	800402e <_printf_common+0x3e>
 80040a4:	2030      	movs	r0, #48	; 0x30
 80040a6:	18e1      	adds	r1, r4, r3
 80040a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040b2:	4422      	add	r2, r4
 80040b4:	3302      	adds	r3, #2
 80040b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040ba:	e7c5      	b.n	8004048 <_printf_common+0x58>
 80040bc:	2301      	movs	r3, #1
 80040be:	4622      	mov	r2, r4
 80040c0:	4649      	mov	r1, r9
 80040c2:	4638      	mov	r0, r7
 80040c4:	47c0      	blx	r8
 80040c6:	3001      	adds	r0, #1
 80040c8:	d0e6      	beq.n	8004098 <_printf_common+0xa8>
 80040ca:	3601      	adds	r6, #1
 80040cc:	e7d9      	b.n	8004082 <_printf_common+0x92>
	...

080040d0 <_printf_i>:
 80040d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040d4:	460c      	mov	r4, r1
 80040d6:	7e27      	ldrb	r7, [r4, #24]
 80040d8:	4691      	mov	r9, r2
 80040da:	2f78      	cmp	r7, #120	; 0x78
 80040dc:	4680      	mov	r8, r0
 80040de:	469a      	mov	sl, r3
 80040e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80040e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040e6:	d807      	bhi.n	80040f8 <_printf_i+0x28>
 80040e8:	2f62      	cmp	r7, #98	; 0x62
 80040ea:	d80a      	bhi.n	8004102 <_printf_i+0x32>
 80040ec:	2f00      	cmp	r7, #0
 80040ee:	f000 80d9 	beq.w	80042a4 <_printf_i+0x1d4>
 80040f2:	2f58      	cmp	r7, #88	; 0x58
 80040f4:	f000 80a4 	beq.w	8004240 <_printf_i+0x170>
 80040f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004100:	e03a      	b.n	8004178 <_printf_i+0xa8>
 8004102:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004106:	2b15      	cmp	r3, #21
 8004108:	d8f6      	bhi.n	80040f8 <_printf_i+0x28>
 800410a:	a001      	add	r0, pc, #4	; (adr r0, 8004110 <_printf_i+0x40>)
 800410c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004110:	08004169 	.word	0x08004169
 8004114:	0800417d 	.word	0x0800417d
 8004118:	080040f9 	.word	0x080040f9
 800411c:	080040f9 	.word	0x080040f9
 8004120:	080040f9 	.word	0x080040f9
 8004124:	080040f9 	.word	0x080040f9
 8004128:	0800417d 	.word	0x0800417d
 800412c:	080040f9 	.word	0x080040f9
 8004130:	080040f9 	.word	0x080040f9
 8004134:	080040f9 	.word	0x080040f9
 8004138:	080040f9 	.word	0x080040f9
 800413c:	0800428b 	.word	0x0800428b
 8004140:	080041ad 	.word	0x080041ad
 8004144:	0800426d 	.word	0x0800426d
 8004148:	080040f9 	.word	0x080040f9
 800414c:	080040f9 	.word	0x080040f9
 8004150:	080042ad 	.word	0x080042ad
 8004154:	080040f9 	.word	0x080040f9
 8004158:	080041ad 	.word	0x080041ad
 800415c:	080040f9 	.word	0x080040f9
 8004160:	080040f9 	.word	0x080040f9
 8004164:	08004275 	.word	0x08004275
 8004168:	680b      	ldr	r3, [r1, #0]
 800416a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800416e:	1d1a      	adds	r2, r3, #4
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	600a      	str	r2, [r1, #0]
 8004174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004178:	2301      	movs	r3, #1
 800417a:	e0a4      	b.n	80042c6 <_printf_i+0x1f6>
 800417c:	6825      	ldr	r5, [r4, #0]
 800417e:	6808      	ldr	r0, [r1, #0]
 8004180:	062e      	lsls	r6, r5, #24
 8004182:	f100 0304 	add.w	r3, r0, #4
 8004186:	d50a      	bpl.n	800419e <_printf_i+0xce>
 8004188:	6805      	ldr	r5, [r0, #0]
 800418a:	600b      	str	r3, [r1, #0]
 800418c:	2d00      	cmp	r5, #0
 800418e:	da03      	bge.n	8004198 <_printf_i+0xc8>
 8004190:	232d      	movs	r3, #45	; 0x2d
 8004192:	426d      	negs	r5, r5
 8004194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004198:	230a      	movs	r3, #10
 800419a:	485e      	ldr	r0, [pc, #376]	; (8004314 <_printf_i+0x244>)
 800419c:	e019      	b.n	80041d2 <_printf_i+0x102>
 800419e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80041a2:	6805      	ldr	r5, [r0, #0]
 80041a4:	600b      	str	r3, [r1, #0]
 80041a6:	bf18      	it	ne
 80041a8:	b22d      	sxthne	r5, r5
 80041aa:	e7ef      	b.n	800418c <_printf_i+0xbc>
 80041ac:	680b      	ldr	r3, [r1, #0]
 80041ae:	6825      	ldr	r5, [r4, #0]
 80041b0:	1d18      	adds	r0, r3, #4
 80041b2:	6008      	str	r0, [r1, #0]
 80041b4:	0628      	lsls	r0, r5, #24
 80041b6:	d501      	bpl.n	80041bc <_printf_i+0xec>
 80041b8:	681d      	ldr	r5, [r3, #0]
 80041ba:	e002      	b.n	80041c2 <_printf_i+0xf2>
 80041bc:	0669      	lsls	r1, r5, #25
 80041be:	d5fb      	bpl.n	80041b8 <_printf_i+0xe8>
 80041c0:	881d      	ldrh	r5, [r3, #0]
 80041c2:	2f6f      	cmp	r7, #111	; 0x6f
 80041c4:	bf0c      	ite	eq
 80041c6:	2308      	moveq	r3, #8
 80041c8:	230a      	movne	r3, #10
 80041ca:	4852      	ldr	r0, [pc, #328]	; (8004314 <_printf_i+0x244>)
 80041cc:	2100      	movs	r1, #0
 80041ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041d2:	6866      	ldr	r6, [r4, #4]
 80041d4:	2e00      	cmp	r6, #0
 80041d6:	bfa8      	it	ge
 80041d8:	6821      	ldrge	r1, [r4, #0]
 80041da:	60a6      	str	r6, [r4, #8]
 80041dc:	bfa4      	itt	ge
 80041de:	f021 0104 	bicge.w	r1, r1, #4
 80041e2:	6021      	strge	r1, [r4, #0]
 80041e4:	b90d      	cbnz	r5, 80041ea <_printf_i+0x11a>
 80041e6:	2e00      	cmp	r6, #0
 80041e8:	d04d      	beq.n	8004286 <_printf_i+0x1b6>
 80041ea:	4616      	mov	r6, r2
 80041ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80041f0:	fb03 5711 	mls	r7, r3, r1, r5
 80041f4:	5dc7      	ldrb	r7, [r0, r7]
 80041f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041fa:	462f      	mov	r7, r5
 80041fc:	42bb      	cmp	r3, r7
 80041fe:	460d      	mov	r5, r1
 8004200:	d9f4      	bls.n	80041ec <_printf_i+0x11c>
 8004202:	2b08      	cmp	r3, #8
 8004204:	d10b      	bne.n	800421e <_printf_i+0x14e>
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	07df      	lsls	r7, r3, #31
 800420a:	d508      	bpl.n	800421e <_printf_i+0x14e>
 800420c:	6923      	ldr	r3, [r4, #16]
 800420e:	6861      	ldr	r1, [r4, #4]
 8004210:	4299      	cmp	r1, r3
 8004212:	bfde      	ittt	le
 8004214:	2330      	movle	r3, #48	; 0x30
 8004216:	f806 3c01 	strble.w	r3, [r6, #-1]
 800421a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800421e:	1b92      	subs	r2, r2, r6
 8004220:	6122      	str	r2, [r4, #16]
 8004222:	464b      	mov	r3, r9
 8004224:	4621      	mov	r1, r4
 8004226:	4640      	mov	r0, r8
 8004228:	f8cd a000 	str.w	sl, [sp]
 800422c:	aa03      	add	r2, sp, #12
 800422e:	f7ff fedf 	bl	8003ff0 <_printf_common>
 8004232:	3001      	adds	r0, #1
 8004234:	d14c      	bne.n	80042d0 <_printf_i+0x200>
 8004236:	f04f 30ff 	mov.w	r0, #4294967295
 800423a:	b004      	add	sp, #16
 800423c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004240:	4834      	ldr	r0, [pc, #208]	; (8004314 <_printf_i+0x244>)
 8004242:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004246:	680e      	ldr	r6, [r1, #0]
 8004248:	6823      	ldr	r3, [r4, #0]
 800424a:	f856 5b04 	ldr.w	r5, [r6], #4
 800424e:	061f      	lsls	r7, r3, #24
 8004250:	600e      	str	r6, [r1, #0]
 8004252:	d514      	bpl.n	800427e <_printf_i+0x1ae>
 8004254:	07d9      	lsls	r1, r3, #31
 8004256:	bf44      	itt	mi
 8004258:	f043 0320 	orrmi.w	r3, r3, #32
 800425c:	6023      	strmi	r3, [r4, #0]
 800425e:	b91d      	cbnz	r5, 8004268 <_printf_i+0x198>
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	f023 0320 	bic.w	r3, r3, #32
 8004266:	6023      	str	r3, [r4, #0]
 8004268:	2310      	movs	r3, #16
 800426a:	e7af      	b.n	80041cc <_printf_i+0xfc>
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	f043 0320 	orr.w	r3, r3, #32
 8004272:	6023      	str	r3, [r4, #0]
 8004274:	2378      	movs	r3, #120	; 0x78
 8004276:	4828      	ldr	r0, [pc, #160]	; (8004318 <_printf_i+0x248>)
 8004278:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800427c:	e7e3      	b.n	8004246 <_printf_i+0x176>
 800427e:	065e      	lsls	r6, r3, #25
 8004280:	bf48      	it	mi
 8004282:	b2ad      	uxthmi	r5, r5
 8004284:	e7e6      	b.n	8004254 <_printf_i+0x184>
 8004286:	4616      	mov	r6, r2
 8004288:	e7bb      	b.n	8004202 <_printf_i+0x132>
 800428a:	680b      	ldr	r3, [r1, #0]
 800428c:	6826      	ldr	r6, [r4, #0]
 800428e:	1d1d      	adds	r5, r3, #4
 8004290:	6960      	ldr	r0, [r4, #20]
 8004292:	600d      	str	r5, [r1, #0]
 8004294:	0635      	lsls	r5, r6, #24
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	d501      	bpl.n	800429e <_printf_i+0x1ce>
 800429a:	6018      	str	r0, [r3, #0]
 800429c:	e002      	b.n	80042a4 <_printf_i+0x1d4>
 800429e:	0671      	lsls	r1, r6, #25
 80042a0:	d5fb      	bpl.n	800429a <_printf_i+0x1ca>
 80042a2:	8018      	strh	r0, [r3, #0]
 80042a4:	2300      	movs	r3, #0
 80042a6:	4616      	mov	r6, r2
 80042a8:	6123      	str	r3, [r4, #16]
 80042aa:	e7ba      	b.n	8004222 <_printf_i+0x152>
 80042ac:	680b      	ldr	r3, [r1, #0]
 80042ae:	1d1a      	adds	r2, r3, #4
 80042b0:	600a      	str	r2, [r1, #0]
 80042b2:	681e      	ldr	r6, [r3, #0]
 80042b4:	2100      	movs	r1, #0
 80042b6:	4630      	mov	r0, r6
 80042b8:	6862      	ldr	r2, [r4, #4]
 80042ba:	f000 f82f 	bl	800431c <memchr>
 80042be:	b108      	cbz	r0, 80042c4 <_printf_i+0x1f4>
 80042c0:	1b80      	subs	r0, r0, r6
 80042c2:	6060      	str	r0, [r4, #4]
 80042c4:	6863      	ldr	r3, [r4, #4]
 80042c6:	6123      	str	r3, [r4, #16]
 80042c8:	2300      	movs	r3, #0
 80042ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ce:	e7a8      	b.n	8004222 <_printf_i+0x152>
 80042d0:	4632      	mov	r2, r6
 80042d2:	4649      	mov	r1, r9
 80042d4:	4640      	mov	r0, r8
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	47d0      	blx	sl
 80042da:	3001      	adds	r0, #1
 80042dc:	d0ab      	beq.n	8004236 <_printf_i+0x166>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	079b      	lsls	r3, r3, #30
 80042e2:	d413      	bmi.n	800430c <_printf_i+0x23c>
 80042e4:	68e0      	ldr	r0, [r4, #12]
 80042e6:	9b03      	ldr	r3, [sp, #12]
 80042e8:	4298      	cmp	r0, r3
 80042ea:	bfb8      	it	lt
 80042ec:	4618      	movlt	r0, r3
 80042ee:	e7a4      	b.n	800423a <_printf_i+0x16a>
 80042f0:	2301      	movs	r3, #1
 80042f2:	4632      	mov	r2, r6
 80042f4:	4649      	mov	r1, r9
 80042f6:	4640      	mov	r0, r8
 80042f8:	47d0      	blx	sl
 80042fa:	3001      	adds	r0, #1
 80042fc:	d09b      	beq.n	8004236 <_printf_i+0x166>
 80042fe:	3501      	adds	r5, #1
 8004300:	68e3      	ldr	r3, [r4, #12]
 8004302:	9903      	ldr	r1, [sp, #12]
 8004304:	1a5b      	subs	r3, r3, r1
 8004306:	42ab      	cmp	r3, r5
 8004308:	dcf2      	bgt.n	80042f0 <_printf_i+0x220>
 800430a:	e7eb      	b.n	80042e4 <_printf_i+0x214>
 800430c:	2500      	movs	r5, #0
 800430e:	f104 0619 	add.w	r6, r4, #25
 8004312:	e7f5      	b.n	8004300 <_printf_i+0x230>
 8004314:	08004b51 	.word	0x08004b51
 8004318:	08004b62 	.word	0x08004b62

0800431c <memchr>:
 800431c:	4603      	mov	r3, r0
 800431e:	b510      	push	{r4, lr}
 8004320:	b2c9      	uxtb	r1, r1
 8004322:	4402      	add	r2, r0
 8004324:	4293      	cmp	r3, r2
 8004326:	4618      	mov	r0, r3
 8004328:	d101      	bne.n	800432e <memchr+0x12>
 800432a:	2000      	movs	r0, #0
 800432c:	e003      	b.n	8004336 <memchr+0x1a>
 800432e:	7804      	ldrb	r4, [r0, #0]
 8004330:	3301      	adds	r3, #1
 8004332:	428c      	cmp	r4, r1
 8004334:	d1f6      	bne.n	8004324 <memchr+0x8>
 8004336:	bd10      	pop	{r4, pc}

08004338 <memcpy>:
 8004338:	440a      	add	r2, r1
 800433a:	4291      	cmp	r1, r2
 800433c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004340:	d100      	bne.n	8004344 <memcpy+0xc>
 8004342:	4770      	bx	lr
 8004344:	b510      	push	{r4, lr}
 8004346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800434a:	4291      	cmp	r1, r2
 800434c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004350:	d1f9      	bne.n	8004346 <memcpy+0xe>
 8004352:	bd10      	pop	{r4, pc}

08004354 <memmove>:
 8004354:	4288      	cmp	r0, r1
 8004356:	b510      	push	{r4, lr}
 8004358:	eb01 0402 	add.w	r4, r1, r2
 800435c:	d902      	bls.n	8004364 <memmove+0x10>
 800435e:	4284      	cmp	r4, r0
 8004360:	4623      	mov	r3, r4
 8004362:	d807      	bhi.n	8004374 <memmove+0x20>
 8004364:	1e43      	subs	r3, r0, #1
 8004366:	42a1      	cmp	r1, r4
 8004368:	d008      	beq.n	800437c <memmove+0x28>
 800436a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800436e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004372:	e7f8      	b.n	8004366 <memmove+0x12>
 8004374:	4601      	mov	r1, r0
 8004376:	4402      	add	r2, r0
 8004378:	428a      	cmp	r2, r1
 800437a:	d100      	bne.n	800437e <memmove+0x2a>
 800437c:	bd10      	pop	{r4, pc}
 800437e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004386:	e7f7      	b.n	8004378 <memmove+0x24>

08004388 <_free_r>:
 8004388:	b538      	push	{r3, r4, r5, lr}
 800438a:	4605      	mov	r5, r0
 800438c:	2900      	cmp	r1, #0
 800438e:	d043      	beq.n	8004418 <_free_r+0x90>
 8004390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004394:	1f0c      	subs	r4, r1, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	bfb8      	it	lt
 800439a:	18e4      	addlt	r4, r4, r3
 800439c:	f000 f8d0 	bl	8004540 <__malloc_lock>
 80043a0:	4a1e      	ldr	r2, [pc, #120]	; (800441c <_free_r+0x94>)
 80043a2:	6813      	ldr	r3, [r2, #0]
 80043a4:	4610      	mov	r0, r2
 80043a6:	b933      	cbnz	r3, 80043b6 <_free_r+0x2e>
 80043a8:	6063      	str	r3, [r4, #4]
 80043aa:	6014      	str	r4, [r2, #0]
 80043ac:	4628      	mov	r0, r5
 80043ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043b2:	f000 b8cb 	b.w	800454c <__malloc_unlock>
 80043b6:	42a3      	cmp	r3, r4
 80043b8:	d90a      	bls.n	80043d0 <_free_r+0x48>
 80043ba:	6821      	ldr	r1, [r4, #0]
 80043bc:	1862      	adds	r2, r4, r1
 80043be:	4293      	cmp	r3, r2
 80043c0:	bf01      	itttt	eq
 80043c2:	681a      	ldreq	r2, [r3, #0]
 80043c4:	685b      	ldreq	r3, [r3, #4]
 80043c6:	1852      	addeq	r2, r2, r1
 80043c8:	6022      	streq	r2, [r4, #0]
 80043ca:	6063      	str	r3, [r4, #4]
 80043cc:	6004      	str	r4, [r0, #0]
 80043ce:	e7ed      	b.n	80043ac <_free_r+0x24>
 80043d0:	461a      	mov	r2, r3
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	b10b      	cbz	r3, 80043da <_free_r+0x52>
 80043d6:	42a3      	cmp	r3, r4
 80043d8:	d9fa      	bls.n	80043d0 <_free_r+0x48>
 80043da:	6811      	ldr	r1, [r2, #0]
 80043dc:	1850      	adds	r0, r2, r1
 80043de:	42a0      	cmp	r0, r4
 80043e0:	d10b      	bne.n	80043fa <_free_r+0x72>
 80043e2:	6820      	ldr	r0, [r4, #0]
 80043e4:	4401      	add	r1, r0
 80043e6:	1850      	adds	r0, r2, r1
 80043e8:	4283      	cmp	r3, r0
 80043ea:	6011      	str	r1, [r2, #0]
 80043ec:	d1de      	bne.n	80043ac <_free_r+0x24>
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	4401      	add	r1, r0
 80043f4:	6011      	str	r1, [r2, #0]
 80043f6:	6053      	str	r3, [r2, #4]
 80043f8:	e7d8      	b.n	80043ac <_free_r+0x24>
 80043fa:	d902      	bls.n	8004402 <_free_r+0x7a>
 80043fc:	230c      	movs	r3, #12
 80043fe:	602b      	str	r3, [r5, #0]
 8004400:	e7d4      	b.n	80043ac <_free_r+0x24>
 8004402:	6820      	ldr	r0, [r4, #0]
 8004404:	1821      	adds	r1, r4, r0
 8004406:	428b      	cmp	r3, r1
 8004408:	bf01      	itttt	eq
 800440a:	6819      	ldreq	r1, [r3, #0]
 800440c:	685b      	ldreq	r3, [r3, #4]
 800440e:	1809      	addeq	r1, r1, r0
 8004410:	6021      	streq	r1, [r4, #0]
 8004412:	6063      	str	r3, [r4, #4]
 8004414:	6054      	str	r4, [r2, #4]
 8004416:	e7c9      	b.n	80043ac <_free_r+0x24>
 8004418:	bd38      	pop	{r3, r4, r5, pc}
 800441a:	bf00      	nop
 800441c:	20000584 	.word	0x20000584

08004420 <_malloc_r>:
 8004420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004422:	1ccd      	adds	r5, r1, #3
 8004424:	f025 0503 	bic.w	r5, r5, #3
 8004428:	3508      	adds	r5, #8
 800442a:	2d0c      	cmp	r5, #12
 800442c:	bf38      	it	cc
 800442e:	250c      	movcc	r5, #12
 8004430:	2d00      	cmp	r5, #0
 8004432:	4606      	mov	r6, r0
 8004434:	db01      	blt.n	800443a <_malloc_r+0x1a>
 8004436:	42a9      	cmp	r1, r5
 8004438:	d903      	bls.n	8004442 <_malloc_r+0x22>
 800443a:	230c      	movs	r3, #12
 800443c:	6033      	str	r3, [r6, #0]
 800443e:	2000      	movs	r0, #0
 8004440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004442:	f000 f87d 	bl	8004540 <__malloc_lock>
 8004446:	4921      	ldr	r1, [pc, #132]	; (80044cc <_malloc_r+0xac>)
 8004448:	680a      	ldr	r2, [r1, #0]
 800444a:	4614      	mov	r4, r2
 800444c:	b99c      	cbnz	r4, 8004476 <_malloc_r+0x56>
 800444e:	4f20      	ldr	r7, [pc, #128]	; (80044d0 <_malloc_r+0xb0>)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	b923      	cbnz	r3, 800445e <_malloc_r+0x3e>
 8004454:	4621      	mov	r1, r4
 8004456:	4630      	mov	r0, r6
 8004458:	f000 f862 	bl	8004520 <_sbrk_r>
 800445c:	6038      	str	r0, [r7, #0]
 800445e:	4629      	mov	r1, r5
 8004460:	4630      	mov	r0, r6
 8004462:	f000 f85d 	bl	8004520 <_sbrk_r>
 8004466:	1c43      	adds	r3, r0, #1
 8004468:	d123      	bne.n	80044b2 <_malloc_r+0x92>
 800446a:	230c      	movs	r3, #12
 800446c:	4630      	mov	r0, r6
 800446e:	6033      	str	r3, [r6, #0]
 8004470:	f000 f86c 	bl	800454c <__malloc_unlock>
 8004474:	e7e3      	b.n	800443e <_malloc_r+0x1e>
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	1b5b      	subs	r3, r3, r5
 800447a:	d417      	bmi.n	80044ac <_malloc_r+0x8c>
 800447c:	2b0b      	cmp	r3, #11
 800447e:	d903      	bls.n	8004488 <_malloc_r+0x68>
 8004480:	6023      	str	r3, [r4, #0]
 8004482:	441c      	add	r4, r3
 8004484:	6025      	str	r5, [r4, #0]
 8004486:	e004      	b.n	8004492 <_malloc_r+0x72>
 8004488:	6863      	ldr	r3, [r4, #4]
 800448a:	42a2      	cmp	r2, r4
 800448c:	bf0c      	ite	eq
 800448e:	600b      	streq	r3, [r1, #0]
 8004490:	6053      	strne	r3, [r2, #4]
 8004492:	4630      	mov	r0, r6
 8004494:	f000 f85a 	bl	800454c <__malloc_unlock>
 8004498:	f104 000b 	add.w	r0, r4, #11
 800449c:	1d23      	adds	r3, r4, #4
 800449e:	f020 0007 	bic.w	r0, r0, #7
 80044a2:	1ac2      	subs	r2, r0, r3
 80044a4:	d0cc      	beq.n	8004440 <_malloc_r+0x20>
 80044a6:	1a1b      	subs	r3, r3, r0
 80044a8:	50a3      	str	r3, [r4, r2]
 80044aa:	e7c9      	b.n	8004440 <_malloc_r+0x20>
 80044ac:	4622      	mov	r2, r4
 80044ae:	6864      	ldr	r4, [r4, #4]
 80044b0:	e7cc      	b.n	800444c <_malloc_r+0x2c>
 80044b2:	1cc4      	adds	r4, r0, #3
 80044b4:	f024 0403 	bic.w	r4, r4, #3
 80044b8:	42a0      	cmp	r0, r4
 80044ba:	d0e3      	beq.n	8004484 <_malloc_r+0x64>
 80044bc:	1a21      	subs	r1, r4, r0
 80044be:	4630      	mov	r0, r6
 80044c0:	f000 f82e 	bl	8004520 <_sbrk_r>
 80044c4:	3001      	adds	r0, #1
 80044c6:	d1dd      	bne.n	8004484 <_malloc_r+0x64>
 80044c8:	e7cf      	b.n	800446a <_malloc_r+0x4a>
 80044ca:	bf00      	nop
 80044cc:	20000584 	.word	0x20000584
 80044d0:	20000588 	.word	0x20000588

080044d4 <_realloc_r>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	4607      	mov	r7, r0
 80044d8:	4614      	mov	r4, r2
 80044da:	460e      	mov	r6, r1
 80044dc:	b921      	cbnz	r1, 80044e8 <_realloc_r+0x14>
 80044de:	4611      	mov	r1, r2
 80044e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044e4:	f7ff bf9c 	b.w	8004420 <_malloc_r>
 80044e8:	b922      	cbnz	r2, 80044f4 <_realloc_r+0x20>
 80044ea:	f7ff ff4d 	bl	8004388 <_free_r>
 80044ee:	4625      	mov	r5, r4
 80044f0:	4628      	mov	r0, r5
 80044f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044f4:	f000 f830 	bl	8004558 <_malloc_usable_size_r>
 80044f8:	42a0      	cmp	r0, r4
 80044fa:	d20f      	bcs.n	800451c <_realloc_r+0x48>
 80044fc:	4621      	mov	r1, r4
 80044fe:	4638      	mov	r0, r7
 8004500:	f7ff ff8e 	bl	8004420 <_malloc_r>
 8004504:	4605      	mov	r5, r0
 8004506:	2800      	cmp	r0, #0
 8004508:	d0f2      	beq.n	80044f0 <_realloc_r+0x1c>
 800450a:	4631      	mov	r1, r6
 800450c:	4622      	mov	r2, r4
 800450e:	f7ff ff13 	bl	8004338 <memcpy>
 8004512:	4631      	mov	r1, r6
 8004514:	4638      	mov	r0, r7
 8004516:	f7ff ff37 	bl	8004388 <_free_r>
 800451a:	e7e9      	b.n	80044f0 <_realloc_r+0x1c>
 800451c:	4635      	mov	r5, r6
 800451e:	e7e7      	b.n	80044f0 <_realloc_r+0x1c>

08004520 <_sbrk_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	2300      	movs	r3, #0
 8004524:	4d05      	ldr	r5, [pc, #20]	; (800453c <_sbrk_r+0x1c>)
 8004526:	4604      	mov	r4, r0
 8004528:	4608      	mov	r0, r1
 800452a:	602b      	str	r3, [r5, #0]
 800452c:	f7fe f9ee 	bl	800290c <_sbrk>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d102      	bne.n	800453a <_sbrk_r+0x1a>
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	b103      	cbz	r3, 800453a <_sbrk_r+0x1a>
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	bd38      	pop	{r3, r4, r5, pc}
 800453c:	200005e8 	.word	0x200005e8

08004540 <__malloc_lock>:
 8004540:	4801      	ldr	r0, [pc, #4]	; (8004548 <__malloc_lock+0x8>)
 8004542:	f000 b811 	b.w	8004568 <__retarget_lock_acquire_recursive>
 8004546:	bf00      	nop
 8004548:	200005f0 	.word	0x200005f0

0800454c <__malloc_unlock>:
 800454c:	4801      	ldr	r0, [pc, #4]	; (8004554 <__malloc_unlock+0x8>)
 800454e:	f000 b80c 	b.w	800456a <__retarget_lock_release_recursive>
 8004552:	bf00      	nop
 8004554:	200005f0 	.word	0x200005f0

08004558 <_malloc_usable_size_r>:
 8004558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800455c:	1f18      	subs	r0, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	bfbc      	itt	lt
 8004562:	580b      	ldrlt	r3, [r1, r0]
 8004564:	18c0      	addlt	r0, r0, r3
 8004566:	4770      	bx	lr

08004568 <__retarget_lock_acquire_recursive>:
 8004568:	4770      	bx	lr

0800456a <__retarget_lock_release_recursive>:
 800456a:	4770      	bx	lr

0800456c <_init>:
 800456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456e:	bf00      	nop
 8004570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004572:	bc08      	pop	{r3}
 8004574:	469e      	mov	lr, r3
 8004576:	4770      	bx	lr

08004578 <_fini>:
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	bf00      	nop
 800457c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457e:	bc08      	pop	{r3}
 8004580:	469e      	mov	lr, r3
 8004582:	4770      	bx	lr
